digraph "CFG for 'main' function" {
	label="CFG for 'main' function";

	Node0x5609102a3760 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%0:\l  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !3\l  %2 = tail call %struct._IO_FILE* @freopen(i8* getelementptr inbounds ([28 x\l... i8], [28 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8],\l... [2 x i8]* @.str.1, i64 0, i64 0), %struct._IO_FILE* %1)\l  %3 = tail call zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext\l... false)\l  %4 = load i8*, i8** bitcast (%\"class.std::basic_istream\"* @_ZSt3cin to\l... i8**), align 8, !tbaa !7\l  %5 = getelementptr i8, i8* %4, i64 -24\l  %6 = bitcast i8* %5 to i64*\l  %7 = load i64, i64* %6, align 8\l  %8 = add nsw i64 %7, 216\l  %9 = getelementptr inbounds i8, i8* bitcast (%\"class.std::basic_istream\"*\l... @_ZSt3cin to i8*), i64 %8\l  %10 = bitcast i8* %9 to %\"class.std::basic_ostream\"**\l  store %\"class.std::basic_ostream\"* null, %\"class.std::basic_ostream\"** %10,\l... align 8, !tbaa !9\l  %11 = tail call nonnull align 8 dereferenceable(16)\l... %\"class.std::basic_istream\"* @_ZNSirsERi(%\"class.std::basic_istream\"* nonnull\l... align 8 dereferenceable(16) @_ZSt3cin, i32* nonnull align 4\l... dereferenceable(4) @n)\l  %12 = load i32, i32* @n, align 4, !tbaa !12\l  %13 = icmp slt i32 %12, 1\l  br i1 %13, label %16, label %18\l|{<s0>T|<s1>F}}"];
	Node0x5609102a3760:s0 -> Node0x5609102a5cb0;
	Node0x5609102a3760:s1 -> Node0x5609102a5d40;
	Node0x5609102a5e80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%14:\l14:                                               \l  %15 = icmp eq i32 %36, 1\l  br i1 %15, label %39, label %16\l|{<s0>T|<s1>F}}"];
	Node0x5609102a5e80:s0 -> Node0x5609102a5fd0;
	Node0x5609102a5e80:s1 -> Node0x5609102a5cb0;
	Node0x5609102a5cb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%16:\l16:                                               \l  %17 = phi i32 [ %12, %0 ], [ %36, %14 ]\l  br label %42\l}"];
	Node0x5609102a5cb0 -> Node0x5609102a61c0;
	Node0x5609102a5d40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b59970",label="{%18:\l18:                                               \l  %19 = phi i64 [ %35, %32 ], [ 1, %0 ]\l  %20 = getelementptr inbounds [100005 x i64], [100005 x i64]* @arr, i64 0,\l... i64 %19\l  %21 = tail call nonnull align 8 dereferenceable(16)\l... %\"class.std::basic_istream\"*\l... @_ZNSi10_M_extractIxEERSiRT_(%\"class.std::basic_istream\"* nonnull align 8\l... dereferenceable(16) @_ZSt3cin, i64* nonnull align 8 dereferenceable(8) %20)\l  %22 = add nsw i64 %19, -1\l  %23 = getelementptr inbounds [100005 x i64], [100005 x i64]* @left_gcd, i64\l... 0, i64 %22\l  %24 = load i64, i64* %23, align 8, !tbaa !14\l  %25 = load i64, i64* %20, align 8, !tbaa !14\l  %26 = icmp eq i64 %25, 0\l  br i1 %26, label %32, label %27\l|{<s0>T|<s1>F}}"];
	Node0x5609102a5d40:s0 -> Node0x5609102a62b0;
	Node0x5609102a5d40:s1 -> Node0x5609102a70f0;
	Node0x5609102a70f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%27:\l27:                                               \l  %28 = phi i64 [ %30, %27 ], [ %25, %18 ]\l  %29 = phi i64 [ %28, %27 ], [ %24, %18 ]\l  %30 = srem i64 %29, %28\l  %31 = icmp eq i64 %30, 0\l  br i1 %31, label %32, label %27\l|{<s0>T|<s1>F}}"];
	Node0x5609102a70f0:s0 -> Node0x5609102a62b0;
	Node0x5609102a70f0:s1 -> Node0x5609102a70f0;
	Node0x5609102a62b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b59970",label="{%32:\l32:                                               \l  %33 = phi i64 [ %24, %18 ], [ %28, %27 ]\l  %34 = getelementptr inbounds [100005 x i64], [100005 x i64]* @left_gcd, i64\l... 0, i64 %19\l  store i64 %33, i64* %34, align 8, !tbaa !14\l  %35 = add nuw nsw i64 %19, 1\l  %36 = load i32, i32* @n, align 4, !tbaa !12\l  %37 = sext i32 %36 to i64\l  %38 = icmp slt i64 %19, %37\l  br i1 %38, label %18, label %14, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x5609102a62b0:s0 -> Node0x5609102a5d40;
	Node0x5609102a62b0:s1 -> Node0x5609102a5e80;
	Node0x5609102a5fd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#85a8fc70",label="{%39:\l39:                                               \l  %40 = load i64, i64* getelementptr inbounds ([100005 x i64], [100005 x i64]*\l... @arr, i64 0, i64 1), align 8, !tbaa !14\l  %41 = add nsw i64 %40, 1\l  br label %76\l}"];
	Node0x5609102a5fd0 -> Node0x5609102a8490;
	Node0x5609102a61c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%42:\l42:                                               \l  %43 = phi i32 [ %62, %72 ], [ %17, %16 ]\l  %44 = icmp sgt i32 %43, 0\l  br i1 %44, label %45, label %79\l|{<s0>T|<s1>F}}"];
	Node0x5609102a61c0:s0 -> Node0x5609102a86e0;
	Node0x5609102a61c0:s1 -> Node0x5609102a8730;
	Node0x5609102a86e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%45:\l45:                                               \l  %46 = add nuw nsw i32 %43, 1\l  %47 = zext i32 %46 to i64\l  %48 = getelementptr inbounds [100005 x i64], [100005 x i64]* @right_gcd, i64\l... 0, i64 %47\l  %49 = load i64, i64* %48, align 8, !tbaa !14\l  %50 = zext i32 %43 to i64\l  %51 = getelementptr inbounds [100005 x i64], [100005 x i64]* @arr, i64 0,\l... i64 %50\l  %52 = load i64, i64* %51, align 8, !tbaa !14\l  %53 = icmp eq i64 %52, 0\l  br i1 %53, label %59, label %54\l|{<s0>T|<s1>F}}"];
	Node0x5609102a86e0:s0 -> Node0x5609102a8cd0;
	Node0x5609102a86e0:s1 -> Node0x5609102a8d20;
	Node0x5609102a8d20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d0473d70",label="{%54:\l54:                                               \l  %55 = phi i64 [ %57, %54 ], [ %52, %45 ]\l  %56 = phi i64 [ %55, %54 ], [ %49, %45 ]\l  %57 = srem i64 %56, %55\l  %58 = icmp eq i64 %57, 0\l  br i1 %58, label %59, label %54\l|{<s0>T|<s1>F}}"];
	Node0x5609102a8d20:s0 -> Node0x5609102a8cd0;
	Node0x5609102a8d20:s1 -> Node0x5609102a8d20;
	Node0x5609102a8cd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%59:\l59:                                               \l  %60 = phi i64 [ %49, %45 ], [ %55, %54 ]\l  %61 = getelementptr inbounds [100005 x i64], [100005 x i64]* @right_gcd, i64\l... 0, i64 %50\l  store i64 %60, i64* %61, align 8, !tbaa !14\l  %62 = add nsw i32 %43, -1\l  %63 = zext i32 %62 to i64\l  %64 = getelementptr inbounds [100005 x i64], [100005 x i64]* @left_gcd, i64\l... 0, i64 %63\l  %65 = load i64, i64* %64, align 8, !tbaa !14\l  %66 = icmp eq i64 %49, 0\l  br i1 %66, label %72, label %67\l|{<s0>T|<s1>F}}"];
	Node0x5609102a8cd0:s0 -> Node0x5609102a8550;
	Node0x5609102a8cd0:s1 -> Node0x5609102a9a60;
	Node0x5609102a9a60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d0473d70",label="{%67:\l67:                                               \l  %68 = phi i64 [ %70, %67 ], [ %49, %59 ]\l  %69 = phi i64 [ %68, %67 ], [ %65, %59 ]\l  %70 = srem i64 %69, %68\l  %71 = icmp eq i64 %70, 0\l  br i1 %71, label %72, label %67\l|{<s0>T|<s1>F}}"];
	Node0x5609102a9a60:s0 -> Node0x5609102a8550;
	Node0x5609102a9a60:s1 -> Node0x5609102a9a60;
	Node0x5609102a8550 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%72:\l72:                                               \l  %73 = phi i64 [ %65, %59 ], [ %68, %67 ]\l  %74 = srem i64 %52, %73\l  %75 = icmp eq i64 %74, 0\l  br i1 %75, label %42, label %76, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x5609102a8550:s0 -> Node0x5609102a61c0;
	Node0x5609102a8550:s1 -> Node0x5609102a8490;
	Node0x5609102a8490 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%76:\l76:                                               \l  %77 = phi i64 [ %41, %39 ], [ %73, %72 ]\l  %78 = tail call nonnull align 8 dereferenceable(8)\l... %\"class.std::basic_ostream\"*\l... @_ZNSo9_M_insertIxEERSoT_(%\"class.std::basic_ostream\"* nonnull align 8\l... dereferenceable(8) @_ZSt4cout, i64 %77)\l  br label %79\l}"];
	Node0x5609102a8490 -> Node0x5609102a8730;
	Node0x5609102a8730 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%79:\l79:                                               \l  ret i32 0\l}"];
}
