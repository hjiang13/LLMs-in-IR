; ModuleID = '../../Benchmarks/StockPurchaseDay/StockPurchaseDay.cpp'
source_filename = "../../Benchmarks/StockPurchaseDay/StockPurchaseDay.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@n = dso_local global i32 0, align 4
@arr = dso_local global [100005 x i32] zeroinitializer, align 16
@suffmn = dso_local local_unnamed_addr global [100005 x i32] zeroinitializer, align 16
@q = dso_local global i32 0, align 4
@x = dso_local global i32 0, align 4
@.str = private unnamed_addr constant [32 x i8] c"../input_files/StockPurchaseDay\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@stdin = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.2 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_StockPurchaseDay.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: mustprogress nofree nosync nounwind readonly uwtable willreturn
define dso_local i32 @_Z5solvei(i32 %0) local_unnamed_addr #3 {
  %2 = load i32, i32* @n, align 4, !tbaa !3
  %3 = icmp slt i32 %2, 1
  br i1 %3, label %22, label %4

4:                                                ; preds = %1, %4
  %5 = phi i32 [ %20, %4 ], [ %2, %1 ]
  %6 = phi i32 [ %19, %4 ], [ 1, %1 ]
  %7 = phi i32 [ %18, %4 ], [ -1, %1 ]
  %8 = add nsw i32 %5, %6
  %9 = sdiv i32 %8, 2
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds [100005 x i32], [100005 x i32]* @suffmn, i64 0, i64 %10
  %12 = load i32, i32* %11, align 4, !tbaa !3
  %13 = icmp sgt i32 %12, %0
  %14 = add nsw i32 %9, -1
  %15 = icmp slt i32 %7, %9
  %16 = select i1 %15, i32 %9, i32 %7
  %17 = add nsw i32 %9, 1
  %18 = select i1 %13, i32 %7, i32 %16
  %19 = select i1 %13, i32 %6, i32 %17
  %20 = select i1 %13, i32 %14, i32 %5
  %21 = icmp sgt i32 %19, %20
  br i1 %21, label %22, label %4, !llvm.loop !7

22:                                               ; preds = %4, %1
  %23 = phi i32 [ -1, %1 ], [ %18, %4 ]
  ret i32 %23
}

; Function Attrs: mustprogress norecurse uwtable
define dso_local i32 @main() local_unnamed_addr #4 {
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !9
  %2 = tail call %struct._IO_FILE* @freopen(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), %struct._IO_FILE* %1)
  %3 = tail call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* nonnull @n)
  %4 = load i32, i32* @n, align 4, !tbaa !3
  %5 = icmp slt i32 %4, 1
  br i1 %5, label %6, label %106

6:                                                ; preds = %0
  %7 = sext i32 %4 to i64
  %8 = getelementptr inbounds [100005 x i32], [100005 x i32]* @arr, i64 0, i64 %7
  %9 = load i32, i32* %8, align 4, !tbaa !3
  %10 = getelementptr inbounds [100005 x i32], [100005 x i32]* @suffmn, i64 0, i64 %7
  store i32 %9, i32* %10, align 4, !tbaa !3
  br label %114

11:                                               ; preds = %106
  %12 = sext i32 %111 to i64
  %13 = getelementptr inbounds [100005 x i32], [100005 x i32]* @arr, i64 0, i64 %12
  %14 = load i32, i32* %13, align 4, !tbaa !3
  %15 = getelementptr inbounds [100005 x i32], [100005 x i32]* @suffmn, i64 0, i64 %12
  store i32 %14, i32* %15, align 4, !tbaa !3
  %16 = icmp sgt i32 %111, 1
  br i1 %16, label %17, label %114

17:                                               ; preds = %11
  %18 = zext i32 %111 to i64
  %19 = add nsw i64 %18, -1
  %20 = icmp ult i64 %19, 8
  br i1 %20, label %103, label %21

21:                                               ; preds = %17
  %22 = add nsw i64 %18, -2
  %23 = add nsw i32 %111, -1
  %24 = trunc i64 %22 to i32
  %25 = icmp ult i32 %23, %24
  %26 = icmp ugt i64 %22, 4294967295
  %27 = or i1 %25, %26
  %28 = zext i32 %23 to i64
  %29 = shl nuw nsw i64 %28, 2
  %30 = add i64 %29, ptrtoint ([100005 x i32]* @suffmn to i64)
  %31 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %22, i64 4)
  %32 = extractvalue { i64, i1 } %31, 0
  %33 = extractvalue { i64, i1 } %31, 1
  %34 = icmp ugt i64 %32, %30
  %35 = or i1 %34, %33
  %36 = or i1 %27, %35
  %37 = shl nuw nsw i64 %18, 2
  %38 = add i64 %37, ptrtoint ([100005 x i32]* @suffmn to i64)
  %39 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %22, i64 4)
  %40 = extractvalue { i64, i1 } %39, 0
  %41 = extractvalue { i64, i1 } %39, 1
  %42 = icmp ugt i64 %40, %38
  %43 = or i1 %42, %41
  %44 = or i1 %36, %43
  br i1 %44, label %103, label %45

45:                                               ; preds = %21
  %46 = add nsw i32 %111, -1
  %47 = zext i32 %46 to i64
  %48 = add nuw nsw i64 %47, 2
  %49 = sub nsw i64 %48, %18
  %50 = getelementptr [100005 x i32], [100005 x i32]* @suffmn, i64 0, i64 %49
  %51 = add nuw nsw i64 %47, 1
  %52 = getelementptr [100005 x i32], [100005 x i32]* @suffmn, i64 0, i64 %51
  %53 = add nuw nsw i64 %18, 1
  %54 = getelementptr [100005 x i32], [100005 x i32]* @suffmn, i64 0, i64 %53
  %55 = icmp ult i32* %50, %54
  %56 = icmp ugt i32* %52, getelementptr inbounds ([100005 x i32], [100005 x i32]* @suffmn, i64 0, i64 2)
  %57 = and i1 %55, %56
  br i1 %57, label %103, label %58

58:                                               ; preds = %45
  %59 = and i64 %19, -8
  %60 = sub nsw i64 %18, %59
  %61 = trunc i64 %59 to i32
  %62 = sub i32 %111, %61
  br label %63

63:                                               ; preds = %63, %58
  %64 = phi i64 [ 0, %58 ], [ %99, %63 ]
  %65 = sub i64 %18, %64
  %66 = trunc i64 %64 to i32
  %67 = xor i32 %66, -1
  %68 = add i32 %111, %67
  %69 = getelementptr inbounds [100005 x i32], [100005 x i32]* @suffmn, i64 0, i64 %65
  %70 = zext i32 %68 to i64
  %71 = getelementptr inbounds [100005 x i32], [100005 x i32]* @arr, i64 0, i64 %70
  %72 = getelementptr inbounds i32, i32* %71, i64 -3
  %73 = bitcast i32* %72 to <4 x i32>*
  %74 = load <4 x i32>, <4 x i32>* %73, align 4
  %75 = shufflevector <4 x i32> %74, <4 x i32> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %76 = getelementptr inbounds i32, i32* %71, i64 -7
  %77 = bitcast i32* %76 to <4 x i32>*
  %78 = load <4 x i32>, <4 x i32>* %77, align 4
  %79 = shufflevector <4 x i32> %78, <4 x i32> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %80 = getelementptr inbounds i32, i32* %69, i64 -3
  %81 = bitcast i32* %80 to <4 x i32>*
  %82 = load <4 x i32>, <4 x i32>* %81, align 4, !alias.scope !11
  %83 = shufflevector <4 x i32> %82, <4 x i32> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %84 = getelementptr inbounds i32, i32* %69, i64 -7
  %85 = bitcast i32* %84 to <4 x i32>*
  %86 = load <4 x i32>, <4 x i32>* %85, align 4, !alias.scope !11
  %87 = shufflevector <4 x i32> %86, <4 x i32> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %88 = icmp slt <4 x i32> %75, %83
  %89 = icmp slt <4 x i32> %79, %87
  %90 = select <4 x i1> %88, <4 x i32> %75, <4 x i32> %83
  %91 = select <4 x i1> %89, <4 x i32> %79, <4 x i32> %87
  %92 = getelementptr inbounds [100005 x i32], [100005 x i32]* @suffmn, i64 0, i64 %70
  %93 = shufflevector <4 x i32> %90, <4 x i32> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %94 = getelementptr inbounds i32, i32* %92, i64 -3
  %95 = bitcast i32* %94 to <4 x i32>*
  store <4 x i32> %93, <4 x i32>* %95, align 4, !tbaa !3, !alias.scope !14, !noalias !11
  %96 = shufflevector <4 x i32> %91, <4 x i32> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %97 = getelementptr inbounds i32, i32* %92, i64 -7
  %98 = bitcast i32* %97 to <4 x i32>*
  store <4 x i32> %96, <4 x i32>* %98, align 4, !tbaa !3, !alias.scope !14, !noalias !11
  %99 = add nuw i64 %64, 8
  %100 = icmp eq i64 %99, %59
  br i1 %100, label %101, label %63, !llvm.loop !16

101:                                              ; preds = %63
  %102 = icmp eq i64 %19, %59
  br i1 %102, label %114, label %103

103:                                              ; preds = %45, %21, %17, %101
  %104 = phi i64 [ %18, %45 ], [ %18, %21 ], [ %18, %17 ], [ %60, %101 ]
  %105 = phi i32 [ %111, %45 ], [ %111, %21 ], [ %111, %17 ], [ %62, %101 ]
  br label %119

106:                                              ; preds = %0, %106
  %107 = phi i64 [ %110, %106 ], [ 1, %0 ]
  %108 = getelementptr inbounds [100005 x i32], [100005 x i32]* @arr, i64 0, i64 %107
  %109 = tail call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %108)
  %110 = add nuw nsw i64 %107, 1
  %111 = load i32, i32* @n, align 4, !tbaa !3
  %112 = sext i32 %111 to i64
  %113 = icmp slt i64 %107, %112
  br i1 %113, label %106, label %11, !llvm.loop !18

114:                                              ; preds = %119, %101, %6, %11
  %115 = tail call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* nonnull @q)
  %116 = load i32, i32* @q, align 4, !tbaa !3
  %117 = add nsw i32 %116, -1
  store i32 %117, i32* @q, align 4, !tbaa !3
  %118 = icmp eq i32 %116, 0
  br i1 %118, label %162, label %133

119:                                              ; preds = %103, %119
  %120 = phi i64 [ %132, %119 ], [ %104, %103 ]
  %121 = phi i32 [ %122, %119 ], [ %105, %103 ]
  %122 = add nsw i32 %121, -1
  %123 = getelementptr inbounds [100005 x i32], [100005 x i32]* @suffmn, i64 0, i64 %120
  %124 = zext i32 %122 to i64
  %125 = getelementptr inbounds [100005 x i32], [100005 x i32]* @arr, i64 0, i64 %124
  %126 = load i32, i32* %125, align 4
  %127 = load i32, i32* %123, align 4
  %128 = icmp slt i32 %126, %127
  %129 = select i1 %128, i32 %126, i32 %127
  %130 = getelementptr inbounds [100005 x i32], [100005 x i32]* @suffmn, i64 0, i64 %124
  store i32 %129, i32* %130, align 4, !tbaa !3
  %131 = icmp sgt i64 %120, 2
  %132 = add nsw i64 %120, -1
  br i1 %131, label %119, label %114, !llvm.loop !19

133:                                              ; preds = %114, %156
  %134 = tail call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* nonnull @x)
  %135 = load i32, i32* @x, align 4, !tbaa !3
  %136 = load i32, i32* @n, align 4, !tbaa !3
  %137 = icmp slt i32 %136, 1
  br i1 %137, label %156, label %138

138:                                              ; preds = %133, %138
  %139 = phi i32 [ %154, %138 ], [ %136, %133 ]
  %140 = phi i32 [ %153, %138 ], [ 1, %133 ]
  %141 = phi i32 [ %152, %138 ], [ -1, %133 ]
  %142 = add nsw i32 %140, %139
  %143 = sdiv i32 %142, 2
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds [100005 x i32], [100005 x i32]* @suffmn, i64 0, i64 %144
  %146 = load i32, i32* %145, align 4, !tbaa !3
  %147 = icmp sgt i32 %146, %135
  %148 = add nsw i32 %143, -1
  %149 = icmp slt i32 %141, %143
  %150 = select i1 %149, i32 %143, i32 %141
  %151 = add nsw i32 %143, 1
  %152 = select i1 %147, i32 %141, i32 %150
  %153 = select i1 %147, i32 %140, i32 %151
  %154 = select i1 %147, i32 %148, i32 %139
  %155 = icmp sgt i32 %153, %154
  br i1 %155, label %156, label %138, !llvm.loop !7

156:                                              ; preds = %138, %133
  %157 = phi i32 [ -1, %133 ], [ %152, %138 ]
  %158 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %157)
  %159 = load i32, i32* @q, align 4, !tbaa !3
  %160 = add nsw i32 %159, -1
  store i32 %160, i32* @q, align 4, !tbaa !3
  %161 = icmp eq i32 %159, 0
  br i1 %161, label %162, label %133, !llvm.loop !20

162:                                              ; preds = %156, %114
  ret i32 0
}

declare dso_local %struct._IO_FILE* @freopen(i8*, i8*, %struct._IO_FILE*) local_unnamed_addr #0

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @__isoc99_scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_StockPurchaseDay.cpp() #6 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #8
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #7

attributes #0 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nofree nounwind }
attributes #3 = { mustprogress nofree nosync nounwind readonly uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { mustprogress norecurse uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"int", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.mustprogress"}
!9 = !{!10, !10, i64 0}
!10 = !{!"any pointer", !5, i64 0}
!11 = !{!12}
!12 = distinct !{!12, !13}
!13 = distinct !{!13, !"LVerDomain"}
!14 = !{!15}
!15 = distinct !{!15, !13}
!16 = distinct !{!16, !8, !17}
!17 = !{!"llvm.loop.isvectorized", i32 1}
!18 = distinct !{!18, !8}
!19 = distinct !{!19, !8, !17}
!20 = distinct !{!20, !8}
