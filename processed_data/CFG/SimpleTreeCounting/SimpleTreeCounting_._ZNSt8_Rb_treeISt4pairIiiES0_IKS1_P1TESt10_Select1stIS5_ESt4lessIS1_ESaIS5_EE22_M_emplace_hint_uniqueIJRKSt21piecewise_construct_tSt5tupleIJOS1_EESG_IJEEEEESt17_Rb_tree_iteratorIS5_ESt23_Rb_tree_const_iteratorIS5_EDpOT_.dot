digraph "CFG for '_ZNSt8_Rb_treeISt4pairIiiES0_IKS1_P1TESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_' function" {
	label="CFG for '_ZNSt8_Rb_treeISt4pairIiiES0_IKS1_P1TESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_' function";

	Node0x55a988a1dd00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%5:\l  %6 = tail call noalias nonnull i8* @_Znwm(i64 48) #17\l  %7 = getelementptr inbounds i8, i8* %6, i64 32\l  %8 = bitcast %\"class.std::tuple\"* %3 to i64**\l  %9 = load i64*, i64** %8, align 8, !tbaa !3\l  %10 = bitcast i8* %7 to i64*\l  %11 = load i64, i64* %9, align 4\l  store i64 %11, i64* %10, align 8\l  %12 = getelementptr inbounds i8, i8* %6, i64 40\l  %13 = bitcast i8* %12 to %struct.T**\l  store %struct.T* null, %struct.T** %13, align 8, !tbaa !8\l  %14 = bitcast i8* %7 to %\"struct.std::pair\"*\l  %15 = invoke \{ %\"struct.std::_Rb_tree_node_base\"*,\l... %\"struct.std::_Rb_tree_node_base\"* \}\l... @_ZNSt8_Rb_treeISt4pairIiiES0_IKS1_P1TESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE\l...29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_(%\"class.st\l...d::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0,\l... %\"struct.std::_Rb_tree_node_base\"* %1, %\"struct.std::pair\"* nonnull align 4\l... dereferenceable(8) %14)\l          to label %16 unwind label %54\l}"];
	Node0x55a988a1dd00 -> Node0x55a988a1e650;
	Node0x55a988a1dd00 -> Node0x55a988a1e6e0;
	Node0x55a988a1e650 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%16:\l16:                                               \l  %17 = extractvalue \{ %\"struct.std::_Rb_tree_node_base\"*,\l... %\"struct.std::_Rb_tree_node_base\"* \} %15, 0\l  %18 = extractvalue \{ %\"struct.std::_Rb_tree_node_base\"*,\l... %\"struct.std::_Rb_tree_node_base\"* \} %15, 1\l  %19 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %18, null\l  br i1 %19, label %58, label %20\l|{<s0>T|<s1>F}}"];
	Node0x55a988a1e650:s0 -> Node0x55a988a1eb70;
	Node0x55a988a1e650:s1 -> Node0x55a988a1ebc0;
	Node0x55a988a1ebc0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{%20:\l20:                                               \l  %21 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %17, null\l  br i1 %21, label %22, label %44\l|{<s0>T|<s1>F}}"];
	Node0x55a988a1ebc0:s0 -> Node0x55a988a1ed90;
	Node0x55a988a1ebc0:s1 -> Node0x55a988a1ede0;
	Node0x55a988a1ed90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5333470",label="{%22:\l22:                                               \l  %23 = getelementptr inbounds %\"class.std::_Rb_tree\", %\"class.std::_Rb_tree\"*\l... %0, i64 0, i32 0, i32 0, i32 0, i32 0\l  %24 = getelementptr inbounds i8, i8* %23, i64 8\l  %25 = bitcast i8* %24 to %\"struct.std::_Rb_tree_node_base\"*\l  %26 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %18, %25\l  br i1 %26, label %44, label %27\l|{<s0>T|<s1>F}}"];
	Node0x55a988a1ed90:s0 -> Node0x55a988a1ede0;
	Node0x55a988a1ed90:s1 -> Node0x55a988a1f140;
	Node0x55a988a1f140 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ca3b3770",label="{%27:\l27:                                               \l  %28 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\",\l... %\"struct.std::_Rb_tree_node_base\"* %18, i64 1\l  %29 = bitcast %\"struct.std::_Rb_tree_node_base\"* %28 to %\"struct.std::pair\"*\l  %30 = bitcast i8* %7 to i32*\l  %31 = load i32, i32* %30, align 4, !tbaa !12\l  %32 = getelementptr %\"struct.std::_Rb_tree_node_base\",\l... %\"struct.std::_Rb_tree_node_base\"* %28, i64 0, i32 0\l  %33 = load i32, i32* %32, align 4, !tbaa !12\l  %34 = icmp slt i32 %31, %33\l  br i1 %34, label %44, label %35\l|{<s0>T|<s1>F}}"];
	Node0x55a988a1f140:s0 -> Node0x55a988a1ede0;
	Node0x55a988a1f140:s1 -> Node0x55a988a1f5f0;
	Node0x55a988a1f5f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d0473d70",label="{%35:\l35:                                               \l  %36 = icmp slt i32 %33, %31\l  br i1 %36, label %44, label %37\l|{<s0>T|<s1>F}}"];
	Node0x55a988a1f5f0:s0 -> Node0x55a988a1ede0;
	Node0x55a988a1f5f0:s1 -> Node0x55a988a1f780;
	Node0x55a988a1f780 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%37:\l37:                                               \l  %38 = getelementptr inbounds i8, i8* %6, i64 36\l  %39 = bitcast i8* %38 to i32*\l  %40 = load i32, i32* %39, align 4, !tbaa !13\l  %41 = getelementptr inbounds %\"struct.std::pair\", %\"struct.std::pair\"* %29,\l... i64 0, i32 1\l  %42 = load i32, i32* %41, align 4, !tbaa !13\l  %43 = icmp slt i32 %40, %42\l  br label %44\l}"];
	Node0x55a988a1f780 -> Node0x55a988a1ede0;
	Node0x55a988a1ede0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{%44:\l44:                                               \l  %45 = phi i1 [ true, %22 ], [ true, %27 ], [ false, %35 ], [ %43, %37 ], [\l... true, %20 ]\l  %46 = bitcast i8* %6 to %\"struct.std::_Rb_tree_node_base\"*\l  %47 = getelementptr inbounds %\"class.std::_Rb_tree\", %\"class.std::_Rb_tree\"*\l... %0, i64 0, i32 0, i32 0, i32 0, i32 0\l  %48 = getelementptr inbounds i8, i8* %47, i64 8\l  %49 = bitcast i8* %48 to %\"struct.std::_Rb_tree_node_base\"*\l  tail call void\l... @_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_(i1 zeroext\l... %45, %\"struct.std::_Rb_tree_node_base\"* nonnull %46,\l... %\"struct.std::_Rb_tree_node_base\"* nonnull %18,\l... %\"struct.std::_Rb_tree_node_base\"* nonnull align 8 dereferenceable(32) %49)\l... #18\l  %50 = getelementptr inbounds i8, i8* %47, i64 40\l  %51 = bitcast i8* %50 to i64*\l  %52 = load i64, i64* %51, align 8, !tbaa !14\l  %53 = add i64 %52, 1\l  store i64 %53, i64* %51, align 8, !tbaa !14\l  br label %59\l}"];
	Node0x55a988a1ede0 -> Node0x55a988a20050;
	Node0x55a988a1e6e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%54:\l54:                                               \l  %55 = landingpad \{ i8*, i32 \}\l          catch i8* null\l  %56 = extractvalue \{ i8*, i32 \} %55, 0\l  %57 = tail call i8* @__cxa_begin_catch(i8* %56) #18\l  tail call void @_ZdlPv(i8* nonnull %6) #18\l  invoke void @__cxa_rethrow() #19\l          to label %67 unwind label %61\l}"];
	Node0x55a988a1e6e0 -> Node0x55a988a21120;
	Node0x55a988a1e6e0 -> Node0x55a988a21170;
	Node0x55a988a1eb70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c32e3170",label="{%58:\l58:                                               \l  tail call void @_ZdlPv(i8* nonnull %6) #18\l  br label %59\l}"];
	Node0x55a988a1eb70 -> Node0x55a988a20050;
	Node0x55a988a20050 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%59:\l59:                                               \l  %60 = phi %\"struct.std::_Rb_tree_node_base\"* [ %17, %58 ], [ %46, %44 ]\l  ret %\"struct.std::_Rb_tree_node_base\"* %60\l}"];
	Node0x55a988a21170 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%61:\l61:                                               \l  %62 = landingpad \{ i8*, i32 \}\l          cleanup\l  invoke void @__cxa_end_catch()\l          to label %63 unwind label %64\l}"];
	Node0x55a988a21170 -> Node0x55a988a21650;
	Node0x55a988a21170 -> Node0x55a988a216a0;
	Node0x55a988a21650 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%63:\l63:                                               \l  resume \{ i8*, i32 \} %62\l}"];
	Node0x55a988a216a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#93b5fe70",label="{%64:\l64:                                               \l  %65 = landingpad \{ i8*, i32 \}\l          catch i8* null\l  %66 = extractvalue \{ i8*, i32 \} %65, 0\l  tail call void @__clang_call_terminate(i8* %66) #20\l  unreachable\l}"];
	Node0x55a988a21120 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#4f69d970",label="{%67:\l67:                                               \l  unreachable\l}"];
}
