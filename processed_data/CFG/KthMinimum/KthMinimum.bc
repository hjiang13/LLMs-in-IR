; ModuleID = '../../Benchmarks/KthMinimum/KthMinimum.cpp'
source_filename = "../../Benchmarks/KthMinimum/KthMinimum.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZL2pi = internal global double 0.000000e+00, align 8
@n1 = dso_local global i32 0, align 4
@n2 = dso_local global i32 0, align 4
@d = dso_local global i32 0, align 4
@a1 = dso_local global [262160 x i32] zeroinitializer, align 16
@a2 = dso_local global [262160 x i32] zeroinitializer, align 16
@s1 = dso_local local_unnamed_addr global [262160 x i32] zeroinitializer, align 16
@s2 = dso_local local_unnamed_addr global [262160 x i32] zeroinitializer, align 16
@.str = private unnamed_addr constant [26 x i8] c"../input_files/KthMinimum\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@stdin = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@_ZSt3cin = external dso_local global %"class.std::basic_istream", align 8
@_ZSt4cout = external dso_local global %"class.std::basic_ostream", align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_KthMinimum.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare {}* @llvm.invariant.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable
define dso_local void @_Z3addPiii(i32* nocapture %0, i32 %1, i32 %2) local_unnamed_addr #4 {
  %4 = icmp slt i32 %1, 262145
  br i1 %4, label %5, label %15

5:                                                ; preds = %3, %5
  %6 = phi i32 [ %13, %5 ], [ %1, %3 ]
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds i32, i32* %0, i64 %7
  %9 = load i32, i32* %8, align 4, !tbaa !3
  %10 = add nsw i32 %9, %2
  store i32 %10, i32* %8, align 4, !tbaa !3
  %11 = add nsw i32 %6, -1
  %12 = or i32 %11, %6
  %13 = add nsw i32 %12, 1
  %14 = icmp slt i32 %12, 262144
  br i1 %14, label %5, label %15, !llvm.loop !7

15:                                               ; preds = %5, %3
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind readonly uwtable willreturn
define dso_local i32 @_Z4calcPix(i32* nocapture readonly %0, i64 %1) local_unnamed_addr #5 {
  %3 = icmp slt i64 %1, 1
  br i1 %3, label %18, label %4

4:                                                ; preds = %2
  %5 = icmp slt i64 %1, 262144
  %6 = select i1 %5, i64 %1, i64 262144
  %7 = trunc i64 %6 to i32
  br label %8

8:                                                ; preds = %4, %8
  %9 = phi i32 [ %14, %8 ], [ 0, %4 ]
  %10 = phi i32 [ %16, %8 ], [ %7, %4 ]
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds i32, i32* %0, i64 %11
  %13 = load i32, i32* %12, align 4, !tbaa !3
  %14 = add nsw i32 %13, %9
  %15 = add nsw i32 %10, -1
  %16 = and i32 %15, %10
  %17 = icmp sgt i32 %16, 0
  br i1 %17, label %8, label %18, !llvm.loop !9

18:                                               ; preds = %8, %2
  %19 = phi i32 [ 0, %2 ], [ %14, %8 ]
  ret i32 %19
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: mustprogress nofree nosync nounwind uwtable
define dso_local i64 @_Z5solvex(i64 %0) local_unnamed_addr #6 {
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(1048640) bitcast ([262160 x i32]* @s1 to i8*), i8 0, i64 1048640, i1 false)
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(1048640) bitcast ([262160 x i32]* @s2 to i8*), i8 0, i64 1048640, i1 false)
  %2 = load i32, i32* @n2, align 4, !tbaa !3
  %3 = icmp sgt i32 %2, 0
  br i1 %3, label %4, label %6

4:                                                ; preds = %1
  %5 = zext i32 %2 to i64
  br label %16

6:                                                ; preds = %52, %1
  %7 = phi i32 [ 0, %1 ], [ %53, %52 ]
  %8 = load i32, i32* @n1, align 4, !tbaa !3
  %9 = load i32, i32* @d, align 4
  %10 = icmp sgt i64 %0, -1
  %11 = xor i64 %0, -1
  %12 = icmp sgt i32 %8, 0
  br i1 %12, label %13, label %69

13:                                               ; preds = %6
  %14 = sext i32 %2 to i64
  %15 = zext i32 %8 to i64
  br label %56

16:                                               ; preds = %4, %52
  %17 = phi i64 [ 0, %4 ], [ %54, %52 ]
  %18 = phi i32 [ 0, %4 ], [ %53, %52 ]
  %19 = getelementptr inbounds [262160 x i32], [262160 x i32]* @a2, i64 0, i64 %17
  %20 = load i32, i32* %19, align 4, !tbaa !3
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %22, label %36

22:                                               ; preds = %16
  %23 = icmp sgt i32 %20, -262145
  br i1 %23, label %24, label %52

24:                                               ; preds = %22
  %25 = sub nsw i32 0, %20
  br label %26

26:                                               ; preds = %24, %26
  %27 = phi i32 [ %34, %26 ], [ %25, %24 ]
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds [262160 x i32], [262160 x i32]* @s1, i64 0, i64 %28
  %30 = load i32, i32* %29, align 4, !tbaa !3
  %31 = add nsw i32 %30, 1
  store i32 %31, i32* %29, align 4, !tbaa !3
  %32 = add nsw i32 %27, -1
  %33 = or i32 %32, %27
  %34 = add nsw i32 %33, 1
  %35 = icmp slt i32 %33, 262144
  br i1 %35, label %26, label %52, !llvm.loop !7

36:                                               ; preds = %16
  %37 = icmp eq i32 %20, 0
  br i1 %37, label %50, label %38

38:                                               ; preds = %36
  %39 = icmp slt i32 %20, 262145
  br i1 %39, label %40, label %52

40:                                               ; preds = %38, %40
  %41 = phi i32 [ %48, %40 ], [ %20, %38 ]
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds [262160 x i32], [262160 x i32]* @s2, i64 0, i64 %42
  %44 = load i32, i32* %43, align 4, !tbaa !3
  %45 = add nsw i32 %44, 1
  store i32 %45, i32* %43, align 4, !tbaa !3
  %46 = add nsw i32 %41, -1
  %47 = or i32 %46, %41
  %48 = add nsw i32 %47, 1
  %49 = icmp slt i32 %47, 262144
  br i1 %49, label %40, label %52, !llvm.loop !7

50:                                               ; preds = %36
  %51 = add nsw i32 %18, 1
  br label %52

52:                                               ; preds = %40, %26, %38, %22, %50
  %53 = phi i32 [ %51, %50 ], [ %18, %22 ], [ %18, %38 ], [ %18, %26 ], [ %18, %40 ]
  %54 = add nuw nsw i64 %17, 1
  %55 = icmp eq i64 %54, %5
  br i1 %55, label %6, label %16, !llvm.loop !10

56:                                               ; preds = %13, %239
  %57 = phi i64 [ 0, %13 ], [ %241, %239 ]
  %58 = phi i32 [ %7, %13 ], [ %117, %239 ]
  %59 = phi i32 [ 0, %13 ], [ %116, %239 ]
  %60 = phi i64 [ 0, %13 ], [ %240, %239 ]
  %61 = trunc i64 %57 to i32
  %62 = add nsw i32 %9, %61
  %63 = icmp slt i32 %59, %62
  %64 = icmp slt i32 %59, %2
  %65 = select i1 %63, i1 %64, i1 false
  br i1 %65, label %66, label %115

66:                                               ; preds = %56
  %67 = sext i32 %59 to i64
  %68 = sext i32 %62 to i64
  br label %71

69:                                               ; preds = %239, %6
  %70 = phi i64 [ 0, %6 ], [ %240, %239 ]
  ret i64 %70

71:                                               ; preds = %66, %107
  %72 = phi i64 [ %67, %66 ], [ %109, %107 ]
  %73 = phi i32 [ %58, %66 ], [ %108, %107 ]
  %74 = getelementptr inbounds [262160 x i32], [262160 x i32]* @a2, i64 0, i64 %72
  %75 = load i32, i32* %74, align 4, !tbaa !3
  %76 = icmp slt i32 %75, 0
  br i1 %76, label %77, label %91

77:                                               ; preds = %71
  %78 = icmp sgt i32 %75, -262145
  br i1 %78, label %79, label %107

79:                                               ; preds = %77
  %80 = sub nsw i32 0, %75
  br label %81

81:                                               ; preds = %79, %81
  %82 = phi i32 [ %89, %81 ], [ %80, %79 ]
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds [262160 x i32], [262160 x i32]* @s1, i64 0, i64 %83
  %85 = load i32, i32* %84, align 4, !tbaa !3
  %86 = add nsw i32 %85, -1
  store i32 %86, i32* %84, align 4, !tbaa !3
  %87 = add nsw i32 %82, -1
  %88 = or i32 %87, %82
  %89 = add nsw i32 %88, 1
  %90 = icmp slt i32 %88, 262144
  br i1 %90, label %81, label %107, !llvm.loop !7

91:                                               ; preds = %71
  %92 = icmp eq i32 %75, 0
  br i1 %92, label %105, label %93

93:                                               ; preds = %91
  %94 = icmp slt i32 %75, 262145
  br i1 %94, label %95, label %107

95:                                               ; preds = %93, %95
  %96 = phi i32 [ %103, %95 ], [ %75, %93 ]
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds [262160 x i32], [262160 x i32]* @s2, i64 0, i64 %97
  %99 = load i32, i32* %98, align 4, !tbaa !3
  %100 = add nsw i32 %99, -1
  store i32 %100, i32* %98, align 4, !tbaa !3
  %101 = add nsw i32 %96, -1
  %102 = or i32 %101, %96
  %103 = add nsw i32 %102, 1
  %104 = icmp slt i32 %102, 262144
  br i1 %104, label %95, label %107, !llvm.loop !7

105:                                              ; preds = %91
  %106 = add nsw i32 %73, -1
  br label %107

107:                                              ; preds = %95, %81, %93, %77, %105
  %108 = phi i32 [ %106, %105 ], [ %73, %77 ], [ %73, %93 ], [ %73, %81 ], [ %73, %95 ]
  %109 = add nsw i64 %72, 1
  %110 = icmp slt i64 %109, %68
  %111 = icmp slt i64 %109, %14
  %112 = select i1 %110, i1 %111, i1 false
  br i1 %112, label %71, label %113, !llvm.loop !11

113:                                              ; preds = %107
  %114 = trunc i64 %109 to i32
  br label %115

115:                                              ; preds = %113, %56
  %116 = phi i32 [ %59, %56 ], [ %114, %113 ]
  %117 = phi i32 [ %58, %56 ], [ %108, %113 ]
  %118 = getelementptr inbounds [262160 x i32], [262160 x i32]* @a1, i64 0, i64 %57
  %119 = load i32, i32* %118, align 4, !tbaa !3
  %120 = sext i32 %117 to i64
  %121 = add nsw i64 %60, %120
  %122 = select i1 %10, i64 %121, i64 %60
  %123 = icmp eq i32 %119, 0
  br i1 %123, label %124, label %131

124:                                              ; preds = %115
  br i1 %10, label %125, label %239

125:                                              ; preds = %124
  %126 = load i32, i32* getelementptr inbounds ([262160 x i32], [262160 x i32]* @s1, i64 0, i64 262144), align 16, !tbaa !3
  %127 = load i32, i32* getelementptr inbounds ([262160 x i32], [262160 x i32]* @s2, i64 0, i64 262144), align 16, !tbaa !3
  %128 = add nsw i32 %127, %126
  %129 = sext i32 %128 to i64
  %130 = add nsw i64 %122, %129
  br label %239

131:                                              ; preds = %115
  %132 = icmp slt i32 %119, 0
  br i1 %132, label %133, label %186

133:                                              ; preds = %131
  br i1 %10, label %134, label %161

134:                                              ; preds = %133
  %135 = sub nsw i32 0, %119
  %136 = zext i32 %135 to i64
  %137 = udiv i64 %0, %136
  %138 = icmp slt i64 %137, 1
  br i1 %138, label %156, label %139

139:                                              ; preds = %134
  %140 = icmp slt i64 %137, 262144
  %141 = select i1 %140, i64 %137, i64 262144
  %142 = trunc i64 %141 to i32
  br label %143

143:                                              ; preds = %143, %139
  %144 = phi i32 [ %149, %143 ], [ 0, %139 ]
  %145 = phi i32 [ %151, %143 ], [ %142, %139 ]
  %146 = zext i32 %145 to i64
  %147 = getelementptr inbounds [262160 x i32], [262160 x i32]* @s1, i64 0, i64 %146
  %148 = load i32, i32* %147, align 4, !tbaa !3
  %149 = add nsw i32 %148, %144
  %150 = add nsw i32 %145, -1
  %151 = and i32 %150, %145
  %152 = icmp sgt i32 %151, 0
  br i1 %152, label %143, label %153, !llvm.loop !9

153:                                              ; preds = %143
  %154 = sext i32 %149 to i64
  %155 = add nsw i64 %122, %154
  br label %156

156:                                              ; preds = %134, %153
  %157 = phi i64 [ %155, %153 ], [ %121, %134 ]
  %158 = load i32, i32* getelementptr inbounds ([262160 x i32], [262160 x i32]* @s2, i64 0, i64 262144), align 16, !tbaa !3
  %159 = sext i32 %158 to i64
  %160 = add nsw i64 %157, %159
  br label %239

161:                                              ; preds = %133
  %162 = load i32, i32* getelementptr inbounds ([262160 x i32], [262160 x i32]* @s2, i64 0, i64 262144), align 16, !tbaa !3
  %163 = sub nsw i32 0, %119
  %164 = zext i32 %163 to i64
  %165 = sdiv i64 %11, %164
  %166 = icmp slt i64 %165, 1
  br i1 %166, label %181, label %167

167:                                              ; preds = %161
  %168 = icmp slt i64 %165, 262144
  %169 = select i1 %168, i64 %165, i64 262144
  %170 = trunc i64 %169 to i32
  br label %171

171:                                              ; preds = %171, %167
  %172 = phi i32 [ %177, %171 ], [ 0, %167 ]
  %173 = phi i32 [ %179, %171 ], [ %170, %167 ]
  %174 = zext i32 %173 to i64
  %175 = getelementptr inbounds [262160 x i32], [262160 x i32]* @s2, i64 0, i64 %174
  %176 = load i32, i32* %175, align 4, !tbaa !3
  %177 = add nsw i32 %176, %172
  %178 = add nsw i32 %173, -1
  %179 = and i32 %178, %173
  %180 = icmp sgt i32 %179, 0
  br i1 %180, label %171, label %181, !llvm.loop !9

181:                                              ; preds = %171, %161
  %182 = phi i32 [ 0, %161 ], [ %177, %171 ]
  %183 = sub nsw i32 %162, %182
  %184 = sext i32 %183 to i64
  %185 = add nsw i64 %60, %184
  br label %239

186:                                              ; preds = %131
  %187 = load i32, i32* getelementptr inbounds ([262160 x i32], [262160 x i32]* @s1, i64 0, i64 262144), align 16, !tbaa !3
  br i1 %10, label %209, label %188

188:                                              ; preds = %186
  %189 = zext i32 %119 to i64
  %190 = sdiv i64 %11, %189
  %191 = icmp slt i64 %190, 1
  br i1 %191, label %192, label %195

192:                                              ; preds = %188
  %193 = sext i32 %187 to i64
  %194 = add nsw i64 %122, %193
  br label %239

195:                                              ; preds = %188
  %196 = icmp slt i64 %190, 262144
  %197 = select i1 %196, i64 %190, i64 262144
  %198 = trunc i64 %197 to i32
  br label %199

199:                                              ; preds = %199, %195
  %200 = phi i32 [ %205, %199 ], [ 0, %195 ]
  %201 = phi i32 [ %207, %199 ], [ %198, %195 ]
  %202 = zext i32 %201 to i64
  %203 = getelementptr inbounds [262160 x i32], [262160 x i32]* @s1, i64 0, i64 %202
  %204 = load i32, i32* %203, align 4, !tbaa !3
  %205 = add nsw i32 %204, %200
  %206 = add nsw i32 %201, -1
  %207 = and i32 %206, %201
  %208 = icmp sgt i32 %207, 0
  br i1 %208, label %199, label %212, !llvm.loop !9

209:                                              ; preds = %186
  %210 = sext i32 %187 to i64
  %211 = add nsw i64 %122, %210
  br label %216

212:                                              ; preds = %199
  %213 = sub nsw i32 %187, %205
  %214 = sext i32 %213 to i64
  %215 = add nsw i64 %122, %214
  br i1 %10, label %216, label %239

216:                                              ; preds = %209, %212
  %217 = phi i64 [ %211, %209 ], [ %215, %212 ]
  %218 = sext i32 %119 to i64
  %219 = sdiv i64 %0, %218
  %220 = icmp slt i64 %219, 1
  br i1 %220, label %235, label %221

221:                                              ; preds = %216
  %222 = icmp slt i64 %219, 262144
  %223 = select i1 %222, i64 %219, i64 262144
  %224 = trunc i64 %223 to i32
  br label %225

225:                                              ; preds = %225, %221
  %226 = phi i32 [ %231, %225 ], [ 0, %221 ]
  %227 = phi i32 [ %233, %225 ], [ %224, %221 ]
  %228 = zext i32 %227 to i64
  %229 = getelementptr inbounds [262160 x i32], [262160 x i32]* @s2, i64 0, i64 %228
  %230 = load i32, i32* %229, align 4, !tbaa !3
  %231 = add nsw i32 %230, %226
  %232 = add nsw i32 %227, -1
  %233 = and i32 %232, %227
  %234 = icmp sgt i32 %233, 0
  br i1 %234, label %225, label %235, !llvm.loop !9

235:                                              ; preds = %225, %216
  %236 = phi i32 [ 0, %216 ], [ %231, %225 ]
  %237 = sext i32 %236 to i64
  %238 = add nsw i64 %217, %237
  br label %239

239:                                              ; preds = %192, %181, %156, %235, %212, %124, %125
  %240 = phi i64 [ %130, %125 ], [ %60, %124 ], [ %160, %156 ], [ %185, %181 ], [ %238, %235 ], [ %215, %212 ], [ %194, %192 ]
  %241 = add nuw nsw i64 %57, 1
  %242 = icmp eq i64 %241, %15
  br i1 %242, label %69, label %56, !llvm.loop !12
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7

; Function Attrs: mustprogress norecurse uwtable
define dso_local i32 @main() local_unnamed_addr #8 {
  %1 = alloca i64, align 8
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !13
  %3 = tail call %struct._IO_FILE* @freopen(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), %struct._IO_FILE* %2)
  %4 = tail call zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext false)
  %5 = bitcast i64* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #11
  %6 = tail call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* nonnull align 4 dereferenceable(4) @n1)
  %7 = tail call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %6, i32* nonnull align 4 dereferenceable(4) @n2)
  %8 = tail call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %7, i32* nonnull align 4 dereferenceable(4) @d)
  %9 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSi10_M_extractIxEERSiRT_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %8, i64* nonnull align 8 dereferenceable(8) %1)
  %10 = load i32, i32* @n1, align 4, !tbaa !3
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %15, label %12

12:                                               ; preds = %15, %0
  %13 = load i32, i32* @n2, align 4, !tbaa !3
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %23, label %31

15:                                               ; preds = %0, %15
  %16 = phi i64 [ %19, %15 ], [ 0, %0 ]
  %17 = getelementptr inbounds [262160 x i32], [262160 x i32]* @a1, i64 0, i64 %16
  %18 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* nonnull align 4 dereferenceable(4) %17)
  %19 = add nuw nsw i64 %16, 1
  %20 = load i32, i32* @n1, align 4, !tbaa !3
  %21 = sext i32 %20 to i64
  %22 = icmp slt i64 %19, %21
  br i1 %22, label %15, label %12, !llvm.loop !15

23:                                               ; preds = %12, %23
  %24 = phi i64 [ %27, %23 ], [ 0, %12 ]
  %25 = getelementptr inbounds [262160 x i32], [262160 x i32]* @a2, i64 0, i64 %24
  %26 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* nonnull align 4 dereferenceable(4) %25)
  %27 = add nuw nsw i64 %24, 1
  %28 = load i32, i32* @n2, align 4, !tbaa !3
  %29 = sext i32 %28 to i64
  %30 = icmp slt i64 %27, %29
  br i1 %30, label %23, label %31, !llvm.loop !16

31:                                               ; preds = %23, %12
  br label %32

32:                                               ; preds = %31, %32
  %33 = phi i64 [ %41, %32 ], [ 68719476737, %31 ]
  %34 = phi i64 [ %40, %32 ], [ -68719476737, %31 ]
  %35 = add nsw i64 %33, %34
  %36 = sdiv i64 %35, 2
  %37 = call i64 @_Z5solvex(i64 %36)
  %38 = load i64, i64* %1, align 8, !tbaa !17
  %39 = icmp slt i64 %37, %38
  %40 = select i1 %39, i64 %36, i64 %34
  %41 = select i1 %39, i64 %33, i64 %36
  %42 = add nsw i64 %40, 1
  %43 = icmp slt i64 %42, %41
  br i1 %43, label %32, label %44, !llvm.loop !19

44:                                               ; preds = %32
  %45 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo9_M_insertIxEERSoT_(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i64 %41)
  %46 = bitcast %"class.std::basic_ostream"* %45 to i8**
  %47 = load i8*, i8** %46, align 8, !tbaa !20
  %48 = getelementptr i8, i8* %47, i64 -24
  %49 = bitcast i8* %48 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = bitcast %"class.std::basic_ostream"* %45 to i8*
  %52 = add nsw i64 %50, 240
  %53 = getelementptr inbounds i8, i8* %51, i64 %52
  %54 = bitcast i8* %53 to %"class.std::ctype"**
  %55 = load %"class.std::ctype"*, %"class.std::ctype"** %54, align 8, !tbaa !22
  %56 = icmp eq %"class.std::ctype"* %55, null
  br i1 %56, label %57, label %58

57:                                               ; preds = %44
  call void @_ZSt16__throw_bad_castv() #12
  unreachable

58:                                               ; preds = %44
  %59 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %55, i64 0, i32 8
  %60 = load i8, i8* %59, align 8, !tbaa !25
  %61 = icmp eq i8 %60, 0
  br i1 %61, label %65, label %62

62:                                               ; preds = %58
  %63 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %55, i64 0, i32 9, i64 10
  %64 = load i8, i8* %63, align 1, !tbaa !27
  br label %71

65:                                               ; preds = %58
  call void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull align 8 dereferenceable(570) %55)
  %66 = bitcast %"class.std::ctype"* %55 to i8 (%"class.std::ctype"*, i8)***
  %67 = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %66, align 8, !tbaa !20
  %68 = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %67, i64 6
  %69 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %68, align 8
  %70 = call signext i8 %69(%"class.std::ctype"* nonnull align 8 dereferenceable(570) %55, i8 signext 10)
  br label %71

71:                                               ; preds = %62, %65
  %72 = phi i8 [ %64, %62 ], [ %70, %65 ]
  %73 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %45, i8 signext %72)
  %74 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %73)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #11
  ret i32 0
}

declare dso_local %struct._IO_FILE* @freopen(i8*, i8*, %struct._IO_FILE*) local_unnamed_addr #0

declare dso_local zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext) local_unnamed_addr #0

declare dso_local nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16), i32* nonnull align 4 dereferenceable(4)) local_unnamed_addr #0

declare dso_local nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSi10_M_extractIxEERSiRT_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16), i64* nonnull align 8 dereferenceable(8)) local_unnamed_addr #0

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo9_M_insertIxEERSoT_(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #0

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8), i8 signext) local_unnamed_addr #0

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8)) local_unnamed_addr #0

; Function Attrs: noreturn
declare dso_local void @_ZSt16__throw_bad_castv() local_unnamed_addr #9

declare dso_local void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull align 8 dereferenceable(570)) local_unnamed_addr #0

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_KthMinimum.cpp() #10 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #11
  store double 0x400921FB54442D18, double* @_ZL2pi, align 8, !tbaa !28
  %2 = tail call {}* @llvm.invariant.start.p0i8(i64 8, i8* bitcast (double* @_ZL2pi to i8*)) #11
  ret void
}

attributes #0 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nofree nounwind }
attributes #3 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #4 = { mustprogress nofree norecurse nosync nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { mustprogress nofree nosync nounwind readonly uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { mustprogress nofree nosync nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #8 = { mustprogress norecurse uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #10 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #11 = { nounwind }
attributes #12 = { noreturn }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"int", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.mustprogress"}
!9 = distinct !{!9, !8}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !8}
!12 = distinct !{!12, !8}
!13 = !{!14, !14, i64 0}
!14 = !{!"any pointer", !5, i64 0}
!15 = distinct !{!15, !8}
!16 = distinct !{!16, !8}
!17 = !{!18, !18, i64 0}
!18 = !{!"long long", !5, i64 0}
!19 = distinct !{!19, !8}
!20 = !{!21, !21, i64 0}
!21 = !{!"vtable pointer", !6, i64 0}
!22 = !{!23, !14, i64 240}
!23 = !{!"_ZTSSt9basic_iosIcSt11char_traitsIcEE", !14, i64 216, !5, i64 224, !24, i64 225, !14, i64 232, !14, i64 240, !14, i64 248, !14, i64 256}
!24 = !{!"bool", !5, i64 0}
!25 = !{!26, !5, i64 56}
!26 = !{!"_ZTSSt5ctypeIcE", !14, i64 16, !24, i64 24, !14, i64 32, !14, i64 40, !14, i64 48, !5, i64 56, !5, i64 57, !5, i64 313, !5, i64 569}
!27 = !{!5, !5, i64 0}
!28 = !{!29, !29, i64 0}
!29 = !{!"double", !5, i64 0}
