; ModuleID = '../../Benchmarks/AnimalTransport/AnimalTransport.cpp'
source_filename = "../../Benchmarks/AnimalTransport/AnimalTransport.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl" }
%"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl" = type { %"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl_data" }
%"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl_data" = type { %"class.std::vector.0"*, %"class.std::vector.0"*, %"class.std::vector.0"* }
%"class.std::vector.0" = type { %"struct.std::_Vector_base.1" }
%"struct.std::_Vector_base.1" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque

$_ZNSt6vectorIS_IiSaIiEESaIS1_EED2Ev = comdat any

$_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_M_default_appendEm = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@t = dso_local global i32 0, align 4
@m = dso_local global i32 0, align 4
@n = dso_local global i32 0, align 4
@dp = dso_local local_unnamed_addr global [50002 x [2 x i32]] zeroinitializer, align 16
@tree = dso_local local_unnamed_addr global [200008 x [2 x i32]] zeroinitializer, align 16
@lazy = dso_local local_unnamed_addr global [200008 x [2 x i32]] zeroinitializer, align 16
@type = dso_local local_unnamed_addr global [50002 x i32] zeroinitializer, align 16
@second = dso_local global [50002 x i32] zeroinitializer, align 16
@d = dso_local global [50002 x i32] zeroinitializer, align 16
@g = dso_local global %"class.std::vector" zeroinitializer, align 8
@.str = private unnamed_addr constant [31 x i8] c"../input_files/AnimalTransport\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@stdin = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.3 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"%d%d\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c" %c\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.9 = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1
@.str.10 = private unnamed_addr constant [26 x i8] c"vector::_M_default_append\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_AnimalTransport.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZNSt6vectorIS_IiSaIiEESaIS1_EED2Ev(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0) unnamed_addr #4 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load %"class.std::vector.0"*, %"class.std::vector.0"** %2, align 8, !tbaa !3
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = load %"class.std::vector.0"*, %"class.std::vector.0"** %4, align 8, !tbaa !8
  %6 = icmp eq %"class.std::vector.0"* %3, %5
  br i1 %6, label %19, label %7

7:                                                ; preds = %1, %14
  %8 = phi %"class.std::vector.0"* [ %15, %14 ], [ %3, %1 ]
  %9 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %8, i64 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i32*, i32** %9, align 8, !tbaa !9
  %11 = icmp eq i32* %10, null
  br i1 %11, label %14, label %12

12:                                               ; preds = %7
  %13 = bitcast i32* %10 to i8*
  tail call void @_ZdlPv(i8* nonnull %13) #16
  br label %14

14:                                               ; preds = %12, %7
  %15 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %8, i64 1
  %16 = icmp eq %"class.std::vector.0"* %15, %5
  br i1 %16, label %17, label %7, !llvm.loop !11

17:                                               ; preds = %14
  %18 = load %"class.std::vector.0"*, %"class.std::vector.0"** %2, align 8, !tbaa !3
  br label %19

19:                                               ; preds = %17, %1
  %20 = phi %"class.std::vector.0"* [ %18, %17 ], [ %3, %1 ]
  %21 = icmp eq %"class.std::vector.0"* %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %19
  %23 = bitcast %"class.std::vector.0"* %20 to i8*
  tail call void @_ZdlPv(i8* nonnull %23) #16
  br label %24

24:                                               ; preds = %19, %22
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define dso_local void @_Z9propagateiib(i32 %0, i32 %1, i1 zeroext %2) local_unnamed_addr #5 {
  %4 = sext i32 %0 to i64
  %5 = sext i32 %1 to i64
  %6 = getelementptr inbounds [200008 x [2 x i32]], [200008 x [2 x i32]]* @lazy, i64 0, i64 %4, i64 %5
  %7 = load i32, i32* %6, align 4, !tbaa !13
  %8 = getelementptr inbounds [200008 x [2 x i32]], [200008 x [2 x i32]]* @tree, i64 0, i64 %4, i64 %5
  %9 = load i32, i32* %8, align 4, !tbaa !13
  %10 = add nsw i32 %9, %7
  store i32 %10, i32* %8, align 4, !tbaa !13
  br i1 %2, label %23, label %11

11:                                               ; preds = %3
  %12 = shl nsw i32 %0, 1
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds [200008 x [2 x i32]], [200008 x [2 x i32]]* @lazy, i64 0, i64 %13, i64 %5
  %15 = load i32, i32* %14, align 4, !tbaa !13
  %16 = add nsw i32 %15, %7
  store i32 %16, i32* %14, align 4, !tbaa !13
  %17 = load i32, i32* %6, align 4, !tbaa !13
  %18 = or i32 %12, 1
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds [200008 x [2 x i32]], [200008 x [2 x i32]]* @lazy, i64 0, i64 %19, i64 %5
  %21 = load i32, i32* %20, align 4, !tbaa !13
  %22 = add nsw i32 %21, %17
  store i32 %22, i32* %20, align 4, !tbaa !13
  br label %23

23:                                               ; preds = %11, %3
  store i32 0, i32* %6, align 4, !tbaa !13
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable
define dso_local i32 @_Z5queryiiiiii(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #6 {
  %7 = icmp eq i32 %1, %2
  %8 = sext i32 %0 to i64
  %9 = sext i32 %5 to i64
  %10 = getelementptr inbounds [200008 x [2 x i32]], [200008 x [2 x i32]]* @lazy, i64 0, i64 %8, i64 %9
  %11 = load i32, i32* %10, align 4, !tbaa !13
  %12 = getelementptr inbounds [200008 x [2 x i32]], [200008 x [2 x i32]]* @tree, i64 0, i64 %8, i64 %9
  %13 = load i32, i32* %12, align 4, !tbaa !13
  %14 = add nsw i32 %13, %11
  store i32 %14, i32* %12, align 4, !tbaa !13
  br i1 %7, label %27, label %15

15:                                               ; preds = %6
  %16 = shl nsw i32 %0, 1
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds [200008 x [2 x i32]], [200008 x [2 x i32]]* @lazy, i64 0, i64 %17, i64 %9
  %19 = load i32, i32* %18, align 4, !tbaa !13
  %20 = add nsw i32 %19, %11
  store i32 %20, i32* %18, align 4, !tbaa !13
  %21 = load i32, i32* %10, align 4, !tbaa !13
  %22 = or i32 %16, 1
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds [200008 x [2 x i32]], [200008 x [2 x i32]]* @lazy, i64 0, i64 %23, i64 %9
  %25 = load i32, i32* %24, align 4, !tbaa !13
  %26 = add nsw i32 %25, %21
  store i32 %26, i32* %24, align 4, !tbaa !13
  br label %27

27:                                               ; preds = %6, %15
  store i32 0, i32* %10, align 4, !tbaa !13
  %28 = icmp sgt i32 %3, %1
  %29 = icmp slt i32 %4, %2
  %30 = select i1 %28, i1 true, i1 %29
  br i1 %30, label %31, label %35

31:                                               ; preds = %27
  %32 = icmp slt i32 %4, %1
  %33 = icmp sgt i32 %3, %2
  %34 = select i1 %32, i1 true, i1 %33
  br i1 %34, label %35, label %37

35:                                               ; preds = %31, %27, %37
  %36 = phi i32 [ %46, %37 ], [ 0, %31 ], [ %14, %27 ]
  ret i32 %36

37:                                               ; preds = %31
  %38 = add nsw i32 %2, %1
  %39 = sdiv i32 %38, 2
  %40 = shl nsw i32 %0, 1
  %41 = tail call i32 @_Z5queryiiiiii(i32 %40, i32 %1, i32 %39, i32 %3, i32 %4, i32 %5)
  %42 = or i32 %40, 1
  %43 = add nsw i32 %39, 1
  %44 = tail call i32 @_Z5queryiiiiii(i32 %42, i32 %43, i32 %2, i32 %3, i32 %4, i32 %5)
  %45 = icmp slt i32 %41, %44
  %46 = select i1 %45, i32 %44, i32 %41
  br label %35
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable
define dso_local void @_Z6updateiiiiiii(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6) local_unnamed_addr #6 {
  %8 = icmp eq i32 %1, %2
  %9 = sext i32 %0 to i64
  %10 = sext i32 %5 to i64
  %11 = getelementptr inbounds [200008 x [2 x i32]], [200008 x [2 x i32]]* @lazy, i64 0, i64 %9, i64 %10
  %12 = load i32, i32* %11, align 4, !tbaa !13
  %13 = getelementptr inbounds [200008 x [2 x i32]], [200008 x [2 x i32]]* @tree, i64 0, i64 %9, i64 %10
  %14 = load i32, i32* %13, align 4, !tbaa !13
  %15 = add nsw i32 %14, %12
  store i32 %15, i32* %13, align 4, !tbaa !13
  br i1 %8, label %28, label %16

16:                                               ; preds = %7
  %17 = shl nsw i32 %0, 1
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds [200008 x [2 x i32]], [200008 x [2 x i32]]* @lazy, i64 0, i64 %18, i64 %10
  %20 = load i32, i32* %19, align 4, !tbaa !13
  %21 = add nsw i32 %20, %12
  store i32 %21, i32* %19, align 4, !tbaa !13
  %22 = load i32, i32* %11, align 4, !tbaa !13
  %23 = or i32 %17, 1
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds [200008 x [2 x i32]], [200008 x [2 x i32]]* @lazy, i64 0, i64 %24, i64 %10
  %26 = load i32, i32* %25, align 4, !tbaa !13
  %27 = add nsw i32 %26, %22
  store i32 %27, i32* %25, align 4, !tbaa !13
  br label %28

28:                                               ; preds = %7, %16
  store i32 0, i32* %11, align 4, !tbaa !13
  %29 = icmp sgt i32 %3, %1
  %30 = icmp slt i32 %4, %2
  %31 = select i1 %29, i1 true, i1 %30
  br i1 %31, label %47, label %32

32:                                               ; preds = %28
  store i32 %6, i32* %11, align 4, !tbaa !13
  %33 = add nsw i32 %15, %6
  store i32 %33, i32* %13, align 4, !tbaa !13
  br i1 %8, label %46, label %34

34:                                               ; preds = %32
  %35 = shl nsw i32 %0, 1
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds [200008 x [2 x i32]], [200008 x [2 x i32]]* @lazy, i64 0, i64 %36, i64 %10
  %38 = load i32, i32* %37, align 4, !tbaa !13
  %39 = add nsw i32 %38, %6
  store i32 %39, i32* %37, align 4, !tbaa !13
  %40 = load i32, i32* %11, align 4, !tbaa !13
  %41 = or i32 %35, 1
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds [200008 x [2 x i32]], [200008 x [2 x i32]]* @lazy, i64 0, i64 %42, i64 %10
  %44 = load i32, i32* %43, align 4, !tbaa !13
  %45 = add nsw i32 %44, %40
  store i32 %45, i32* %43, align 4, !tbaa !13
  br label %46

46:                                               ; preds = %32, %34
  store i32 0, i32* %11, align 4, !tbaa !13
  br label %51

47:                                               ; preds = %28
  %48 = icmp slt i32 %4, %1
  %49 = icmp sgt i32 %3, %2
  %50 = select i1 %48, i1 true, i1 %49
  br i1 %50, label %51, label %52

51:                                               ; preds = %46, %47, %52
  ret void

52:                                               ; preds = %47
  %53 = add nsw i32 %2, %1
  %54 = sdiv i32 %53, 2
  %55 = shl nsw i32 %0, 1
  tail call void @_Z6updateiiiiiii(i32 %55, i32 %1, i32 %54, i32 %3, i32 %4, i32 %5, i32 %6)
  %56 = or i32 %55, 1
  %57 = add nsw i32 %54, 1
  tail call void @_Z6updateiiiiiii(i32 %56, i32 %57, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6)
  %58 = sext i32 %55 to i64
  %59 = getelementptr inbounds [200008 x [2 x i32]], [200008 x [2 x i32]]* @tree, i64 0, i64 %58, i64 %10
  %60 = sext i32 %56 to i64
  %61 = getelementptr inbounds [200008 x [2 x i32]], [200008 x [2 x i32]]* @tree, i64 0, i64 %60, i64 %10
  %62 = load i32, i32* %59, align 4
  %63 = load i32, i32* %61, align 4
  %64 = icmp slt i32 %62, %63
  %65 = select i1 %64, i32 %63, i32 %62
  store i32 %65, i32* %13, align 4, !tbaa !13
  br label %51
}

; Function Attrs: norecurse uwtable
define dso_local i32 @main() local_unnamed_addr #7 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = alloca i8, align 1
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !15
  %3 = tail call %struct._IO_FILE* @freopen(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), %struct._IO_FILE* %2)
  %4 = tail call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i32* nonnull @t)
  %5 = load i32, i32* @t, align 4, !tbaa !13
  %6 = add nsw i32 %5, -1
  store i32 %6, i32* @t, align 4, !tbaa !13
  %7 = icmp eq i32 %5, 0
  br i1 %7, label %307, label %8

8:                                                ; preds = %0, %294
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i32* nonnull @m, i32* nonnull @n)
  %10 = load i32, i32* @n, align 4, !tbaa !13
  %11 = icmp slt i32 %10, 1
  br i1 %11, label %37, label %14

12:                                               ; preds = %14
  %13 = icmp slt i32 %24, 1
  br i1 %13, label %37, label %29

14:                                               ; preds = %8, %14
  %15 = phi i64 [ %23, %14 ], [ 1, %8 ]
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %1) #16
  %16 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), i8* nonnull %1)
  %17 = load i8, i8* %1, align 1, !tbaa !16
  %18 = icmp ne i8 %17, 68
  %19 = icmp ne i8 %17, 77
  %20 = and i1 %18, %19
  %21 = zext i1 %20 to i32
  %22 = getelementptr inbounds [50002 x i32], [50002 x i32]* @type, i64 0, i64 %15
  store i32 %21, i32* %22, align 4, !tbaa !13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %1) #16
  %23 = add nuw nsw i64 %15, 1
  %24 = load i32, i32* @n, align 4, !tbaa !13
  %25 = sext i32 %24 to i64
  %26 = icmp slt i64 %15, %25
  br i1 %26, label %14, label %12, !llvm.loop !17

27:                                               ; preds = %29
  %28 = icmp slt i32 %34, 1
  br i1 %28, label %37, label %40

29:                                               ; preds = %12, %29
  %30 = phi i64 [ %33, %29 ], [ 1, %12 ]
  %31 = getelementptr inbounds [50002 x i32], [50002 x i32]* @second, i64 0, i64 %30
  %32 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i32* nonnull %31)
  %33 = add nuw nsw i64 %30, 1
  %34 = load i32, i32* @n, align 4, !tbaa !13
  %35 = sext i32 %34 to i64
  %36 = icmp slt i64 %30, %35
  br i1 %36, label %29, label %27, !llvm.loop !18

37:                                               ; preds = %92, %8, %12, %27
  %38 = load i32, i32* @m, align 4, !tbaa !13
  %39 = icmp slt i32 %38, 1
  br i1 %39, label %143, label %99

40:                                               ; preds = %27, %92
  %41 = phi i64 [ %93, %92 ], [ 1, %27 ]
  %42 = getelementptr inbounds [50002 x i32], [50002 x i32]* @d, i64 0, i64 %41
  %43 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i32* nonnull %42)
  %44 = load i32, i32* %42, align 4, !tbaa !13
  %45 = sext i32 %44 to i64
  %46 = load %"class.std::vector.0"*, %"class.std::vector.0"** getelementptr inbounds (%"class.std::vector", %"class.std::vector"* @g, i64 0, i32 0, i32 0, i32 0, i32 0), align 8, !tbaa !3
  %47 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %46, i64 %45, i32 0, i32 0, i32 0, i32 1
  %48 = load i32*, i32** %47, align 8, !tbaa !19
  %49 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %46, i64 %45, i32 0, i32 0, i32 0, i32 2
  %50 = load i32*, i32** %49, align 8, !tbaa !20
  %51 = icmp eq i32* %48, %50
  br i1 %51, label %55, label %52

52:                                               ; preds = %40
  %53 = trunc i64 %41 to i32
  store i32 %53, i32* %48, align 4, !tbaa !13
  %54 = getelementptr inbounds i32, i32* %48, i64 1
  store i32* %54, i32** %47, align 8, !tbaa !19
  br label %92

55:                                               ; preds = %40
  %56 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %46, i64 %45, i32 0, i32 0, i32 0, i32 0
  %57 = load i32*, i32** %56, align 8, !tbaa !9
  %58 = ptrtoint i32* %48 to i64
  %59 = ptrtoint i32* %57 to i64
  %60 = sub i64 %58, %59
  %61 = ashr exact i64 %60, 2
  %62 = icmp eq i64 %60, 9223372036854775804
  br i1 %62, label %63, label %64

63:                                               ; preds = %55
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.9, i64 0, i64 0)) #17
  unreachable

64:                                               ; preds = %55
  %65 = icmp eq i64 %60, 0
  %66 = select i1 %65, i64 1, i64 %61
  %67 = add nsw i64 %66, %61
  %68 = icmp ult i64 %67, %61
  %69 = icmp ugt i64 %67, 2305843009213693951
  %70 = or i1 %68, %69
  %71 = select i1 %70, i64 2305843009213693951, i64 %67
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %77, label %73

73:                                               ; preds = %64
  %74 = shl nuw nsw i64 %71, 2
  %75 = call noalias nonnull i8* @_Znwm(i64 %74) #18
  %76 = bitcast i8* %75 to i32*
  br label %77

77:                                               ; preds = %73, %64
  %78 = phi i32* [ %76, %73 ], [ null, %64 ]
  %79 = getelementptr inbounds i32, i32* %78, i64 %61
  %80 = trunc i64 %41 to i32
  store i32 %80, i32* %79, align 4, !tbaa !13
  %81 = icmp sgt i64 %60, 0
  br i1 %81, label %82, label %85

82:                                               ; preds = %77
  %83 = bitcast i32* %78 to i8*
  %84 = bitcast i32* %57 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %83, i8* align 4 %84, i64 %60, i1 false) #16
  br label %85

85:                                               ; preds = %82, %77
  %86 = getelementptr inbounds i32, i32* %79, i64 1
  %87 = icmp eq i32* %57, null
  br i1 %87, label %90, label %88

88:                                               ; preds = %85
  %89 = bitcast i32* %57 to i8*
  call void @_ZdlPv(i8* nonnull %89) #16
  br label %90

90:                                               ; preds = %88, %85
  store i32* %78, i32** %56, align 8, !tbaa !9
  store i32* %86, i32** %47, align 8, !tbaa !19
  %91 = getelementptr inbounds i32, i32* %78, i64 %71
  store i32* %91, i32** %49, align 8, !tbaa !20
  br label %92

92:                                               ; preds = %52, %90
  %93 = add nuw nsw i64 %41, 1
  %94 = load i32, i32* @n, align 4, !tbaa !13
  %95 = sext i32 %94 to i64
  %96 = icmp slt i64 %41, %95
  br i1 %96, label %40, label %37, !llvm.loop !21

97:                                               ; preds = %110
  %98 = icmp slt i32 %123, 1
  br i1 %98, label %143, label %153

99:                                               ; preds = %37, %110
  %100 = phi i32 [ %123, %110 ], [ %38, %37 ]
  %101 = phi i64 [ %122, %110 ], [ 1, %37 ]
  %102 = load %"class.std::vector.0"*, %"class.std::vector.0"** getelementptr inbounds (%"class.std::vector", %"class.std::vector"* @g, i64 0, i32 0, i32 0, i32 0, i32 0), align 8, !tbaa !3
  %103 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %102, i64 %101, i32 0, i32 0, i32 0, i32 0
  %104 = load i32*, i32** %103, align 8, !tbaa !15
  %105 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %102, i64 %101, i32 0, i32 0, i32 0, i32 1
  %106 = load i32*, i32** %105, align 8, !tbaa !15
  %107 = icmp eq i32* %104, %106
  br i1 %107, label %110, label %126

108:                                              ; preds = %140
  %109 = load i32, i32* @m, align 4, !tbaa !13
  br label %110

110:                                              ; preds = %108, %99
  %111 = phi i32 [ %109, %108 ], [ %100, %99 ]
  %112 = trunc i64 %101 to i32
  %113 = call i32 @_Z5queryiiiiii(i32 1, i32 1, i32 %111, i32 1, i32 %112, i32 1)
  %114 = getelementptr inbounds [50002 x [2 x i32]], [50002 x [2 x i32]]* @dp, i64 0, i64 %101, i64 0
  store i32 %113, i32* %114, align 8, !tbaa !13
  %115 = load i32, i32* @m, align 4, !tbaa !13
  %116 = call i32 @_Z5queryiiiiii(i32 1, i32 1, i32 %115, i32 1, i32 %112, i32 0)
  %117 = getelementptr inbounds [50002 x [2 x i32]], [50002 x [2 x i32]]* @dp, i64 0, i64 %101, i64 1
  store i32 %116, i32* %117, align 4, !tbaa !13
  %118 = load i32, i32* @m, align 4, !tbaa !13
  %119 = load i32, i32* %114, align 8, !tbaa !13
  call void @_Z6updateiiiiiii(i32 1, i32 1, i32 %118, i32 %112, i32 %112, i32 0, i32 %119)
  %120 = load i32, i32* @m, align 4, !tbaa !13
  %121 = load i32, i32* %117, align 4, !tbaa !13
  call void @_Z6updateiiiiiii(i32 1, i32 1, i32 %120, i32 %112, i32 %112, i32 1, i32 %121)
  %122 = add nuw nsw i64 %101, 1
  %123 = load i32, i32* @m, align 4, !tbaa !13
  %124 = sext i32 %123 to i64
  %125 = icmp slt i64 %101, %124
  br i1 %125, label %99, label %97, !llvm.loop !22

126:                                              ; preds = %99, %140
  %127 = phi i32* [ %141, %140 ], [ %104, %99 ]
  %128 = load i32, i32* %127, align 4, !tbaa !13
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds [50002 x i32], [50002 x i32]* @second, i64 0, i64 %129
  %131 = load i32, i32* %130, align 4, !tbaa !13
  %132 = sext i32 %131 to i64
  %133 = icmp sgt i64 %101, %132
  br i1 %133, label %134, label %140

134:                                              ; preds = %126
  %135 = load i32, i32* @m, align 4, !tbaa !13
  %136 = getelementptr inbounds [50002 x i32], [50002 x i32]* @type, i64 0, i64 %129
  %137 = load i32, i32* %136, align 4, !tbaa !13
  %138 = icmp eq i32 %137, 0
  %139 = zext i1 %138 to i32
  call void @_Z6updateiiiiiii(i32 1, i32 1, i32 %135, i32 1, i32 %131, i32 %139, i32 1)
  br label %140

140:                                              ; preds = %134, %126
  %141 = getelementptr inbounds i32, i32* %127, i64 1
  %142 = icmp eq i32* %141, %106
  br i1 %142, label %108, label %126

143:                                              ; preds = %205, %37, %97
  %144 = phi i32* [ null, %97 ], [ null, %37 ], [ %210, %205 ]
  %145 = phi i32* [ null, %97 ], [ null, %37 ], [ %209, %205 ]
  %146 = ptrtoint i32* %144 to i64
  %147 = ptrtoint i32* %145 to i64
  %148 = sub i64 %146, %147
  %149 = icmp sgt i64 %148, 0
  %150 = lshr exact i64 %148, 2
  %151 = load i32, i32* @n, align 4, !tbaa !13
  %152 = icmp slt i32 %151, 1
  br i1 %152, label %218, label %260

153:                                              ; preds = %97, %205
  %154 = phi i32 [ %206, %205 ], [ %123, %97 ]
  %155 = phi i64 [ %211, %205 ], [ 1, %97 ]
  %156 = phi i32* [ %209, %205 ], [ null, %97 ]
  %157 = phi i32* [ %210, %205 ], [ null, %97 ]
  %158 = phi i32* [ %207, %205 ], [ null, %97 ]
  %159 = getelementptr inbounds [50002 x [2 x i32]], [50002 x [2 x i32]]* @dp, i64 0, i64 %155, i64 0
  %160 = getelementptr inbounds [50002 x [2 x i32]], [50002 x [2 x i32]]* @dp, i64 0, i64 %155, i64 1
  %161 = load i32, i32* %159, align 8, !tbaa !13
  %162 = load i32, i32* %160, align 4, !tbaa !13
  %163 = icmp slt i32 %161, %162
  %164 = select i1 %163, i32* %160, i32* %159
  %165 = icmp eq i32* %157, %158
  br i1 %165, label %168, label %166

166:                                              ; preds = %153
  %167 = load i32, i32* %164, align 4, !tbaa !13
  store i32 %167, i32* %157, align 4, !tbaa !13
  br label %205

168:                                              ; preds = %153
  %169 = ptrtoint i32* %157 to i64
  %170 = ptrtoint i32* %156 to i64
  %171 = sub i64 %169, %170
  %172 = ashr exact i64 %171, 2
  %173 = icmp eq i64 %171, 9223372036854775804
  br i1 %173, label %174, label %176

174:                                              ; preds = %168
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.9, i64 0, i64 0)) #17
          to label %175 unwind label %216

175:                                              ; preds = %174
  unreachable

176:                                              ; preds = %168
  %177 = icmp eq i64 %171, 0
  %178 = select i1 %177, i64 1, i64 %172
  %179 = add nsw i64 %178, %172
  %180 = icmp ult i64 %179, %172
  %181 = icmp ugt i64 %179, 2305843009213693951
  %182 = or i1 %180, %181
  %183 = select i1 %182, i64 2305843009213693951, i64 %179
  %184 = icmp eq i64 %183, 0
  br i1 %184, label %190, label %185

185:                                              ; preds = %176
  %186 = shl nuw nsw i64 %183, 2
  %187 = invoke noalias nonnull i8* @_Znwm(i64 %186) #18
          to label %188 unwind label %214

188:                                              ; preds = %185
  %189 = bitcast i8* %187 to i32*
  br label %190

190:                                              ; preds = %188, %176
  %191 = phi i32* [ %189, %188 ], [ null, %176 ]
  %192 = getelementptr inbounds i32, i32* %191, i64 %172
  %193 = load i32, i32* %164, align 4, !tbaa !13
  store i32 %193, i32* %192, align 4, !tbaa !13
  %194 = icmp sgt i64 %171, 0
  br i1 %194, label %195, label %198

195:                                              ; preds = %190
  %196 = bitcast i32* %191 to i8*
  %197 = bitcast i32* %156 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %196, i8* align 4 %197, i64 %171, i1 false) #16
  br label %198

198:                                              ; preds = %195, %190
  %199 = icmp eq i32* %156, null
  br i1 %199, label %202, label %200

200:                                              ; preds = %198
  %201 = bitcast i32* %156 to i8*
  call void @_ZdlPv(i8* nonnull %201) #16
  br label %202

202:                                              ; preds = %200, %198
  %203 = getelementptr inbounds i32, i32* %191, i64 %183
  %204 = load i32, i32* @m, align 4, !tbaa !13
  br label %205

205:                                              ; preds = %202, %166
  %206 = phi i32 [ %204, %202 ], [ %154, %166 ]
  %207 = phi i32* [ %203, %202 ], [ %158, %166 ]
  %208 = phi i32* [ %192, %202 ], [ %157, %166 ]
  %209 = phi i32* [ %191, %202 ], [ %156, %166 ]
  %210 = getelementptr inbounds i32, i32* %208, i64 1
  %211 = add nuw nsw i64 %155, 1
  %212 = sext i32 %206 to i64
  %213 = icmp slt i64 %155, %212
  br i1 %213, label %153, label %143, !llvm.loop !23

214:                                              ; preds = %185
  %215 = landingpad { i8*, i32 }
          cleanup
  br label %300

216:                                              ; preds = %174
  %217 = landingpad { i8*, i32 }
          cleanup
  br label %300

218:                                              ; preds = %277, %143
  %219 = call i32 @putchar(i32 10)
  %220 = load %"class.std::vector.0"*, %"class.std::vector.0"** getelementptr inbounds (%"class.std::vector", %"class.std::vector"* @g, i64 0, i32 0, i32 0, i32 0, i32 0), align 8, !tbaa !3
  %221 = load %"class.std::vector.0"*, %"class.std::vector.0"** getelementptr inbounds (%"class.std::vector", %"class.std::vector"* @g, i64 0, i32 0, i32 0, i32 0, i32 1), align 8, !tbaa !8
  %222 = icmp eq %"class.std::vector.0"* %221, %220
  br i1 %222, label %235, label %223

223:                                              ; preds = %218, %230
  %224 = phi %"class.std::vector.0"* [ %231, %230 ], [ %220, %218 ]
  %225 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %224, i64 0, i32 0, i32 0, i32 0, i32 0
  %226 = load i32*, i32** %225, align 8, !tbaa !9
  %227 = icmp eq i32* %226, null
  br i1 %227, label %230, label %228

228:                                              ; preds = %223
  %229 = bitcast i32* %226 to i8*
  call void @_ZdlPv(i8* nonnull %229) #16
  br label %230

230:                                              ; preds = %228, %223
  %231 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %224, i64 1
  %232 = icmp eq %"class.std::vector.0"* %231, %221
  br i1 %232, label %233, label %223, !llvm.loop !11

233:                                              ; preds = %230
  store %"class.std::vector.0"* %220, %"class.std::vector.0"** getelementptr inbounds (%"class.std::vector", %"class.std::vector"* @g, i64 0, i32 0, i32 0, i32 0, i32 1), align 8, !tbaa !8
  %234 = load %"class.std::vector.0"*, %"class.std::vector.0"** getelementptr inbounds (%"class.std::vector", %"class.std::vector"* @g, i64 0, i32 0, i32 0, i32 0, i32 0), align 8, !tbaa !3
  br label %235

235:                                              ; preds = %218, %233
  %236 = phi %"class.std::vector.0"* [ %220, %218 ], [ %234, %233 ]
  %237 = ptrtoint %"class.std::vector.0"* %220 to i64
  %238 = ptrtoint %"class.std::vector.0"* %236 to i64
  %239 = sub i64 %237, %238
  %240 = sdiv exact i64 %239, 24
  %241 = icmp ult i64 %240, 50002
  br i1 %241, label %242, label %244

242:                                              ; preds = %235
  %243 = sub nuw nsw i64 50002, %240
  invoke void @_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_M_default_appendEm(%"class.std::vector"* nonnull align 8 dereferenceable(24) @g, i64 %243)
          to label %290 unwind label %298

244:                                              ; preds = %235
  %245 = icmp eq i64 %239, 1200048
  br i1 %245, label %290, label %246

246:                                              ; preds = %244
  %247 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %236, i64 50002
  %248 = icmp eq %"class.std::vector.0"* %220, %247
  br i1 %248, label %290, label %249

249:                                              ; preds = %246, %256
  %250 = phi %"class.std::vector.0"* [ %257, %256 ], [ %247, %246 ]
  %251 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %250, i64 0, i32 0, i32 0, i32 0, i32 0
  %252 = load i32*, i32** %251, align 8, !tbaa !9
  %253 = icmp eq i32* %252, null
  br i1 %253, label %256, label %254

254:                                              ; preds = %249
  %255 = bitcast i32* %252 to i8*
  call void @_ZdlPv(i8* nonnull %255) #16
  br label %256

256:                                              ; preds = %254, %249
  %257 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %250, i64 1
  %258 = icmp eq %"class.std::vector.0"* %257, %220
  br i1 %258, label %259, label %249, !llvm.loop !11

259:                                              ; preds = %256
  store %"class.std::vector.0"* %247, %"class.std::vector.0"** getelementptr inbounds (%"class.std::vector", %"class.std::vector"* @g, i64 0, i32 0, i32 0, i32 0, i32 1), align 8, !tbaa !8
  br label %290

260:                                              ; preds = %143, %277
  %261 = phi i32 [ %287, %277 ], [ 1, %143 ]
  br i1 %149, label %262, label %277

262:                                              ; preds = %260, %262
  %263 = phi i64 [ %273, %262 ], [ %150, %260 ]
  %264 = phi i32* [ %272, %262 ], [ %145, %260 ]
  %265 = lshr i64 %263, 1
  %266 = getelementptr inbounds i32, i32* %264, i64 %265
  %267 = load i32, i32* %266, align 4, !tbaa !13
  %268 = icmp slt i32 %267, %261
  %269 = getelementptr inbounds i32, i32* %266, i64 1
  %270 = xor i64 %265, -1
  %271 = add i64 %263, %270
  %272 = select i1 %268, i32* %269, i32* %264
  %273 = select i1 %268, i64 %271, i64 %265
  %274 = icmp sgt i64 %273, 0
  br i1 %274, label %262, label %275, !llvm.loop !24

275:                                              ; preds = %262
  %276 = ptrtoint i32* %272 to i64
  br label %277

277:                                              ; preds = %275, %260
  %278 = phi i64 [ %276, %275 ], [ %147, %260 ]
  %279 = sub i64 %278, %147
  %280 = lshr exact i64 %279, 2
  %281 = trunc i64 %280 to i32
  %282 = add i32 %281, 1
  %283 = load i32, i32* @m, align 4, !tbaa !13
  %284 = icmp eq i32 %283, %281
  %285 = select i1 %284, i32 -1, i32 %282
  %286 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0), i32 %285)
  %287 = add nuw nsw i32 %261, 1
  %288 = load i32, i32* @n, align 4, !tbaa !13
  %289 = icmp slt i32 %261, %288
  br i1 %289, label %260, label %218, !llvm.loop !25

290:                                              ; preds = %259, %246, %244, %242
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(1600064) bitcast ([200008 x [2 x i32]]* @tree to i8*), i8 0, i64 1600064, i1 false)
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(1600064) bitcast ([200008 x [2 x i32]]* @lazy to i8*), i8 0, i64 1600064, i1 false)
  %291 = icmp eq i32* %145, null
  br i1 %291, label %294, label %292

292:                                              ; preds = %290
  %293 = bitcast i32* %145 to i8*
  call void @_ZdlPv(i8* nonnull %293) #16
  br label %294

294:                                              ; preds = %290, %292
  %295 = load i32, i32* @t, align 4, !tbaa !13
  %296 = add nsw i32 %295, -1
  store i32 %296, i32* @t, align 4, !tbaa !13
  %297 = icmp eq i32 %295, 0
  br i1 %297, label %307, label %8, !llvm.loop !26

298:                                              ; preds = %242
  %299 = landingpad { i8*, i32 }
          cleanup
  br label %300

300:                                              ; preds = %214, %216, %298
  %301 = phi i32* [ %145, %298 ], [ %156, %214 ], [ %156, %216 ]
  %302 = phi { i8*, i32 } [ %299, %298 ], [ %215, %214 ], [ %217, %216 ]
  %303 = icmp eq i32* %301, null
  br i1 %303, label %306, label %304

304:                                              ; preds = %300
  %305 = bitcast i32* %301 to i8*
  call void @_ZdlPv(i8* nonnull %305) #16
  br label %306

306:                                              ; preds = %300, %304
  resume { i8*, i32 } %302

307:                                              ; preds = %294, %0
  ret i32 0
}

declare dso_local %struct._IO_FILE* @freopen(i8*, i8*, %struct._IO_FILE*) local_unnamed_addr #0

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @__isoc99_scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #8

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #8

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #9

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #10

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #11

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #12

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #13

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_M_default_appendEm(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0, i64 %1) local_unnamed_addr #14 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %75, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %6 = load %"class.std::vector.0"*, %"class.std::vector.0"** %5, align 8, !tbaa !8
  %7 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = load %"class.std::vector.0"*, %"class.std::vector.0"** %7, align 8, !tbaa !3
  %9 = ptrtoint %"class.std::vector.0"* %6 to i64
  %10 = ptrtoint %"class.std::vector.0"* %8 to i64
  %11 = sub i64 %9, %10
  %12 = sdiv exact i64 %11, 24
  %13 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %14 = load %"class.std::vector.0"*, %"class.std::vector.0"** %13, align 8, !tbaa !27
  %15 = ptrtoint %"class.std::vector.0"* %14 to i64
  %16 = sub i64 %15, %9
  %17 = sdiv exact i64 %16, 24
  %18 = icmp ult i64 %12, 384307168202282326
  tail call void @llvm.assume(i1 %18)
  %19 = sub nuw nsw i64 384307168202282325, %12
  %20 = icmp ule i64 %17, %19
  tail call void @llvm.assume(i1 %20)
  %21 = icmp ult i64 %17, %1
  br i1 %21, label %26, label %22

22:                                               ; preds = %4
  %23 = bitcast %"class.std::vector.0"* %6 to i8*
  %24 = mul nuw i64 %1, 24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 %24, i1 false)
  %25 = getelementptr %"class.std::vector.0", %"class.std::vector.0"* %6, i64 %1
  store %"class.std::vector.0"* %25, %"class.std::vector.0"** %5, align 8, !tbaa !8
  br label %75

26:                                               ; preds = %4
  %27 = icmp ult i64 %19, %1
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.10, i64 0, i64 0)) #17
  unreachable

29:                                               ; preds = %26
  %30 = icmp ult i64 %12, %1
  %31 = select i1 %30, i64 %1, i64 %12
  %32 = add i64 %31, %12
  %33 = icmp ult i64 %32, %12
  %34 = icmp ugt i64 %32, 384307168202282325
  %35 = or i1 %33, %34
  %36 = select i1 %35, i64 384307168202282325, i64 %32
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %44, label %38

38:                                               ; preds = %29
  %39 = mul nuw nsw i64 %36, 24
  %40 = tail call noalias nonnull i8* @_Znwm(i64 %39) #18
  %41 = bitcast i8* %40 to %"class.std::vector.0"*
  %42 = load %"class.std::vector.0"*, %"class.std::vector.0"** %7, align 8, !tbaa !3
  %43 = load %"class.std::vector.0"*, %"class.std::vector.0"** %5, align 8, !tbaa !8
  br label %44

44:                                               ; preds = %38, %29
  %45 = phi %"class.std::vector.0"* [ %43, %38 ], [ %6, %29 ]
  %46 = phi %"class.std::vector.0"* [ %42, %38 ], [ %8, %29 ]
  %47 = phi %"class.std::vector.0"* [ %41, %38 ], [ null, %29 ]
  %48 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %47, i64 %12
  %49 = bitcast %"class.std::vector.0"* %48 to i8*
  %50 = mul nuw i64 %1, 24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 %50, i1 false)
  %51 = icmp eq %"class.std::vector.0"* %46, %45
  br i1 %51, label %67, label %52

52:                                               ; preds = %44, %52
  %53 = phi %"class.std::vector.0"* [ %63, %52 ], [ %47, %44 ]
  %54 = phi %"class.std::vector.0"* [ %62, %52 ], [ %46, %44 ]
  %55 = bitcast %"class.std::vector.0"* %54 to <2 x i32*>*
  %56 = load <2 x i32*>, <2 x i32*>* %55, align 8, !tbaa !15
  %57 = bitcast %"class.std::vector.0"* %53 to <2 x i32*>*
  store <2 x i32*> %56, <2 x i32*>* %57, align 8, !tbaa !15
  %58 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %53, i64 0, i32 0, i32 0, i32 0, i32 2
  %59 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %54, i64 0, i32 0, i32 0, i32 0, i32 2
  %60 = load i32*, i32** %59, align 8, !tbaa !20
  store i32* %60, i32** %58, align 8, !tbaa !20
  %61 = bitcast %"class.std::vector.0"* %54 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %61, i8 0, i64 24, i1 false) #16
  %62 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %54, i64 1
  %63 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %53, i64 1
  %64 = icmp eq %"class.std::vector.0"* %62, %45
  br i1 %64, label %65, label %52, !llvm.loop !28

65:                                               ; preds = %52
  %66 = load %"class.std::vector.0"*, %"class.std::vector.0"** %7, align 8, !tbaa !3
  br label %67

67:                                               ; preds = %65, %44
  %68 = phi %"class.std::vector.0"* [ %66, %65 ], [ %45, %44 ]
  %69 = icmp eq %"class.std::vector.0"* %68, null
  br i1 %69, label %72, label %70

70:                                               ; preds = %67
  %71 = bitcast %"class.std::vector.0"* %68 to i8*
  tail call void @_ZdlPv(i8* nonnull %71) #16
  br label %72

72:                                               ; preds = %67, %70
  store %"class.std::vector.0"* %47, %"class.std::vector.0"** %7, align 8, !tbaa !3
  %73 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %48, i64 %1
  store %"class.std::vector.0"* %73, %"class.std::vector.0"** %5, align 8, !tbaa !8
  %74 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %47, i64 %36
  store %"class.std::vector.0"* %74, %"class.std::vector.0"** %13, align 8, !tbaa !27
  br label %75

75:                                               ; preds = %22, %72, %2
  ret void
}

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_AnimalTransport.cpp() #14 section ".text.startup" personality i32 (...)* @__gxx_personality_v0 {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #16
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) bitcast (%"class.std::vector"* @g to i8*), i8 0, i64 24, i1 false) #16
  %2 = tail call noalias nonnull i8* @_Znwm(i64 1200048) #18
  store i8* %2, i8** bitcast (%"class.std::vector"* @g to i8**), align 8, !tbaa !3
  %3 = getelementptr i8, i8* %2, i64 1200048
  store i8* %3, i8** bitcast (%"class.std::vector.0"** getelementptr inbounds (%"class.std::vector", %"class.std::vector"* @g, i64 0, i32 0, i32 0, i32 0, i32 2) to i8**), align 8, !tbaa !27
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(1200048) %2, i8 0, i64 1200048, i1 false)
  store i8* %3, i8** bitcast (%"class.std::vector.0"** getelementptr inbounds (%"class.std::vector", %"class.std::vector"* @g, i64 0, i32 0, i32 0, i32 0, i32 1) to i8**), align 8, !tbaa !8
  %4 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::vector"*)* @_ZNSt6vectorIS_IiSaIiEESaIS1_EED2Ev to void (i8*)*), i8* bitcast (%"class.std::vector"* @g to i8*), i8* nonnull @__dso_handle) #16
  ret void
}

; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #15

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #2

attributes #0 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nofree nounwind }
attributes #3 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #4 = { nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { mustprogress nofree norecurse nosync nounwind uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { mustprogress nofree nosync nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { norecurse uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #10 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #11 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #12 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #13 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #14 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #15 = { inaccessiblememonly nofree nosync nounwind willreturn }
attributes #16 = { nounwind }
attributes #17 = { noreturn }
attributes #18 = { allocsize(0) }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 0}
!4 = !{!"_ZTSNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 8}
!9 = !{!10, !5, i64 0}
!10 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.mustprogress"}
!13 = !{!14, !14, i64 0}
!14 = !{!"int", !6, i64 0}
!15 = !{!5, !5, i64 0}
!16 = !{!6, !6, i64 0}
!17 = distinct !{!17, !12}
!18 = distinct !{!18, !12}
!19 = !{!10, !5, i64 8}
!20 = !{!10, !5, i64 16}
!21 = distinct !{!21, !12}
!22 = distinct !{!22, !12}
!23 = distinct !{!23, !12}
!24 = distinct !{!24, !12}
!25 = distinct !{!25, !12}
!26 = distinct !{!26, !12}
!27 = !{!4, !5, i64 16}
!28 = distinct !{!28, !12}
