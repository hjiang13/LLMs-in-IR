; ModuleID = '../../Benchmarks/MinimumEdgesinaLayeredGraph/MinimumEdgesinaLayeredGraph.cpp'
source_filename = "../../Benchmarks/MinimumEdgesinaLayeredGraph/MinimumEdgesinaLayeredGraph.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@n = dso_local global i32 0, align 4
@k = dso_local global i32 0, align 4
@dp = dso_local local_unnamed_addr global [110 x [110 x [110 x i32]]] zeroinitializer, align 16
@.str = private unnamed_addr constant [43 x i8] c"../input_files/MinimumEdgesinaLayeredGraph\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@stdin = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@_ZSt3cin = external dso_local global %"class.std::basic_istream", align 8
@_ZSt4cout = external dso_local global %"class.std::basic_ostream", align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_MinimumEdgesinaLayeredGraph.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: mustprogress norecurse uwtable
define dso_local i32 @main() local_unnamed_addr #3 {
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !3
  %2 = tail call %struct._IO_FILE* @freopen(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), %struct._IO_FILE* %1)
  %3 = tail call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* nonnull align 4 dereferenceable(4) @n)
  %4 = tail call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* nonnull align 4 dereferenceable(4) @k)
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(5324000) bitcast ([110 x [110 x [110 x i32]]]* @dp to i8*), i8 63, i64 5324000, i1 false)
  store i32 0, i32* getelementptr inbounds ([110 x [110 x [110 x i32]]], [110 x [110 x [110 x i32]]]* @dp, i64 0, i64 1, i64 1, i64 1), align 4, !tbaa !7
  %5 = load i32, i32* @k, align 4, !tbaa !7
  %6 = load i32, i32* @n, align 4
  %7 = icmp sgt i32 %5, 2
  br i1 %7, label %8, label %17

8:                                                ; preds = %0
  %9 = icmp slt i32 %6, 1
  br i1 %9, label %172, label %10

10:                                               ; preds = %8
  %11 = add nuw i32 %6, 1
  %12 = zext i32 %5 to i64
  %13 = zext i32 %11 to i64
  br label %14

14:                                               ; preds = %10, %119
  %15 = phi i64 [ 2, %10 ], [ %120, %119 ]
  %16 = add nsw i64 %15, -1
  br label %110

17:                                               ; preds = %119, %0
  %18 = add nsw i32 %5, -1
  %19 = sext i32 %18 to i64
  %20 = add nsw i32 %6, -1
  %21 = sext i32 %20 to i64
  %22 = icmp sgt i32 %6, 1
  br i1 %22, label %23, label %172

23:                                               ; preds = %17
  %24 = zext i32 %6 to i64
  %25 = add nsw i64 %24, -1
  %26 = icmp ult i64 %25, 8
  br i1 %26, label %107, label %27

27:                                               ; preds = %23
  %28 = and i64 %25, -8
  %29 = or i64 %28, 1
  %30 = add nsw i64 %28, -8
  %31 = lshr exact i64 %30, 3
  %32 = add nuw nsw i64 %31, 1
  %33 = and i64 %32, 1
  %34 = icmp eq i64 %30, 0
  br i1 %34, label %78, label %35

35:                                               ; preds = %27
  %36 = and i64 %32, 4611686018427387902
  br label %37

37:                                               ; preds = %37, %35
  %38 = phi i64 [ 0, %35 ], [ %72, %37 ]
  %39 = phi <4 x i32> [ <i32 1061109567, i32 1061109567, i32 1061109567, i32 1061109567>, %35 ], [ %70, %37 ]
  %40 = phi <4 x i32> [ <i32 1061109567, i32 1061109567, i32 1061109567, i32 1061109567>, %35 ], [ %71, %37 ]
  %41 = phi <4 x i32> [ <i32 1, i32 2, i32 3, i32 4>, %35 ], [ %73, %37 ]
  %42 = phi i64 [ %36, %35 ], [ %74, %37 ]
  %43 = or i64 %38, 1
  %44 = getelementptr inbounds [110 x [110 x [110 x i32]]], [110 x [110 x [110 x i32]]]* @dp, i64 0, i64 %19, i64 %21, i64 %43
  %45 = bitcast i32* %44 to <4 x i32>*
  %46 = load <4 x i32>, <4 x i32>* %45, align 4, !tbaa !7
  %47 = getelementptr inbounds i32, i32* %44, i64 4
  %48 = bitcast i32* %47 to <4 x i32>*
  %49 = load <4 x i32>, <4 x i32>* %48, align 4, !tbaa !7
  %50 = add <4 x i32> %41, <i32 4, i32 4, i32 4, i32 4>
  %51 = add nsw <4 x i32> %46, %41
  %52 = add nsw <4 x i32> %49, %50
  %53 = icmp slt <4 x i32> %51, %39
  %54 = icmp slt <4 x i32> %52, %40
  %55 = select <4 x i1> %53, <4 x i32> %51, <4 x i32> %39
  %56 = select <4 x i1> %54, <4 x i32> %52, <4 x i32> %40
  %57 = add <4 x i32> %41, <i32 8, i32 8, i32 8, i32 8>
  %58 = or i64 %38, 9
  %59 = getelementptr inbounds [110 x [110 x [110 x i32]]], [110 x [110 x [110 x i32]]]* @dp, i64 0, i64 %19, i64 %21, i64 %58
  %60 = bitcast i32* %59 to <4 x i32>*
  %61 = load <4 x i32>, <4 x i32>* %60, align 4, !tbaa !7
  %62 = getelementptr inbounds i32, i32* %59, i64 4
  %63 = bitcast i32* %62 to <4 x i32>*
  %64 = load <4 x i32>, <4 x i32>* %63, align 4, !tbaa !7
  %65 = add <4 x i32> %41, <i32 12, i32 12, i32 12, i32 12>
  %66 = add nsw <4 x i32> %61, %57
  %67 = add nsw <4 x i32> %64, %65
  %68 = icmp slt <4 x i32> %66, %55
  %69 = icmp slt <4 x i32> %67, %56
  %70 = select <4 x i1> %68, <4 x i32> %66, <4 x i32> %55
  %71 = select <4 x i1> %69, <4 x i32> %67, <4 x i32> %56
  %72 = add nuw i64 %38, 16
  %73 = add <4 x i32> %41, <i32 16, i32 16, i32 16, i32 16>
  %74 = add i64 %42, -2
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %76, label %37, !llvm.loop !9

76:                                               ; preds = %37
  %77 = or i64 %72, 1
  br label %78

78:                                               ; preds = %76, %27
  %79 = phi <4 x i32> [ undef, %27 ], [ %70, %76 ]
  %80 = phi <4 x i32> [ undef, %27 ], [ %71, %76 ]
  %81 = phi i64 [ 1, %27 ], [ %77, %76 ]
  %82 = phi <4 x i32> [ <i32 1061109567, i32 1061109567, i32 1061109567, i32 1061109567>, %27 ], [ %70, %76 ]
  %83 = phi <4 x i32> [ <i32 1061109567, i32 1061109567, i32 1061109567, i32 1061109567>, %27 ], [ %71, %76 ]
  %84 = phi <4 x i32> [ <i32 1, i32 2, i32 3, i32 4>, %27 ], [ %73, %76 ]
  %85 = icmp eq i64 %33, 0
  br i1 %85, label %100, label %86

86:                                               ; preds = %78
  %87 = getelementptr inbounds [110 x [110 x [110 x i32]]], [110 x [110 x [110 x i32]]]* @dp, i64 0, i64 %19, i64 %21, i64 %81
  %88 = bitcast i32* %87 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4, !tbaa !7
  %90 = getelementptr inbounds i32, i32* %87, i64 4
  %91 = bitcast i32* %90 to <4 x i32>*
  %92 = load <4 x i32>, <4 x i32>* %91, align 4, !tbaa !7
  %93 = add <4 x i32> %84, <i32 4, i32 4, i32 4, i32 4>
  %94 = add nsw <4 x i32> %89, %84
  %95 = add nsw <4 x i32> %92, %93
  %96 = icmp slt <4 x i32> %95, %83
  %97 = select <4 x i1> %96, <4 x i32> %95, <4 x i32> %83
  %98 = icmp slt <4 x i32> %94, %82
  %99 = select <4 x i1> %98, <4 x i32> %94, <4 x i32> %82
  br label %100

100:                                              ; preds = %78, %86
  %101 = phi <4 x i32> [ %79, %78 ], [ %99, %86 ]
  %102 = phi <4 x i32> [ %80, %78 ], [ %97, %86 ]
  %103 = icmp slt <4 x i32> %101, %102
  %104 = select <4 x i1> %103, <4 x i32> %101, <4 x i32> %102
  %105 = call i32 @llvm.vector.reduce.smin.v4i32(<4 x i32> %104)
  %106 = icmp eq i64 %25, %28
  br i1 %106, label %169, label %107

107:                                              ; preds = %23, %100
  %108 = phi i64 [ 1, %23 ], [ %29, %100 ]
  %109 = phi i32 [ 1061109567, %23 ], [ %105, %100 ]
  br label %176

110:                                              ; preds = %14, %128
  %111 = phi i64 [ 0, %14 ], [ %132, %128 ]
  %112 = phi i64 [ 1, %14 ], [ %129, %128 ]
  %113 = phi i64 [ 2, %14 ], [ %130, %128 ]
  %114 = add i64 %111, 1
  %115 = and i64 %114, 1
  %116 = icmp eq i64 %111, 0
  %117 = and i64 %114, -2
  %118 = icmp eq i64 %115, 0
  br label %122

119:                                              ; preds = %128
  %120 = add nuw nsw i64 %15, 1
  %121 = icmp eq i64 %120, %12
  br i1 %121, label %17, label %14, !llvm.loop !12

122:                                              ; preds = %110, %144
  %123 = phi i64 [ 1, %110 ], [ %145, %144 ]
  %124 = getelementptr inbounds [110 x [110 x [110 x i32]]], [110 x [110 x [110 x i32]]]* @dp, i64 0, i64 %15, i64 %112, i64 %123
  %125 = sub nsw i64 %112, %123
  %126 = load i32, i32* %124, align 4, !tbaa !7
  %127 = trunc i64 %123 to i32
  br i1 %116, label %133, label %147

128:                                              ; preds = %144
  %129 = add nuw nsw i64 %112, 1
  %130 = add nuw nsw i64 %113, 1
  %131 = icmp eq i64 %129, %13
  %132 = add i64 %111, 1
  br i1 %131, label %119, label %110, !llvm.loop !13

133:                                              ; preds = %147, %122
  %134 = phi i32 [ %126, %122 ], [ %165, %147 ]
  %135 = phi i64 [ 1, %122 ], [ %166, %147 ]
  br i1 %118, label %144, label %136

136:                                              ; preds = %133
  %137 = getelementptr inbounds [110 x [110 x [110 x i32]]], [110 x [110 x [110 x i32]]]* @dp, i64 0, i64 %16, i64 %125, i64 %135
  %138 = load i32, i32* %137, align 4, !tbaa !7
  %139 = trunc i64 %135 to i32
  %140 = mul nsw i32 %139, %127
  %141 = add nsw i32 %138, %140
  %142 = icmp slt i32 %141, %134
  %143 = select i1 %142, i32 %141, i32 %134
  store i32 %143, i32* %124, align 4, !tbaa !7
  br label %144

144:                                              ; preds = %133, %136
  %145 = add nuw nsw i64 %123, 1
  %146 = icmp eq i64 %145, %113
  br i1 %146, label %128, label %122, !llvm.loop !14

147:                                              ; preds = %122, %147
  %148 = phi i32 [ %165, %147 ], [ %126, %122 ]
  %149 = phi i64 [ %166, %147 ], [ 1, %122 ]
  %150 = phi i64 [ %167, %147 ], [ %117, %122 ]
  %151 = getelementptr inbounds [110 x [110 x [110 x i32]]], [110 x [110 x [110 x i32]]]* @dp, i64 0, i64 %16, i64 %125, i64 %149
  %152 = load i32, i32* %151, align 4, !tbaa !7
  %153 = trunc i64 %149 to i32
  %154 = mul nsw i32 %153, %127
  %155 = add nsw i32 %152, %154
  %156 = icmp slt i32 %155, %148
  %157 = select i1 %156, i32 %155, i32 %148
  store i32 %157, i32* %124, align 4, !tbaa !7
  %158 = add nuw nsw i64 %149, 1
  %159 = getelementptr inbounds [110 x [110 x [110 x i32]]], [110 x [110 x [110 x i32]]]* @dp, i64 0, i64 %16, i64 %125, i64 %158
  %160 = load i32, i32* %159, align 4, !tbaa !7
  %161 = trunc i64 %158 to i32
  %162 = mul nsw i32 %161, %127
  %163 = add nsw i32 %160, %162
  %164 = icmp slt i32 %163, %157
  %165 = select i1 %164, i32 %163, i32 %157
  store i32 %165, i32* %124, align 4, !tbaa !7
  %166 = add nuw nsw i64 %149, 2
  %167 = add i64 %150, -2
  %168 = icmp eq i64 %167, 0
  br i1 %168, label %133, label %147, !llvm.loop !15

169:                                              ; preds = %176, %100
  %170 = phi i32 [ %105, %100 ], [ %184, %176 ]
  %171 = icmp eq i32 %170, 1061109567
  br i1 %171, label %172, label %173

172:                                              ; preds = %8, %17, %169
  br label %173

173:                                              ; preds = %169, %172
  %174 = phi i32 [ -1, %172 ], [ %170, %169 ]
  %175 = tail call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 %174)
  ret i32 0

176:                                              ; preds = %107, %176
  %177 = phi i64 [ %185, %176 ], [ %108, %107 ]
  %178 = phi i32 [ %184, %176 ], [ %109, %107 ]
  %179 = getelementptr inbounds [110 x [110 x [110 x i32]]], [110 x [110 x [110 x i32]]]* @dp, i64 0, i64 %19, i64 %21, i64 %177
  %180 = load i32, i32* %179, align 4, !tbaa !7
  %181 = trunc i64 %177 to i32
  %182 = add nsw i32 %180, %181
  %183 = icmp slt i32 %182, %178
  %184 = select i1 %183, i32 %182, i32 %178
  %185 = add nuw nsw i64 %177, 1
  %186 = icmp eq i64 %185, %24
  br i1 %186, label %169, label %176, !llvm.loop !16
}

declare dso_local %struct._IO_FILE* @freopen(i8*, i8*, %struct._IO_FILE*) local_unnamed_addr #0

declare dso_local nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16), i32* nonnull align 4 dereferenceable(4)) local_unnamed_addr #0

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8), i32) local_unnamed_addr #0

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_MinimumEdgesinaLayeredGraph.cpp() #5 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  ret void
}

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i32 @llvm.vector.reduce.smin.v4i32(<4 x i32>) #6

attributes #0 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nofree nounwind }
attributes #3 = { mustprogress norecurse uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #5 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nofree nosync nounwind readnone willreturn }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !8, i64 0}
!8 = !{!"int", !5, i64 0}
!9 = distinct !{!9, !10, !11}
!10 = !{!"llvm.loop.mustprogress"}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !10}
!13 = distinct !{!13, !10}
!14 = distinct !{!14, !10}
!15 = distinct !{!15, !10}
!16 = distinct !{!16, !10, !17, !11}
!17 = !{!"llvm.loop.unroll.runtime.disable"}
