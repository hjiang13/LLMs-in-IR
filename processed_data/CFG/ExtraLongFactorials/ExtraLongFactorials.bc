; ModuleID = '../../Benchmarks/ExtraLongFactorials/ExtraLongFactorials.cpp'
source_filename = "../../Benchmarks/ExtraLongFactorials/ExtraLongFactorials.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [35 x i8] c"../input_files/ExtraLongFactorials\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@stdin = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_ExtraLongFactorials.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable
define dso_local i32 @_Z4multiPii(i32 %0, i32* nocapture %1, i32 %2) local_unnamed_addr #3 {
  %4 = icmp sgt i32 %0, 0
  br i1 %4, label %5, label %34

5:                                                ; preds = %3
  %6 = zext i32 %0 to i64
  br label %12

7:                                                ; preds = %12
  %8 = add i32 %18, 9
  %9 = icmp ult i32 %8, 19
  br i1 %9, label %34, label %10

10:                                               ; preds = %7
  %11 = sext i32 %0 to i64
  br label %23

12:                                               ; preds = %5, %12
  %13 = phi i64 [ 0, %5 ], [ %21, %12 ]
  %14 = phi i32 [ 0, %5 ], [ %20, %12 ]
  %15 = getelementptr inbounds i32, i32* %1, i64 %13
  %16 = load i32, i32* %15, align 4, !tbaa !3
  %17 = mul nsw i32 %16, %2
  %18 = add nsw i32 %17, %14
  %19 = srem i32 %18, 10
  store i32 %19, i32* %15, align 4, !tbaa !3
  %20 = sdiv i32 %18, 10
  %21 = add nuw nsw i64 %13, 1
  %22 = icmp eq i64 %21, %6
  br i1 %22, label %7, label %12, !llvm.loop !7

23:                                               ; preds = %10, %23
  %24 = phi i64 [ %11, %10 ], [ %29, %23 ]
  %25 = phi i32 [ %20, %10 ], [ %28, %23 ]
  %26 = srem i32 %25, 10
  %27 = getelementptr inbounds i32, i32* %1, i64 %24
  store i32 %26, i32* %27, align 4, !tbaa !3
  %28 = sdiv i32 %25, 10
  %29 = add i64 %24, 1
  %30 = add nsw i32 %25, 9
  %31 = icmp ult i32 %30, 19
  br i1 %31, label %32, label %23, !llvm.loop !9

32:                                               ; preds = %23
  %33 = trunc i64 %29 to i32
  br label %34

34:                                               ; preds = %3, %32, %7
  %35 = phi i32 [ %0, %7 ], [ %33, %32 ], [ %0, %3 ]
  ret i32 %35
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: mustprogress nofree nounwind uwtable
define dso_local void @_Z4facti(i32 %0) local_unnamed_addr #5 {
  %2 = alloca [200 x i32], align 16
  %3 = bitcast [200 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 800, i8* nonnull %3) #9
  %4 = getelementptr inbounds [200 x i32], [200 x i32]* %2, i64 0, i64 0
  store i32 1, i32* %4, align 16, !tbaa !3
  %5 = icmp slt i32 %0, 2
  br i1 %5, label %8, label %11

6:                                                ; preds = %44
  %7 = icmp sgt i32 %45, 0
  br i1 %7, label %8, label %58

8:                                                ; preds = %1, %6
  %9 = phi i32 [ %45, %6 ], [ 1, %1 ]
  %10 = zext i32 %9 to i64
  br label %48

11:                                               ; preds = %1, %44
  %12 = phi i32 [ %45, %44 ], [ 1, %1 ]
  %13 = phi i32 [ %46, %44 ], [ 2, %1 ]
  %14 = icmp sgt i32 %12, 0
  br i1 %14, label %15, label %44

15:                                               ; preds = %11
  %16 = zext i32 %12 to i64
  br label %22

17:                                               ; preds = %22
  %18 = add i32 %28, 9
  %19 = icmp ult i32 %18, 19
  br i1 %19, label %44, label %20

20:                                               ; preds = %17
  %21 = sext i32 %12 to i64
  br label %33

22:                                               ; preds = %22, %15
  %23 = phi i64 [ 0, %15 ], [ %31, %22 ]
  %24 = phi i32 [ 0, %15 ], [ %30, %22 ]
  %25 = getelementptr inbounds [200 x i32], [200 x i32]* %2, i64 0, i64 %23
  %26 = load i32, i32* %25, align 4, !tbaa !3
  %27 = mul nsw i32 %26, %13
  %28 = add nsw i32 %27, %24
  %29 = srem i32 %28, 10
  store i32 %29, i32* %25, align 4, !tbaa !3
  %30 = sdiv i32 %28, 10
  %31 = add nuw nsw i64 %23, 1
  %32 = icmp eq i64 %31, %16
  br i1 %32, label %17, label %22, !llvm.loop !7

33:                                               ; preds = %33, %20
  %34 = phi i64 [ %21, %20 ], [ %39, %33 ]
  %35 = phi i32 [ %30, %20 ], [ %38, %33 ]
  %36 = srem i32 %35, 10
  %37 = getelementptr inbounds [200 x i32], [200 x i32]* %2, i64 0, i64 %34
  store i32 %36, i32* %37, align 4, !tbaa !3
  %38 = sdiv i32 %35, 10
  %39 = add i64 %34, 1
  %40 = add nsw i32 %35, 9
  %41 = icmp ult i32 %40, 19
  br i1 %41, label %42, label %33, !llvm.loop !9

42:                                               ; preds = %33
  %43 = trunc i64 %39 to i32
  br label %44

44:                                               ; preds = %11, %17, %42
  %45 = phi i32 [ %12, %17 ], [ %43, %42 ], [ %12, %11 ]
  %46 = add nuw i32 %13, 1
  %47 = icmp eq i32 %13, %0
  br i1 %47, label %6, label %11, !llvm.loop !10

48:                                               ; preds = %8, %48
  %49 = phi i64 [ %10, %8 ], [ %57, %48 ]
  %50 = phi i32 [ %9, %8 ], [ %51, %48 ]
  %51 = add nsw i32 %50, -1
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds [200 x i32], [200 x i32]* %2, i64 0, i64 %52
  %54 = load i32, i32* %53, align 4, !tbaa !3
  %55 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %54)
  %56 = icmp sgt i64 %49, 1
  %57 = add nsw i64 %49, -1
  br i1 %56, label %48, label %58, !llvm.loop !11

58:                                               ; preds = %48, %6
  call void @llvm.lifetime.end.p0i8(i64 800, i8* nonnull %3) #9
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #6

; Function Attrs: mustprogress norecurse uwtable
define dso_local i32 @main() local_unnamed_addr #7 {
  %1 = alloca [200 x i32], align 16
  %2 = alloca i32, align 4
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !12
  %4 = tail call %struct._IO_FILE* @freopen(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), %struct._IO_FILE* %3)
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #9
  %6 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* nonnull %2)
  %7 = load i32, i32* %2, align 4, !tbaa !3
  %8 = bitcast [200 x i32]* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 800, i8* nonnull %8) #9
  %9 = getelementptr inbounds [200 x i32], [200 x i32]* %1, i64 0, i64 0
  store i32 1, i32* %9, align 16, !tbaa !3
  %10 = icmp slt i32 %7, 2
  br i1 %10, label %13, label %16

11:                                               ; preds = %49
  %12 = icmp sgt i32 %50, 0
  br i1 %12, label %13, label %63

13:                                               ; preds = %11, %0
  %14 = phi i32 [ %50, %11 ], [ 1, %0 ]
  %15 = zext i32 %14 to i64
  br label %53

16:                                               ; preds = %0, %49
  %17 = phi i32 [ %50, %49 ], [ 1, %0 ]
  %18 = phi i32 [ %51, %49 ], [ 2, %0 ]
  %19 = icmp sgt i32 %17, 0
  br i1 %19, label %20, label %49

20:                                               ; preds = %16
  %21 = zext i32 %17 to i64
  br label %27

22:                                               ; preds = %27
  %23 = add i32 %33, 9
  %24 = icmp ult i32 %23, 19
  br i1 %24, label %49, label %25

25:                                               ; preds = %22
  %26 = sext i32 %17 to i64
  br label %38

27:                                               ; preds = %27, %20
  %28 = phi i64 [ 0, %20 ], [ %36, %27 ]
  %29 = phi i32 [ 0, %20 ], [ %35, %27 ]
  %30 = getelementptr inbounds [200 x i32], [200 x i32]* %1, i64 0, i64 %28
  %31 = load i32, i32* %30, align 4, !tbaa !3
  %32 = mul nsw i32 %31, %18
  %33 = add nsw i32 %32, %29
  %34 = srem i32 %33, 10
  store i32 %34, i32* %30, align 4, !tbaa !3
  %35 = sdiv i32 %33, 10
  %36 = add nuw nsw i64 %28, 1
  %37 = icmp eq i64 %36, %21
  br i1 %37, label %22, label %27, !llvm.loop !7

38:                                               ; preds = %38, %25
  %39 = phi i64 [ %26, %25 ], [ %44, %38 ]
  %40 = phi i32 [ %35, %25 ], [ %43, %38 ]
  %41 = srem i32 %40, 10
  %42 = getelementptr inbounds [200 x i32], [200 x i32]* %1, i64 0, i64 %39
  store i32 %41, i32* %42, align 4, !tbaa !3
  %43 = sdiv i32 %40, 10
  %44 = add i64 %39, 1
  %45 = add nsw i32 %40, 9
  %46 = icmp ult i32 %45, 19
  br i1 %46, label %47, label %38, !llvm.loop !9

47:                                               ; preds = %38
  %48 = trunc i64 %44 to i32
  br label %49

49:                                               ; preds = %47, %22, %16
  %50 = phi i32 [ %17, %22 ], [ %48, %47 ], [ %17, %16 ]
  %51 = add nuw i32 %18, 1
  %52 = icmp eq i32 %18, %7
  br i1 %52, label %11, label %16, !llvm.loop !10

53:                                               ; preds = %53, %13
  %54 = phi i64 [ %15, %13 ], [ %62, %53 ]
  %55 = phi i32 [ %14, %13 ], [ %56, %53 ]
  %56 = add nsw i32 %55, -1
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds [200 x i32], [200 x i32]* %1, i64 0, i64 %57
  %59 = load i32, i32* %58, align 4, !tbaa !3
  %60 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %59) #9
  %61 = icmp sgt i64 %54, 1
  %62 = add nsw i64 %54, -1
  br i1 %61, label %53, label %63, !llvm.loop !11

63:                                               ; preds = %53, %11
  call void @llvm.lifetime.end.p0i8(i64 800, i8* nonnull %8) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #9
  ret i32 0
}

declare dso_local %struct._IO_FILE* @freopen(i8*, i8*, %struct._IO_FILE*) local_unnamed_addr #0

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @__isoc99_scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #6

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_ExtraLongFactorials.cpp() #8 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #9
  ret void
}

attributes #0 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nofree nounwind }
attributes #3 = { mustprogress nofree norecurse nosync nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #5 = { mustprogress nofree nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { mustprogress norecurse uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"int", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.mustprogress"}
!9 = distinct !{!9, !8}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !8}
!12 = !{!13, !13, i64 0}
!13 = !{!"any pointer", !5, i64 0}
