; ModuleID = '../../Benchmarks/CastleTowers/CastleTowers.cpp'
source_filename = "../../Benchmarks/CastleTowers/CastleTowers.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@.str = private unnamed_addr constant [28 x i8] c"../input_files/CastleTowers\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@stdin = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@_ZSt3cin = external dso_local global %"class.std::basic_istream", align 8
@_ZSt4cout = external dso_local global %"class.std::basic_ostream", align 8
@.str.2 = private unnamed_addr constant [49 x i8] c"cannot create std::vector larger than max_size()\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_CastleTowers.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: mustprogress nofree nosync nounwind readonly uwtable willreturn
define dso_local i32 @_Z12castleTowersiSt6vectorIiSaIiEE(i32 %0, %"class.std::vector"* nocapture readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8, !tbaa !3
  %5 = load i32, i32* %4, align 4, !tbaa !8
  %6 = icmp sgt i32 %0, 1
  br i1 %6, label %7, label %83

7:                                                ; preds = %2
  %8 = zext i32 %0 to i64
  %9 = add nsw i64 %8, -1
  %10 = icmp ult i64 %9, 8
  br i1 %10, label %80, label %11

11:                                               ; preds = %7
  %12 = and i64 %9, -8
  %13 = or i64 %12, 1
  %14 = insertelement <4 x i32> poison, i32 %5, i32 0
  %15 = shufflevector <4 x i32> %14, <4 x i32> poison, <4 x i32> zeroinitializer
  %16 = add nsw i64 %12, -8
  %17 = lshr exact i64 %16, 3
  %18 = add nuw nsw i64 %17, 1
  %19 = and i64 %18, 1
  %20 = icmp eq i64 %16, 0
  br i1 %20, label %55, label %21

21:                                               ; preds = %11
  %22 = and i64 %18, 4611686018427387902
  br label %23

23:                                               ; preds = %23, %21
  %24 = phi i64 [ 0, %21 ], [ %50, %23 ]
  %25 = phi <4 x i32> [ %15, %21 ], [ %48, %23 ]
  %26 = phi <4 x i32> [ %15, %21 ], [ %49, %23 ]
  %27 = phi i64 [ %22, %21 ], [ %51, %23 ]
  %28 = or i64 %24, 1
  %29 = getelementptr inbounds i32, i32* %4, i64 %28
  %30 = bitcast i32* %29 to <4 x i32>*
  %31 = load <4 x i32>, <4 x i32>* %30, align 4, !tbaa !8
  %32 = getelementptr inbounds i32, i32* %29, i64 4
  %33 = bitcast i32* %32 to <4 x i32>*
  %34 = load <4 x i32>, <4 x i32>* %33, align 4, !tbaa !8
  %35 = icmp slt <4 x i32> %25, %31
  %36 = icmp slt <4 x i32> %26, %34
  %37 = select <4 x i1> %35, <4 x i32> %31, <4 x i32> %25
  %38 = select <4 x i1> %36, <4 x i32> %34, <4 x i32> %26
  %39 = or i64 %24, 9
  %40 = getelementptr inbounds i32, i32* %4, i64 %39
  %41 = bitcast i32* %40 to <4 x i32>*
  %42 = load <4 x i32>, <4 x i32>* %41, align 4, !tbaa !8
  %43 = getelementptr inbounds i32, i32* %40, i64 4
  %44 = bitcast i32* %43 to <4 x i32>*
  %45 = load <4 x i32>, <4 x i32>* %44, align 4, !tbaa !8
  %46 = icmp slt <4 x i32> %37, %42
  %47 = icmp slt <4 x i32> %38, %45
  %48 = select <4 x i1> %46, <4 x i32> %42, <4 x i32> %37
  %49 = select <4 x i1> %47, <4 x i32> %45, <4 x i32> %38
  %50 = add nuw i64 %24, 16
  %51 = add i64 %27, -2
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %53, label %23, !llvm.loop !10

53:                                               ; preds = %23
  %54 = or i64 %50, 1
  br label %55

55:                                               ; preds = %53, %11
  %56 = phi <4 x i32> [ undef, %11 ], [ %48, %53 ]
  %57 = phi <4 x i32> [ undef, %11 ], [ %49, %53 ]
  %58 = phi i64 [ 1, %11 ], [ %54, %53 ]
  %59 = phi <4 x i32> [ %15, %11 ], [ %48, %53 ]
  %60 = phi <4 x i32> [ %15, %11 ], [ %49, %53 ]
  %61 = icmp eq i64 %19, 0
  br i1 %61, label %73, label %62

62:                                               ; preds = %55
  %63 = getelementptr inbounds i32, i32* %4, i64 %58
  %64 = bitcast i32* %63 to <4 x i32>*
  %65 = load <4 x i32>, <4 x i32>* %64, align 4, !tbaa !8
  %66 = getelementptr inbounds i32, i32* %63, i64 4
  %67 = bitcast i32* %66 to <4 x i32>*
  %68 = load <4 x i32>, <4 x i32>* %67, align 4, !tbaa !8
  %69 = icmp slt <4 x i32> %60, %68
  %70 = select <4 x i1> %69, <4 x i32> %68, <4 x i32> %60
  %71 = icmp slt <4 x i32> %59, %65
  %72 = select <4 x i1> %71, <4 x i32> %65, <4 x i32> %59
  br label %73

73:                                               ; preds = %55, %62
  %74 = phi <4 x i32> [ %56, %55 ], [ %72, %62 ]
  %75 = phi <4 x i32> [ %57, %55 ], [ %70, %62 ]
  %76 = icmp sgt <4 x i32> %74, %75
  %77 = select <4 x i1> %76, <4 x i32> %74, <4 x i32> %75
  %78 = call i32 @llvm.vector.reduce.smax.v4i32(<4 x i32> %77)
  %79 = icmp eq i64 %9, %12
  br i1 %79, label %83, label %80

80:                                               ; preds = %7, %73
  %81 = phi i64 [ 1, %7 ], [ %13, %73 ]
  %82 = phi i32 [ %5, %7 ], [ %78, %73 ]
  br label %174

83:                                               ; preds = %174, %73, %2
  %84 = phi i32 [ %5, %2 ], [ %78, %73 ], [ %180, %174 ]
  %85 = icmp sgt i32 %0, 0
  br i1 %85, label %86, label %183

86:                                               ; preds = %83
  %87 = zext i32 %0 to i64
  %88 = icmp eq i32 %5, %84
  %89 = zext i1 %88 to i32
  %90 = icmp eq i32 %0, 1
  br i1 %90, label %183, label %91, !llvm.loop !13

91:                                               ; preds = %86
  %92 = add nsw i64 %87, -1
  %93 = icmp ult i64 %92, 8
  br i1 %93, label %171, label %94

94:                                               ; preds = %91
  %95 = and i64 %92, -8
  %96 = or i64 %95, 1
  %97 = insertelement <4 x i32> <i32 poison, i32 0, i32 0, i32 0>, i32 %89, i32 0
  %98 = insertelement <4 x i32> poison, i32 %84, i32 0
  %99 = shufflevector <4 x i32> %98, <4 x i32> poison, <4 x i32> zeroinitializer
  %100 = insertelement <4 x i32> poison, i32 %84, i32 0
  %101 = shufflevector <4 x i32> %100, <4 x i32> poison, <4 x i32> zeroinitializer
  %102 = add nsw i64 %95, -8
  %103 = lshr exact i64 %102, 3
  %104 = add nuw nsw i64 %103, 1
  %105 = and i64 %104, 1
  %106 = icmp eq i64 %102, 0
  br i1 %106, label %145, label %107

107:                                              ; preds = %94
  %108 = and i64 %104, 4611686018427387902
  br label %109

109:                                              ; preds = %109, %107
  %110 = phi i64 [ 0, %107 ], [ %140, %109 ]
  %111 = phi <4 x i32> [ %97, %107 ], [ %138, %109 ]
  %112 = phi <4 x i32> [ zeroinitializer, %107 ], [ %139, %109 ]
  %113 = phi i64 [ %108, %107 ], [ %141, %109 ]
  %114 = or i64 %110, 1
  %115 = getelementptr inbounds i32, i32* %4, i64 %114
  %116 = bitcast i32* %115 to <4 x i32>*
  %117 = load <4 x i32>, <4 x i32>* %116, align 4, !tbaa !8
  %118 = getelementptr inbounds i32, i32* %115, i64 4
  %119 = bitcast i32* %118 to <4 x i32>*
  %120 = load <4 x i32>, <4 x i32>* %119, align 4, !tbaa !8
  %121 = icmp eq <4 x i32> %117, %99
  %122 = icmp eq <4 x i32> %120, %101
  %123 = zext <4 x i1> %121 to <4 x i32>
  %124 = zext <4 x i1> %122 to <4 x i32>
  %125 = add <4 x i32> %111, %123
  %126 = add <4 x i32> %112, %124
  %127 = or i64 %110, 9
  %128 = getelementptr inbounds i32, i32* %4, i64 %127
  %129 = bitcast i32* %128 to <4 x i32>*
  %130 = load <4 x i32>, <4 x i32>* %129, align 4, !tbaa !8
  %131 = getelementptr inbounds i32, i32* %128, i64 4
  %132 = bitcast i32* %131 to <4 x i32>*
  %133 = load <4 x i32>, <4 x i32>* %132, align 4, !tbaa !8
  %134 = icmp eq <4 x i32> %130, %99
  %135 = icmp eq <4 x i32> %133, %101
  %136 = zext <4 x i1> %134 to <4 x i32>
  %137 = zext <4 x i1> %135 to <4 x i32>
  %138 = add <4 x i32> %125, %136
  %139 = add <4 x i32> %126, %137
  %140 = add nuw i64 %110, 16
  %141 = add i64 %113, -2
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %143, label %109, !llvm.loop !14

143:                                              ; preds = %109
  %144 = or i64 %140, 1
  br label %145

145:                                              ; preds = %143, %94
  %146 = phi <4 x i32> [ undef, %94 ], [ %138, %143 ]
  %147 = phi <4 x i32> [ undef, %94 ], [ %139, %143 ]
  %148 = phi i64 [ 1, %94 ], [ %144, %143 ]
  %149 = phi <4 x i32> [ %97, %94 ], [ %138, %143 ]
  %150 = phi <4 x i32> [ zeroinitializer, %94 ], [ %139, %143 ]
  %151 = icmp eq i64 %105, 0
  br i1 %151, label %165, label %152

152:                                              ; preds = %145
  %153 = getelementptr inbounds i32, i32* %4, i64 %148
  %154 = getelementptr inbounds i32, i32* %153, i64 4
  %155 = bitcast i32* %154 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 4, !tbaa !8
  %157 = icmp eq <4 x i32> %156, %101
  %158 = zext <4 x i1> %157 to <4 x i32>
  %159 = add <4 x i32> %150, %158
  %160 = bitcast i32* %153 to <4 x i32>*
  %161 = load <4 x i32>, <4 x i32>* %160, align 4, !tbaa !8
  %162 = icmp eq <4 x i32> %161, %99
  %163 = zext <4 x i1> %162 to <4 x i32>
  %164 = add <4 x i32> %149, %163
  br label %165

165:                                              ; preds = %145, %152
  %166 = phi <4 x i32> [ %146, %145 ], [ %164, %152 ]
  %167 = phi <4 x i32> [ %147, %145 ], [ %159, %152 ]
  %168 = add <4 x i32> %167, %166
  %169 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %168)
  %170 = icmp eq i64 %92, %95
  br i1 %170, label %183, label %171

171:                                              ; preds = %91, %165
  %172 = phi i64 [ 1, %91 ], [ %96, %165 ]
  %173 = phi i32 [ %89, %91 ], [ %169, %165 ]
  br label %185

174:                                              ; preds = %80, %174
  %175 = phi i64 [ %181, %174 ], [ %81, %80 ]
  %176 = phi i32 [ %180, %174 ], [ %82, %80 ]
  %177 = getelementptr inbounds i32, i32* %4, i64 %175
  %178 = load i32, i32* %177, align 4, !tbaa !8
  %179 = icmp slt i32 %176, %178
  %180 = select i1 %179, i32 %178, i32 %176
  %181 = add nuw nsw i64 %175, 1
  %182 = icmp eq i64 %181, %8
  br i1 %182, label %83, label %174, !llvm.loop !15

183:                                              ; preds = %185, %86, %165, %83
  %184 = phi i32 [ 0, %83 ], [ %89, %86 ], [ %169, %165 ], [ %192, %185 ]
  ret i32 %184

185:                                              ; preds = %171, %185
  %186 = phi i64 [ %193, %185 ], [ %172, %171 ]
  %187 = phi i32 [ %192, %185 ], [ %173, %171 ]
  %188 = getelementptr inbounds i32, i32* %4, i64 %186
  %189 = load i32, i32* %188, align 4, !tbaa !8
  %190 = icmp eq i32 %189, %84
  %191 = zext i1 %190 to i32
  %192 = add nuw nsw i32 %187, %191
  %193 = add nuw nsw i64 %186, 1
  %194 = icmp eq i64 %193, %87
  br i1 %194, label %183, label %185, !llvm.loop !17
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: norecurse uwtable
define dso_local i32 @main() local_unnamed_addr #5 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = alloca i32, align 4
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !18
  %3 = tail call %struct._IO_FILE* @freopen(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), %struct._IO_FILE* %2)
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #13
  %5 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* nonnull align 4 dereferenceable(4) %1)
  %6 = load i32, i32* %1, align 4, !tbaa !8
  %7 = sext i32 %6 to i64
  %8 = icmp slt i32 %6, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %0
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.2, i64 0, i64 0)) #14
  unreachable

10:                                               ; preds = %0
  %11 = icmp eq i32 %6, 0
  br i1 %11, label %20, label %12

12:                                               ; preds = %10
  %13 = shl nuw nsw i64 %7, 2
  %14 = call noalias nonnull i8* @_Znwm(i64 %13) #15
  %15 = bitcast i8* %14 to i32*
  %16 = getelementptr i32, i32* %15, i64 %7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %14, i8 0, i64 %13, i1 false)
  %17 = ptrtoint i32* %16 to i64
  %18 = load i32, i32* %1, align 4, !tbaa !8
  %19 = icmp sgt i32 %18, 0
  br i1 %19, label %37, label %20

20:                                               ; preds = %41, %10, %12
  %21 = phi i64 [ %17, %12 ], [ 0, %10 ], [ %17, %41 ]
  %22 = phi i32* [ %15, %12 ], [ null, %10 ], [ %15, %41 ]
  %23 = phi i32 [ %18, %12 ], [ 0, %10 ], [ %43, %41 ]
  %24 = ptrtoint i32* %22 to i64
  %25 = sub i64 %21, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %48, label %27

27:                                               ; preds = %20
  %28 = ashr exact i64 %25, 2
  %29 = icmp ugt i64 %28, 2305843009213693951
  br i1 %29, label %30, label %32

30:                                               ; preds = %27
  invoke void @_ZSt17__throw_bad_allocv() #14
          to label %31 unwind label %279

31:                                               ; preds = %30
  unreachable

32:                                               ; preds = %27
  %33 = invoke noalias nonnull i8* @_Znwm(i64 %25) #15
          to label %34 unwind label %279

34:                                               ; preds = %32
  %35 = bitcast i8* %33 to i32*
  %36 = bitcast i32* %22 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %33, i8* align 4 %36, i64 %25, i1 false) #13
  br label %48

37:                                               ; preds = %12, %41
  %38 = phi i64 [ %42, %41 ], [ 0, %12 ]
  %39 = getelementptr inbounds i32, i32* %15, i64 %38
  %40 = invoke nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* nonnull align 4 dereferenceable(4) %39)
          to label %41 unwind label %46

41:                                               ; preds = %37
  %42 = add nuw nsw i64 %38, 1
  %43 = load i32, i32* %1, align 4, !tbaa !8
  %44 = sext i32 %43 to i64
  %45 = icmp slt i64 %42, %44
  br i1 %45, label %37, label %20, !llvm.loop !19

46:                                               ; preds = %37
  %47 = landingpad { i8*, i32 }
          cleanup
  br label %282

48:                                               ; preds = %20, %34
  %49 = phi i32* [ %35, %34 ], [ null, %20 ]
  %50 = load i32, i32* %49, align 4, !tbaa !8
  %51 = icmp sgt i32 %23, 1
  br i1 %51, label %52, label %127

52:                                               ; preds = %48
  %53 = zext i32 %23 to i64
  %54 = add nsw i64 %53, -1
  %55 = icmp ult i64 %54, 8
  br i1 %55, label %124, label %56

56:                                               ; preds = %52
  %57 = and i64 %54, -8
  %58 = or i64 %57, 1
  %59 = insertelement <4 x i32> poison, i32 %50, i32 0
  %60 = shufflevector <4 x i32> %59, <4 x i32> poison, <4 x i32> zeroinitializer
  %61 = add nsw i64 %57, -8
  %62 = lshr exact i64 %61, 3
  %63 = add nuw nsw i64 %62, 1
  %64 = and i64 %63, 1
  %65 = icmp eq i64 %61, 0
  br i1 %65, label %98, label %66

66:                                               ; preds = %56
  %67 = and i64 %63, 4611686018427387902
  br label %68

68:                                               ; preds = %68, %66
  %69 = phi i64 [ 0, %66 ], [ %95, %68 ]
  %70 = phi <4 x i32> [ %60, %66 ], [ %93, %68 ]
  %71 = phi <4 x i32> [ %60, %66 ], [ %94, %68 ]
  %72 = phi i64 [ %67, %66 ], [ %96, %68 ]
  %73 = or i64 %69, 1
  %74 = getelementptr inbounds i32, i32* %49, i64 %73
  %75 = bitcast i32* %74 to <4 x i32>*
  %76 = load <4 x i32>, <4 x i32>* %75, align 4, !tbaa !8
  %77 = getelementptr inbounds i32, i32* %74, i64 4
  %78 = bitcast i32* %77 to <4 x i32>*
  %79 = load <4 x i32>, <4 x i32>* %78, align 4, !tbaa !8
  %80 = icmp slt <4 x i32> %70, %76
  %81 = icmp slt <4 x i32> %71, %79
  %82 = select <4 x i1> %80, <4 x i32> %76, <4 x i32> %70
  %83 = select <4 x i1> %81, <4 x i32> %79, <4 x i32> %71
  %84 = or i64 %69, 9
  %85 = getelementptr inbounds i32, i32* %49, i64 %84
  %86 = bitcast i32* %85 to <4 x i32>*
  %87 = load <4 x i32>, <4 x i32>* %86, align 4, !tbaa !8
  %88 = getelementptr inbounds i32, i32* %85, i64 4
  %89 = bitcast i32* %88 to <4 x i32>*
  %90 = load <4 x i32>, <4 x i32>* %89, align 4, !tbaa !8
  %91 = icmp slt <4 x i32> %82, %87
  %92 = icmp slt <4 x i32> %83, %90
  %93 = select <4 x i1> %91, <4 x i32> %87, <4 x i32> %82
  %94 = select <4 x i1> %92, <4 x i32> %90, <4 x i32> %83
  %95 = add nuw i64 %69, 16
  %96 = add i64 %72, -2
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %98, label %68, !llvm.loop !20

98:                                               ; preds = %68, %56
  %99 = phi <4 x i32> [ undef, %56 ], [ %93, %68 ]
  %100 = phi <4 x i32> [ undef, %56 ], [ %94, %68 ]
  %101 = phi i64 [ 0, %56 ], [ %95, %68 ]
  %102 = phi <4 x i32> [ %60, %56 ], [ %93, %68 ]
  %103 = phi <4 x i32> [ %60, %56 ], [ %94, %68 ]
  %104 = icmp eq i64 %64, 0
  br i1 %104, label %117, label %105

105:                                              ; preds = %98
  %106 = or i64 %101, 1
  %107 = getelementptr inbounds i32, i32* %49, i64 %106
  %108 = bitcast i32* %107 to <4 x i32>*
  %109 = load <4 x i32>, <4 x i32>* %108, align 4, !tbaa !8
  %110 = getelementptr inbounds i32, i32* %107, i64 4
  %111 = bitcast i32* %110 to <4 x i32>*
  %112 = load <4 x i32>, <4 x i32>* %111, align 4, !tbaa !8
  %113 = icmp slt <4 x i32> %103, %112
  %114 = select <4 x i1> %113, <4 x i32> %112, <4 x i32> %103
  %115 = icmp slt <4 x i32> %102, %109
  %116 = select <4 x i1> %115, <4 x i32> %109, <4 x i32> %102
  br label %117

117:                                              ; preds = %98, %105
  %118 = phi <4 x i32> [ %99, %98 ], [ %116, %105 ]
  %119 = phi <4 x i32> [ %100, %98 ], [ %114, %105 ]
  %120 = icmp sgt <4 x i32> %118, %119
  %121 = select <4 x i1> %120, <4 x i32> %118, <4 x i32> %119
  %122 = call i32 @llvm.vector.reduce.smax.v4i32(<4 x i32> %121)
  %123 = icmp eq i64 %54, %57
  br i1 %123, label %127, label %124

124:                                              ; preds = %52, %117
  %125 = phi i64 [ 1, %52 ], [ %58, %117 ]
  %126 = phi i32 [ %50, %52 ], [ %122, %117 ]
  br label %218

127:                                              ; preds = %218, %117, %48
  %128 = phi i32 [ %50, %48 ], [ %122, %117 ], [ %224, %218 ]
  %129 = icmp sgt i32 %23, 0
  br i1 %129, label %130, label %237

130:                                              ; preds = %127
  %131 = zext i32 %23 to i64
  %132 = icmp eq i32 %50, %128
  %133 = zext i1 %132 to i32
  %134 = icmp eq i32 %23, 1
  br i1 %134, label %237, label %135, !llvm.loop !13

135:                                              ; preds = %130
  %136 = add nsw i64 %131, -1
  %137 = icmp ult i64 %136, 8
  br i1 %137, label %215, label %138

138:                                              ; preds = %135
  %139 = and i64 %136, -8
  %140 = or i64 %139, 1
  %141 = insertelement <4 x i32> <i32 poison, i32 0, i32 0, i32 0>, i32 %133, i32 0
  %142 = insertelement <4 x i32> poison, i32 %128, i32 0
  %143 = shufflevector <4 x i32> %142, <4 x i32> poison, <4 x i32> zeroinitializer
  %144 = insertelement <4 x i32> poison, i32 %128, i32 0
  %145 = shufflevector <4 x i32> %144, <4 x i32> poison, <4 x i32> zeroinitializer
  %146 = add nsw i64 %139, -8
  %147 = lshr exact i64 %146, 3
  %148 = add nuw nsw i64 %147, 1
  %149 = and i64 %148, 1
  %150 = icmp eq i64 %146, 0
  br i1 %150, label %189, label %151

151:                                              ; preds = %138
  %152 = and i64 %148, 4611686018427387902
  br label %153

153:                                              ; preds = %153, %151
  %154 = phi i64 [ 0, %151 ], [ %184, %153 ]
  %155 = phi <4 x i32> [ %141, %151 ], [ %182, %153 ]
  %156 = phi <4 x i32> [ zeroinitializer, %151 ], [ %183, %153 ]
  %157 = phi i64 [ %152, %151 ], [ %185, %153 ]
  %158 = or i64 %154, 1
  %159 = getelementptr inbounds i32, i32* %49, i64 %158
  %160 = bitcast i32* %159 to <4 x i32>*
  %161 = load <4 x i32>, <4 x i32>* %160, align 4, !tbaa !8
  %162 = getelementptr inbounds i32, i32* %159, i64 4
  %163 = bitcast i32* %162 to <4 x i32>*
  %164 = load <4 x i32>, <4 x i32>* %163, align 4, !tbaa !8
  %165 = icmp eq <4 x i32> %161, %143
  %166 = icmp eq <4 x i32> %164, %145
  %167 = zext <4 x i1> %165 to <4 x i32>
  %168 = zext <4 x i1> %166 to <4 x i32>
  %169 = add <4 x i32> %155, %167
  %170 = add <4 x i32> %156, %168
  %171 = or i64 %154, 9
  %172 = getelementptr inbounds i32, i32* %49, i64 %171
  %173 = bitcast i32* %172 to <4 x i32>*
  %174 = load <4 x i32>, <4 x i32>* %173, align 4, !tbaa !8
  %175 = getelementptr inbounds i32, i32* %172, i64 4
  %176 = bitcast i32* %175 to <4 x i32>*
  %177 = load <4 x i32>, <4 x i32>* %176, align 4, !tbaa !8
  %178 = icmp eq <4 x i32> %174, %143
  %179 = icmp eq <4 x i32> %177, %145
  %180 = zext <4 x i1> %178 to <4 x i32>
  %181 = zext <4 x i1> %179 to <4 x i32>
  %182 = add <4 x i32> %169, %180
  %183 = add <4 x i32> %170, %181
  %184 = add nuw i64 %154, 16
  %185 = add i64 %157, -2
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %187, label %153, !llvm.loop !21

187:                                              ; preds = %153
  %188 = or i64 %184, 1
  br label %189

189:                                              ; preds = %187, %138
  %190 = phi <4 x i32> [ undef, %138 ], [ %182, %187 ]
  %191 = phi <4 x i32> [ undef, %138 ], [ %183, %187 ]
  %192 = phi i64 [ 1, %138 ], [ %188, %187 ]
  %193 = phi <4 x i32> [ %141, %138 ], [ %182, %187 ]
  %194 = phi <4 x i32> [ zeroinitializer, %138 ], [ %183, %187 ]
  %195 = icmp eq i64 %149, 0
  br i1 %195, label %209, label %196

196:                                              ; preds = %189
  %197 = getelementptr inbounds i32, i32* %49, i64 %192
  %198 = getelementptr inbounds i32, i32* %197, i64 4
  %199 = bitcast i32* %198 to <4 x i32>*
  %200 = load <4 x i32>, <4 x i32>* %199, align 4, !tbaa !8
  %201 = icmp eq <4 x i32> %200, %145
  %202 = zext <4 x i1> %201 to <4 x i32>
  %203 = add <4 x i32> %194, %202
  %204 = bitcast i32* %197 to <4 x i32>*
  %205 = load <4 x i32>, <4 x i32>* %204, align 4, !tbaa !8
  %206 = icmp eq <4 x i32> %205, %143
  %207 = zext <4 x i1> %206 to <4 x i32>
  %208 = add <4 x i32> %193, %207
  br label %209

209:                                              ; preds = %189, %196
  %210 = phi <4 x i32> [ %190, %189 ], [ %208, %196 ]
  %211 = phi <4 x i32> [ %191, %189 ], [ %203, %196 ]
  %212 = add <4 x i32> %211, %210
  %213 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %212)
  %214 = icmp eq i64 %136, %139
  br i1 %214, label %237, label %215

215:                                              ; preds = %135, %209
  %216 = phi i64 [ 1, %135 ], [ %140, %209 ]
  %217 = phi i32 [ %133, %135 ], [ %213, %209 ]
  br label %227

218:                                              ; preds = %124, %218
  %219 = phi i64 [ %225, %218 ], [ %125, %124 ]
  %220 = phi i32 [ %224, %218 ], [ %126, %124 ]
  %221 = getelementptr inbounds i32, i32* %49, i64 %219
  %222 = load i32, i32* %221, align 4, !tbaa !8
  %223 = icmp slt i32 %220, %222
  %224 = select i1 %223, i32 %222, i32 %220
  %225 = add nuw nsw i64 %219, 1
  %226 = icmp eq i64 %225, %53
  br i1 %226, label %127, label %218, !llvm.loop !22

227:                                              ; preds = %215, %227
  %228 = phi i64 [ %235, %227 ], [ %216, %215 ]
  %229 = phi i32 [ %234, %227 ], [ %217, %215 ]
  %230 = getelementptr inbounds i32, i32* %49, i64 %228
  %231 = load i32, i32* %230, align 4, !tbaa !8
  %232 = icmp eq i32 %231, %128
  %233 = zext i1 %232 to i32
  %234 = add nuw nsw i32 %229, %233
  %235 = add nuw nsw i64 %228, 1
  %236 = icmp eq i64 %235, %131
  br i1 %236, label %237, label %227, !llvm.loop !23

237:                                              ; preds = %227, %209, %130, %127
  %238 = phi i32 [ 0, %127 ], [ %133, %130 ], [ %213, %209 ], [ %234, %227 ]
  %239 = bitcast i32* %49 to i8*
  call void @_ZdlPv(i8* nonnull %239) #13
  %240 = invoke nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 %238)
          to label %241 unwind label %279

241:                                              ; preds = %237
  %242 = bitcast %"class.std::basic_ostream"* %240 to i8**
  %243 = load i8*, i8** %242, align 8, !tbaa !24
  %244 = getelementptr i8, i8* %243, i64 -24
  %245 = bitcast i8* %244 to i64*
  %246 = load i64, i64* %245, align 8
  %247 = bitcast %"class.std::basic_ostream"* %240 to i8*
  %248 = add nsw i64 %246, 240
  %249 = getelementptr inbounds i8, i8* %247, i64 %248
  %250 = bitcast i8* %249 to %"class.std::ctype"**
  %251 = load %"class.std::ctype"*, %"class.std::ctype"** %250, align 8, !tbaa !26
  %252 = icmp eq %"class.std::ctype"* %251, null
  br i1 %252, label %253, label %255

253:                                              ; preds = %241
  invoke void @_ZSt16__throw_bad_castv() #14
          to label %254 unwind label %279

254:                                              ; preds = %253
  unreachable

255:                                              ; preds = %241
  %256 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %251, i64 0, i32 8
  %257 = load i8, i8* %256, align 8, !tbaa !29
  %258 = icmp eq i8 %257, 0
  br i1 %258, label %262, label %259

259:                                              ; preds = %255
  %260 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %251, i64 0, i32 9, i64 10
  %261 = load i8, i8* %260, align 1, !tbaa !31
  br label %269

262:                                              ; preds = %255
  invoke void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull align 8 dereferenceable(570) %251)
          to label %263 unwind label %279

263:                                              ; preds = %262
  %264 = bitcast %"class.std::ctype"* %251 to i8 (%"class.std::ctype"*, i8)***
  %265 = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %264, align 8, !tbaa !24
  %266 = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %265, i64 6
  %267 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %266, align 8
  %268 = invoke signext i8 %267(%"class.std::ctype"* nonnull align 8 dereferenceable(570) %251, i8 signext 10)
          to label %269 unwind label %279

269:                                              ; preds = %263, %259
  %270 = phi i8 [ %261, %259 ], [ %268, %263 ]
  %271 = invoke nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %240, i8 signext %270)
          to label %272 unwind label %279

272:                                              ; preds = %269
  %273 = invoke nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %271)
          to label %274 unwind label %279

274:                                              ; preds = %272
  %275 = icmp eq i32* %22, null
  br i1 %275, label %278, label %276

276:                                              ; preds = %274
  %277 = bitcast i32* %22 to i8*
  call void @_ZdlPv(i8* nonnull %277) #13
  br label %278

278:                                              ; preds = %274, %276
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #13
  ret i32 0

279:                                              ; preds = %237, %30, %32, %253, %262, %263, %269, %272
  %280 = landingpad { i8*, i32 }
          cleanup
  %281 = icmp eq i32* %22, null
  br i1 %281, label %286, label %282

282:                                              ; preds = %46, %279
  %283 = phi { i8*, i32 } [ %47, %46 ], [ %280, %279 ]
  %284 = phi i32* [ %15, %46 ], [ %22, %279 ]
  %285 = bitcast i32* %284 to i8*
  call void @_ZdlPv(i8* nonnull %285) #13
  br label %286

286:                                              ; preds = %282, %279
  %287 = phi { i8*, i32 } [ %283, %282 ], [ %280, %279 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #13
  resume { i8*, i32 } %287
}

declare dso_local %struct._IO_FILE* @freopen(i8*, i8*, %struct._IO_FILE*) local_unnamed_addr #0

declare dso_local nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16), i32* nonnull align 4 dereferenceable(4)) local_unnamed_addr #0

declare dso_local i32 @__gxx_personality_v0(...)

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8), i32) local_unnamed_addr #0

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #6

; Function Attrs: noreturn
declare dso_local void @_ZSt17__throw_bad_allocv() local_unnamed_addr #6

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #8

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8), i8 signext) local_unnamed_addr #0

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8)) local_unnamed_addr #0

; Function Attrs: noreturn
declare dso_local void @_ZSt16__throw_bad_castv() local_unnamed_addr #6

declare dso_local void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull align 8 dereferenceable(570)) local_unnamed_addr #0

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_CastleTowers.cpp() #9 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #13
  ret void
}

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #10

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #11

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i32 @llvm.vector.reduce.smax.v4i32(<4 x i32>) #12

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #12

attributes #0 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nofree nounwind }
attributes #3 = { mustprogress nofree nosync nounwind readonly uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #5 = { norecurse uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #10 = { argmemonly nofree nounwind willreturn writeonly }
attributes #11 = { argmemonly nofree nounwind willreturn }
attributes #12 = { nofree nosync nounwind readnone willreturn }
attributes #13 = { nounwind }
attributes #14 = { noreturn }
attributes #15 = { allocsize(0) }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 0}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!9, !9, i64 0}
!9 = !{!"int", !6, i64 0}
!10 = distinct !{!10, !11, !12}
!11 = !{!"llvm.loop.mustprogress"}
!12 = !{!"llvm.loop.isvectorized", i32 1}
!13 = distinct !{!13, !11}
!14 = distinct !{!14, !11, !12}
!15 = distinct !{!15, !11, !16, !12}
!16 = !{!"llvm.loop.unroll.runtime.disable"}
!17 = distinct !{!17, !11, !16, !12}
!18 = !{!5, !5, i64 0}
!19 = distinct !{!19, !11}
!20 = distinct !{!20, !11, !12}
!21 = distinct !{!21, !11, !12}
!22 = distinct !{!22, !11, !16, !12}
!23 = distinct !{!23, !11, !16, !12}
!24 = !{!25, !25, i64 0}
!25 = !{!"vtable pointer", !7, i64 0}
!26 = !{!27, !5, i64 240}
!27 = !{!"_ZTSSt9basic_iosIcSt11char_traitsIcEE", !5, i64 216, !6, i64 224, !28, i64 225, !5, i64 232, !5, i64 240, !5, i64 248, !5, i64 256}
!28 = !{!"bool", !6, i64 0}
!29 = !{!30, !6, i64 56}
!30 = !{!"_ZTSSt5ctypeIcE", !5, i64 16, !28, i64 24, !5, i64 32, !5, i64 40, !5, i64 48, !6, i64 56, !6, i64 57, !6, i64 313, !6, i64 569}
!31 = !{!6, !6, i64 0}
