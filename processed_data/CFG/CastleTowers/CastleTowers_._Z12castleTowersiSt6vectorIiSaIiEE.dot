digraph "CFG for '_Z12castleTowersiSt6vectorIiSaIiEE' function" {
	label="CFG for '_Z12castleTowersiSt6vectorIiSaIiEE' function";

	Node0x55a5934d6260 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%2:\l  %3 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1,\l... i64 0, i32 0, i32 0, i32 0, i32 0\l  %4 = load i32*, i32** %3, align 8, !tbaa !3\l  %5 = load i32, i32* %4, align 4, !tbaa !8\l  %6 = icmp sgt i32 %0, 1\l  br i1 %6, label %7, label %83\l|{<s0>T|<s1>F}}"];
	Node0x55a5934d6260:s0 -> Node0x55a5934d70e0;
	Node0x55a5934d6260:s1 -> Node0x55a5934d7170;
	Node0x55a5934d70e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%7:\l7:                                                \l  %8 = zext i32 %0 to i64\l  %9 = add nsw i64 %8, -1\l  %10 = icmp ult i64 %9, 8\l  br i1 %10, label %80, label %11\l|{<s0>T|<s1>F}}"];
	Node0x55a5934d70e0:s0 -> Node0x55a5934d6e90;
	Node0x55a5934d70e0:s1 -> Node0x55a5934d7530;
	Node0x55a5934d7530 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%11:\l11:                                               \l  %12 = and i64 %9, -8\l  %13 = or i64 %12, 1\l  %14 = insertelement \<4 x i32\> poison, i32 %5, i32 0\l  %15 = shufflevector \<4 x i32\> %14, \<4 x i32\> poison, \<4 x i32\>\l... zeroinitializer\l  %16 = add nsw i64 %12, -8\l  %17 = lshr exact i64 %16, 3\l  %18 = add nuw nsw i64 %17, 1\l  %19 = and i64 %18, 1\l  %20 = icmp eq i64 %16, 0\l  br i1 %20, label %55, label %21\l|{<s0>T|<s1>F}}"];
	Node0x55a5934d7530:s0 -> Node0x55a5934d8620;
	Node0x55a5934d7530:s1 -> Node0x55a5934d8670;
	Node0x55a5934d8670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%21:\l21:                                               \l  %22 = and i64 %18, 4611686018427387902\l  br label %23\l}"];
	Node0x55a5934d8670 -> Node0x55a5934d8890;
	Node0x55a5934d8890 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%23:\l23:                                               \l  %24 = phi i64 [ 0, %21 ], [ %50, %23 ]\l  %25 = phi \<4 x i32\> [ %15, %21 ], [ %48, %23 ]\l  %26 = phi \<4 x i32\> [ %15, %21 ], [ %49, %23 ]\l  %27 = phi i64 [ %22, %21 ], [ %51, %23 ]\l  %28 = or i64 %24, 1\l  %29 = getelementptr inbounds i32, i32* %4, i64 %28\l  %30 = bitcast i32* %29 to \<4 x i32\>*\l  %31 = load \<4 x i32\>, \<4 x i32\>* %30, align 4, !tbaa !8\l  %32 = getelementptr inbounds i32, i32* %29, i64 4\l  %33 = bitcast i32* %32 to \<4 x i32\>*\l  %34 = load \<4 x i32\>, \<4 x i32\>* %33, align 4, !tbaa !8\l  %35 = icmp slt \<4 x i32\> %25, %31\l  %36 = icmp slt \<4 x i32\> %26, %34\l  %37 = select \<4 x i1\> %35, \<4 x i32\> %31, \<4 x i32\> %25\l  %38 = select \<4 x i1\> %36, \<4 x i32\> %34, \<4 x i32\> %26\l  %39 = or i64 %24, 9\l  %40 = getelementptr inbounds i32, i32* %4, i64 %39\l  %41 = bitcast i32* %40 to \<4 x i32\>*\l  %42 = load \<4 x i32\>, \<4 x i32\>* %41, align 4, !tbaa !8\l  %43 = getelementptr inbounds i32, i32* %40, i64 4\l  %44 = bitcast i32* %43 to \<4 x i32\>*\l  %45 = load \<4 x i32\>, \<4 x i32\>* %44, align 4, !tbaa !8\l  %46 = icmp slt \<4 x i32\> %37, %42\l  %47 = icmp slt \<4 x i32\> %38, %45\l  %48 = select \<4 x i1\> %46, \<4 x i32\> %42, \<4 x i32\> %37\l  %49 = select \<4 x i1\> %47, \<4 x i32\> %45, \<4 x i32\> %38\l  %50 = add nuw i64 %24, 16\l  %51 = add i64 %27, -2\l  %52 = icmp eq i64 %51, 0\l  br i1 %52, label %53, label %23, !llvm.loop !10\l|{<s0>T|<s1>F}}"];
	Node0x55a5934d8890:s0 -> Node0x55a5934da3e0;
	Node0x55a5934d8890:s1 -> Node0x55a5934d8890;
	Node0x55a5934da3e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%53:\l53:                                               \l  %54 = or i64 %50, 1\l  br label %55\l}"];
	Node0x55a5934da3e0 -> Node0x55a5934d8620;
	Node0x55a5934d8620 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%55:\l55:                                               \l  %56 = phi \<4 x i32\> [ undef, %11 ], [ %48, %53 ]\l  %57 = phi \<4 x i32\> [ undef, %11 ], [ %49, %53 ]\l  %58 = phi i64 [ 1, %11 ], [ %54, %53 ]\l  %59 = phi \<4 x i32\> [ %15, %11 ], [ %48, %53 ]\l  %60 = phi \<4 x i32\> [ %15, %11 ], [ %49, %53 ]\l  %61 = icmp eq i64 %19, 0\l  br i1 %61, label %73, label %62\l|{<s0>T|<s1>F}}"];
	Node0x55a5934d8620:s0 -> Node0x55a5934dae90;
	Node0x55a5934d8620:s1 -> Node0x55a5934daee0;
	Node0x55a5934daee0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%62:\l62:                                               \l  %63 = getelementptr inbounds i32, i32* %4, i64 %58\l  %64 = bitcast i32* %63 to \<4 x i32\>*\l  %65 = load \<4 x i32\>, \<4 x i32\>* %64, align 4, !tbaa !8\l  %66 = getelementptr inbounds i32, i32* %63, i64 4\l  %67 = bitcast i32* %66 to \<4 x i32\>*\l  %68 = load \<4 x i32\>, \<4 x i32\>* %67, align 4, !tbaa !8\l  %69 = icmp slt \<4 x i32\> %60, %68\l  %70 = select \<4 x i1\> %69, \<4 x i32\> %68, \<4 x i32\> %60\l  %71 = icmp slt \<4 x i32\> %59, %65\l  %72 = select \<4 x i1\> %71, \<4 x i32\> %65, \<4 x i32\> %59\l  br label %73\l}"];
	Node0x55a5934daee0 -> Node0x55a5934dae90;
	Node0x55a5934dae90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%73:\l73:                                               \l  %74 = phi \<4 x i32\> [ %56, %55 ], [ %72, %62 ]\l  %75 = phi \<4 x i32\> [ %57, %55 ], [ %70, %62 ]\l  %76 = icmp sgt \<4 x i32\> %74, %75\l  %77 = select \<4 x i1\> %76, \<4 x i32\> %74, \<4 x i32\> %75\l  %78 = call i32 @llvm.vector.reduce.smax.v4i32(\<4 x i32\> %77)\l  %79 = icmp eq i64 %9, %12\l  br i1 %79, label %83, label %80\l|{<s0>T|<s1>F}}"];
	Node0x55a5934dae90:s0 -> Node0x55a5934d7170;
	Node0x55a5934dae90:s1 -> Node0x55a5934d6e90;
	Node0x55a5934d6e90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%80:\l80:                                               \l  %81 = phi i64 [ 1, %7 ], [ %13, %73 ]\l  %82 = phi i32 [ %5, %7 ], [ %78, %73 ]\l  br label %174\l}"];
	Node0x55a5934d6e90 -> Node0x55a5934dc150;
	Node0x55a5934d7170 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%83:\l83:                                               \l  %84 = phi i32 [ %5, %2 ], [ %78, %73 ], [ %180, %174 ]\l  %85 = icmp sgt i32 %0, 0\l  br i1 %85, label %86, label %183\l|{<s0>T|<s1>F}}"];
	Node0x55a5934d7170:s0 -> Node0x55a5934dc370;
	Node0x55a5934d7170:s1 -> Node0x55a5934dc3c0;
	Node0x55a5934dc370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%86:\l86:                                               \l  %87 = zext i32 %0 to i64\l  %88 = icmp eq i32 %5, %84\l  %89 = zext i1 %88 to i32\l  %90 = icmp eq i32 %0, 1\l  br i1 %90, label %183, label %91, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x55a5934dc370:s0 -> Node0x55a5934dc3c0;
	Node0x55a5934dc370:s1 -> Node0x55a5934dc6c0;
	Node0x55a5934dc6c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%91:\l91:                                               \l  %92 = add nsw i64 %87, -1\l  %93 = icmp ult i64 %92, 8\l  br i1 %93, label %171, label %94\l|{<s0>T|<s1>F}}"];
	Node0x55a5934dc6c0:s0 -> Node0x55a5934dc9a0;
	Node0x55a5934dc6c0:s1 -> Node0x55a5934dc9f0;
	Node0x55a5934dc9f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%94:\l94:                                               \l  %95 = and i64 %92, -8\l  %96 = or i64 %95, 1\l  %97 = insertelement \<4 x i32\> \<i32 poison, i32 0, i32 0, i32 0\>, i32 %89,\l... i32 0\l  %98 = insertelement \<4 x i32\> poison, i32 %84, i32 0\l  %99 = shufflevector \<4 x i32\> %98, \<4 x i32\> poison, \<4 x i32\>\l... zeroinitializer\l  %100 = insertelement \<4 x i32\> poison, i32 %84, i32 0\l  %101 = shufflevector \<4 x i32\> %100, \<4 x i32\> poison, \<4 x i32\>\l... zeroinitializer\l  %102 = add nsw i64 %95, -8\l  %103 = lshr exact i64 %102, 3\l  %104 = add nuw nsw i64 %103, 1\l  %105 = and i64 %104, 1\l  %106 = icmp eq i64 %102, 0\l  br i1 %106, label %145, label %107\l|{<s0>T|<s1>F}}"];
	Node0x55a5934dc9f0:s0 -> Node0x55a5934dd350;
	Node0x55a5934dc9f0:s1 -> Node0x55a5934dd3a0;
	Node0x55a5934dd3a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%107:\l107:                                              \l  %108 = and i64 %104, 4611686018427387902\l  br label %109\l}"];
	Node0x55a5934dd3a0 -> Node0x55a5934dd590;
	Node0x55a5934dd590 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ed836670",label="{%109:\l109:                                              \l  %110 = phi i64 [ 0, %107 ], [ %140, %109 ]\l  %111 = phi \<4 x i32\> [ %97, %107 ], [ %138, %109 ]\l  %112 = phi \<4 x i32\> [ zeroinitializer, %107 ], [ %139, %109 ]\l  %113 = phi i64 [ %108, %107 ], [ %141, %109 ]\l  %114 = or i64 %110, 1\l  %115 = getelementptr inbounds i32, i32* %4, i64 %114\l  %116 = bitcast i32* %115 to \<4 x i32\>*\l  %117 = load \<4 x i32\>, \<4 x i32\>* %116, align 4, !tbaa !8\l  %118 = getelementptr inbounds i32, i32* %115, i64 4\l  %119 = bitcast i32* %118 to \<4 x i32\>*\l  %120 = load \<4 x i32\>, \<4 x i32\>* %119, align 4, !tbaa !8\l  %121 = icmp eq \<4 x i32\> %117, %99\l  %122 = icmp eq \<4 x i32\> %120, %101\l  %123 = zext \<4 x i1\> %121 to \<4 x i32\>\l  %124 = zext \<4 x i1\> %122 to \<4 x i32\>\l  %125 = add \<4 x i32\> %111, %123\l  %126 = add \<4 x i32\> %112, %124\l  %127 = or i64 %110, 9\l  %128 = getelementptr inbounds i32, i32* %4, i64 %127\l  %129 = bitcast i32* %128 to \<4 x i32\>*\l  %130 = load \<4 x i32\>, \<4 x i32\>* %129, align 4, !tbaa !8\l  %131 = getelementptr inbounds i32, i32* %128, i64 4\l  %132 = bitcast i32* %131 to \<4 x i32\>*\l  %133 = load \<4 x i32\>, \<4 x i32\>* %132, align 4, !tbaa !8\l  %134 = icmp eq \<4 x i32\> %130, %99\l  %135 = icmp eq \<4 x i32\> %133, %101\l  %136 = zext \<4 x i1\> %134 to \<4 x i32\>\l  %137 = zext \<4 x i1\> %135 to \<4 x i32\>\l  %138 = add \<4 x i32\> %125, %136\l  %139 = add \<4 x i32\> %126, %137\l  %140 = add nuw i64 %110, 16\l  %141 = add i64 %113, -2\l  %142 = icmp eq i64 %141, 0\l  br i1 %142, label %143, label %109, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x55a5934dd590:s0 -> Node0x55a5934df1b0;
	Node0x55a5934dd590:s1 -> Node0x55a5934dd590;
	Node0x55a5934df1b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a7c5fe70",label="{%143:\l143:                                              \l  %144 = or i64 %140, 1\l  br label %145\l}"];
	Node0x55a5934df1b0 -> Node0x55a5934dd350;
	Node0x55a5934dd350 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%145:\l145:                                              \l  %146 = phi \<4 x i32\> [ undef, %94 ], [ %138, %143 ]\l  %147 = phi \<4 x i32\> [ undef, %94 ], [ %139, %143 ]\l  %148 = phi i64 [ 1, %94 ], [ %144, %143 ]\l  %149 = phi \<4 x i32\> [ %97, %94 ], [ %138, %143 ]\l  %150 = phi \<4 x i32\> [ zeroinitializer, %94 ], [ %139, %143 ]\l  %151 = icmp eq i64 %105, 0\l  br i1 %151, label %165, label %152\l|{<s0>T|<s1>F}}"];
	Node0x55a5934dd350:s0 -> Node0x55a5934df830;
	Node0x55a5934dd350:s1 -> Node0x55a5934df880;
	Node0x55a5934df880 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9ebeff70",label="{%152:\l152:                                              \l  %153 = getelementptr inbounds i32, i32* %4, i64 %148\l  %154 = getelementptr inbounds i32, i32* %153, i64 4\l  %155 = bitcast i32* %154 to \<4 x i32\>*\l  %156 = load \<4 x i32\>, \<4 x i32\>* %155, align 4, !tbaa !8\l  %157 = icmp eq \<4 x i32\> %156, %101\l  %158 = zext \<4 x i1\> %157 to \<4 x i32\>\l  %159 = add \<4 x i32\> %150, %158\l  %160 = bitcast i32* %153 to \<4 x i32\>*\l  %161 = load \<4 x i32\>, \<4 x i32\>* %160, align 4, !tbaa !8\l  %162 = icmp eq \<4 x i32\> %161, %99\l  %163 = zext \<4 x i1\> %162 to \<4 x i32\>\l  %164 = add \<4 x i32\> %149, %163\l  br label %165\l}"];
	Node0x55a5934df880 -> Node0x55a5934df830;
	Node0x55a5934df830 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#bfd3f670",label="{%165:\l165:                                              \l  %166 = phi \<4 x i32\> [ %146, %145 ], [ %164, %152 ]\l  %167 = phi \<4 x i32\> [ %147, %145 ], [ %159, %152 ]\l  %168 = add \<4 x i32\> %167, %166\l  %169 = call i32 @llvm.vector.reduce.add.v4i32(\<4 x i32\> %168)\l  %170 = icmp eq i64 %92, %95\l  br i1 %170, label %183, label %171\l|{<s0>T|<s1>F}}"];
	Node0x55a5934df830:s0 -> Node0x55a5934dc3c0;
	Node0x55a5934df830:s1 -> Node0x55a5934dc9a0;
	Node0x55a5934dc9a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%171:\l171:                                              \l  %172 = phi i64 [ 1, %91 ], [ %96, %165 ]\l  %173 = phi i32 [ %89, %91 ], [ %169, %165 ]\l  br label %185\l}"];
	Node0x55a5934dc9a0 -> Node0x55a5934e06a0;
	Node0x55a5934dc150 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%174:\l174:                                              \l  %175 = phi i64 [ %181, %174 ], [ %81, %80 ]\l  %176 = phi i32 [ %180, %174 ], [ %82, %80 ]\l  %177 = getelementptr inbounds i32, i32* %4, i64 %175\l  %178 = load i32, i32* %177, align 4, !tbaa !8\l  %179 = icmp slt i32 %176, %178\l  %180 = select i1 %179, i32 %178, i32 %176\l  %181 = add nuw nsw i64 %175, 1\l  %182 = icmp eq i64 %181, %8\l  br i1 %182, label %83, label %174, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x55a5934dc150:s0 -> Node0x55a5934d7170;
	Node0x55a5934dc150:s1 -> Node0x55a5934dc150;
	Node0x55a5934dc3c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%183:\l183:                                              \l  %184 = phi i32 [ 0, %83 ], [ %89, %86 ], [ %169, %165 ], [ %192, %185 ]\l  ret i32 %184\l}"];
	Node0x55a5934e06a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d0473d70",label="{%185:\l185:                                              \l  %186 = phi i64 [ %193, %185 ], [ %172, %171 ]\l  %187 = phi i32 [ %192, %185 ], [ %173, %171 ]\l  %188 = getelementptr inbounds i32, i32* %4, i64 %186\l  %189 = load i32, i32* %188, align 4, !tbaa !8\l  %190 = icmp eq i32 %189, %84\l  %191 = zext i1 %190 to i32\l  %192 = add nuw nsw i32 %187, %191\l  %193 = add nuw nsw i64 %186, 1\l  %194 = icmp eq i64 %193, %87\l  br i1 %194, label %183, label %185, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x55a5934e06a0:s0 -> Node0x55a5934dc3c0;
	Node0x55a5934e06a0:s1 -> Node0x55a5934e06a0;
}
