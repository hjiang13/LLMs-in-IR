; ModuleID = '../../Benchmarks/RationalSums/RationalSums.cpp'
source_filename = "../../Benchmarks/RationalSums/RationalSums.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@n = dso_local global i32 0, align 4
@a = dso_local global [5005 x i64] zeroinitializer, align 16
@b = dso_local global [5005 x i64] zeroinitializer, align 16
@c = dso_local local_unnamed_addr global [5005 x i64] zeroinitializer, align 16
@harm = dso_local local_unnamed_addr global [5005 x i64] zeroinitializer, align 16
@.str = private unnamed_addr constant [28 x i8] c"../input_files/RationalSums\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@stdin = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@_ZSt3cin = external dso_local global %"class.std::basic_istream", align 8
@_ZSt4cout = external dso_local global %"class.std::basic_ostream", align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_RationalSums.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: nofree nosync nounwind readnone uwtable
define dso_local { i64, i64 } @_Z4egcdxx(i64 %0, i64 %1) local_unnamed_addr #3 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %21, label %4

4:                                                ; preds = %2
  %5 = icmp eq i64 %1, 0
  br i1 %5, label %21, label %6

6:                                                ; preds = %4, %6
  %7 = phi i64 [ %10, %6 ], [ %0, %4 ]
  %8 = phi i64 [ %15, %6 ], [ 0, %4 ]
  %9 = phi i64 [ %17, %6 ], [ 1, %4 ]
  %10 = phi i64 [ %19, %6 ], [ %1, %4 ]
  %11 = phi i64 [ %9, %6 ], [ 0, %4 ]
  %12 = phi i64 [ %8, %6 ], [ 1, %4 ]
  %13 = sdiv i64 %7, %10
  %14 = mul nsw i64 %13, %8
  %15 = sub nsw i64 %12, %14
  %16 = mul nsw i64 %13, %9
  %17 = sub nsw i64 %11, %16
  %18 = mul nsw i64 %13, %10
  %19 = srem i64 %7, %10
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %6, !llvm.loop !3

21:                                               ; preds = %6, %4, %2
  %22 = phi i64 [ 0, %2 ], [ 1, %4 ], [ %8, %6 ]
  %23 = phi i64 [ 1, %2 ], [ 0, %4 ], [ %9, %6 ]
  %24 = insertvalue { i64, i64 } undef, i64 %22, 0
  %25 = insertvalue { i64, i64 } %24, i64 %23, 1
  ret { i64, i64 } %25
}

; Function Attrs: nofree norecurse nosync nounwind readnone uwtable
define dso_local i64 @_Z7mod_invxx(i64 %0, i64 %1) local_unnamed_addr #4 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %17, label %4

4:                                                ; preds = %2
  %5 = icmp eq i64 %1, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %4, %6
  %7 = phi i64 [ %9, %6 ], [ %0, %4 ]
  %8 = phi i64 [ %13, %6 ], [ 0, %4 ]
  %9 = phi i64 [ %15, %6 ], [ %1, %4 ]
  %10 = phi i64 [ %8, %6 ], [ 1, %4 ]
  %11 = sdiv i64 %7, %9
  %12 = mul nsw i64 %11, %8
  %13 = sub nsw i64 %10, %12
  %14 = mul nsw i64 %11, %9
  %15 = srem i64 %7, %9
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %17, label %6, !llvm.loop !3

17:                                               ; preds = %6, %2, %4
  %18 = phi i64 [ 0, %2 ], [ 1, %4 ], [ %8, %6 ]
  %19 = srem i64 %18, %1
  %20 = add nsw i64 %19, %1
  %21 = srem i64 %20, %1
  ret i64 %21
}

; Function Attrs: nofree norecurse nosync nounwind readnone uwtable
define dso_local i64 @_Z3gcdxx(i64 %0, i64 %1) local_unnamed_addr #4 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %21, label %4

4:                                                ; preds = %2
  %5 = icmp eq i64 %1, 0
  br i1 %5, label %21, label %6

6:                                                ; preds = %4, %6
  %7 = phi i64 [ %10, %6 ], [ %0, %4 ]
  %8 = phi i64 [ %15, %6 ], [ 0, %4 ]
  %9 = phi i64 [ %17, %6 ], [ 1, %4 ]
  %10 = phi i64 [ %19, %6 ], [ %1, %4 ]
  %11 = phi i64 [ %9, %6 ], [ 0, %4 ]
  %12 = phi i64 [ %8, %6 ], [ 1, %4 ]
  %13 = sdiv i64 %7, %10
  %14 = mul nsw i64 %13, %8
  %15 = sub nsw i64 %12, %14
  %16 = mul nsw i64 %13, %9
  %17 = sub nsw i64 %11, %16
  %18 = mul nsw i64 %13, %10
  %19 = srem i64 %7, %10
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %6, !llvm.loop !3

21:                                               ; preds = %6, %2, %4
  %22 = phi i64 [ 0, %2 ], [ 1, %4 ], [ %8, %6 ]
  %23 = phi i64 [ 1, %2 ], [ 0, %4 ], [ %9, %6 ]
  %24 = mul nsw i64 %22, %0
  %25 = mul nsw i64 %23, %1
  %26 = add nsw i64 %25, %24
  ret i64 %26
}

; Function Attrs: norecurse uwtable
define dso_local i32 @main() local_unnamed_addr #5 {
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !5
  %2 = tail call %struct._IO_FILE* @freopen(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), %struct._IO_FILE* %1)
  %3 = tail call zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext false)
  %4 = load i8*, i8** bitcast (%"class.std::basic_istream"* @_ZSt3cin to i8**), align 8, !tbaa !9
  %5 = getelementptr i8, i8* %4, i64 -24
  %6 = bitcast i8* %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = add nsw i64 %7, 216
  %9 = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_istream"* @_ZSt3cin to i8*), i64 %8
  %10 = bitcast i8* %9 to %"class.std::basic_ostream"**
  store %"class.std::basic_ostream"* null, %"class.std::basic_ostream"** %10, align 8, !tbaa !11
  %11 = tail call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* nonnull align 4 dereferenceable(4) @n)
  %12 = load i32, i32* @n, align 4, !tbaa !14
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %16, label %149

14:                                               ; preds = %16
  %15 = icmp sgt i32 %21, 1
  br i1 %15, label %37, label %24

16:                                               ; preds = %0, %16
  %17 = phi i64 [ %20, %16 ], [ 0, %0 ]
  %18 = getelementptr inbounds [5005 x i64], [5005 x i64]* @a, i64 0, i64 %17
  %19 = tail call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSi10_M_extractIxEERSiRT_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i64* nonnull align 8 dereferenceable(8) %18)
  %20 = add nuw nsw i64 %17, 1
  %21 = load i32, i32* @n, align 4, !tbaa !14
  %22 = sext i32 %21 to i64
  %23 = icmp slt i64 %20, %22
  br i1 %23, label %16, label %14, !llvm.loop !16

24:                                               ; preds = %37, %14
  %25 = phi i32 [ %21, %14 ], [ %42, %37 ]
  %26 = icmp sgt i32 %25, 1
  %27 = icmp sgt i32 %25, 0
  br i1 %27, label %28, label %149

28:                                               ; preds = %24
  %29 = add nsw i32 %25, -2
  %30 = zext i32 %29 to i64
  %31 = zext i32 %25 to i64
  %32 = add nuw nsw i64 %30, 1
  %33 = and i64 %32, 1
  %34 = icmp eq i32 %29, 0
  %35 = and i64 %32, 8589934590
  %36 = icmp eq i64 %33, 0
  br label %53

37:                                               ; preds = %14, %37
  %38 = phi i64 [ %41, %37 ], [ 0, %14 ]
  %39 = getelementptr inbounds [5005 x i64], [5005 x i64]* @b, i64 0, i64 %38
  %40 = tail call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSi10_M_extractIxEERSiRT_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i64* nonnull align 8 dereferenceable(8) %39)
  %41 = add nuw nsw i64 %38, 1
  %42 = load i32, i32* @n, align 4, !tbaa !14
  %43 = add nsw i32 %42, -1
  %44 = sext i32 %43 to i64
  %45 = icmp slt i64 %41, %44
  br i1 %45, label %37, label %24, !llvm.loop !17

46:                                               ; preds = %118
  br i1 %27, label %47, label %149

47:                                               ; preds = %46
  %48 = add nsw i64 %31, -1
  %49 = and i64 %31, 3
  %50 = icmp ult i64 %48, 3
  br i1 %50, label %150, label %51

51:                                               ; preds = %47
  %52 = and i64 %31, 4294967292
  br label %169

53:                                               ; preds = %28, %118
  %54 = phi i64 [ 0, %28 ], [ %128, %118 ]
  br i1 %26, label %55, label %76

55:                                               ; preds = %53
  %56 = getelementptr inbounds [5005 x i64], [5005 x i64]* @a, i64 0, i64 %54
  %57 = load i64, i64* %56, align 8, !tbaa !18
  br i1 %34, label %60, label %79

58:                                               ; preds = %79
  %59 = zext i32 %100 to i64
  br label %60

60:                                               ; preds = %58, %55
  %61 = phi i32 [ undef, %55 ], [ %100, %58 ]
  %62 = phi i64 [ %30, %55 ], [ %102, %58 ]
  %63 = phi i64 [ 0, %55 ], [ %59, %58 ]
  br i1 %36, label %73, label %64

64:                                               ; preds = %60
  %65 = getelementptr inbounds [5005 x i64], [5005 x i64]* @b, i64 0, i64 %62
  %66 = load i64, i64* %65, align 8, !tbaa !18
  %67 = mul i64 %57, %63
  %68 = sub i64 %66, %67
  %69 = srem i64 %68, 1000000007
  %70 = trunc i64 %69 to i32
  %71 = add nsw i32 %70, 1000000007
  %72 = urem i32 %71, 1000000007
  br label %73

73:                                               ; preds = %60, %64
  %74 = phi i32 [ %61, %60 ], [ %72, %64 ]
  %75 = zext i32 %74 to i64
  br label %76

76:                                               ; preds = %73, %53
  %77 = phi i64 [ 0, %53 ], [ %75, %73 ]
  %78 = getelementptr inbounds [5005 x i64], [5005 x i64]* @a, i64 0, i64 %54
  br label %130

79:                                               ; preds = %55, %79
  %80 = phi i64 [ %102, %79 ], [ %30, %55 ]
  %81 = phi i64 [ %101, %79 ], [ 0, %55 ]
  %82 = phi i64 [ %103, %79 ], [ %35, %55 ]
  %83 = mul i64 %57, %81
  %84 = getelementptr inbounds [5005 x i64], [5005 x i64]* @b, i64 0, i64 %80
  %85 = load i64, i64* %84, align 8, !tbaa !18
  %86 = sub i64 %85, %83
  %87 = srem i64 %86, 1000000007
  %88 = trunc i64 %87 to i32
  %89 = add nsw i32 %88, 1000000007
  %90 = urem i32 %89, 1000000007
  %91 = zext i32 %90 to i64
  %92 = add nsw i64 %80, -1
  %93 = mul i64 %57, %91
  %94 = getelementptr inbounds [5005 x i64], [5005 x i64]* @b, i64 0, i64 %92
  %95 = load i64, i64* %94, align 8, !tbaa !18
  %96 = sub i64 %95, %93
  %97 = srem i64 %96, 1000000007
  %98 = trunc i64 %97 to i32
  %99 = add nsw i32 %98, 1000000007
  %100 = urem i32 %99, 1000000007
  %101 = zext i32 %100 to i64
  %102 = add nsw i64 %80, -2
  %103 = add i64 %82, -2
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %58, label %79, !llvm.loop !20

105:                                              ; preds = %145
  %106 = icmp eq i64 %146, 0
  br i1 %106, label %118, label %107

107:                                              ; preds = %105, %107
  %108 = phi i64 [ %110, %107 ], [ %146, %105 ]
  %109 = phi i64 [ %114, %107 ], [ 0, %105 ]
  %110 = phi i64 [ %116, %107 ], [ 1000000007, %105 ]
  %111 = phi i64 [ %109, %107 ], [ 1, %105 ]
  %112 = sdiv i64 %108, %110
  %113 = mul nsw i64 %112, %109
  %114 = sub nsw i64 %111, %113
  %115 = mul nsw i64 %112, %110
  %116 = srem i64 %108, %110
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %118, label %107, !llvm.loop !3

118:                                              ; preds = %107, %105
  %119 = phi i64 [ 0, %105 ], [ %109, %107 ]
  %120 = srem i64 %119, 1000000007
  %121 = trunc i64 %120 to i32
  %122 = add nsw i32 %121, 1000000007
  %123 = urem i32 %122, 1000000007
  %124 = zext i32 %123 to i64
  %125 = mul nuw nsw i64 %77, %124
  %126 = urem i64 %125, 1000000007
  %127 = getelementptr inbounds [5005 x i64], [5005 x i64]* @c, i64 0, i64 %54
  store i64 %126, i64* %127, align 8, !tbaa !18
  %128 = add nuw nsw i64 %54, 1
  %129 = icmp eq i64 %128, %31
  br i1 %129, label %46, label %53, !llvm.loop !21

130:                                              ; preds = %76, %145
  %131 = phi i64 [ 0, %76 ], [ %147, %145 ]
  %132 = phi i64 [ 1, %76 ], [ %146, %145 ]
  %133 = icmp eq i64 %131, %54
  br i1 %133, label %145, label %134

134:                                              ; preds = %130
  %135 = getelementptr inbounds [5005 x i64], [5005 x i64]* @a, i64 0, i64 %131
  %136 = load i64, i64* %135, align 8, !tbaa !18
  %137 = load i64, i64* %78, align 8, !tbaa !18
  %138 = sub nsw i64 %136, %137
  %139 = mul nsw i64 %138, %132
  %140 = srem i64 %139, 1000000007
  %141 = trunc i64 %140 to i32
  %142 = add nsw i32 %141, 1000000007
  %143 = urem i32 %142, 1000000007
  %144 = zext i32 %143 to i64
  br label %145

145:                                              ; preds = %130, %134
  %146 = phi i64 [ %132, %130 ], [ %144, %134 ]
  %147 = add nuw nsw i64 %131, 1
  %148 = icmp eq i64 %147, %31
  br i1 %148, label %105, label %130, !llvm.loop !22

149:                                              ; preds = %24, %0, %46
  store i64 0, i64* getelementptr inbounds ([5005 x i64], [5005 x i64]* @harm, i64 0, i64 0), align 16, !tbaa !18
  br label %226

150:                                              ; preds = %169, %47
  %151 = phi i64 [ undef, %47 ], [ %191, %169 ]
  %152 = phi i64 [ 0, %47 ], [ %192, %169 ]
  %153 = phi i64 [ 0, %47 ], [ %191, %169 ]
  %154 = icmp eq i64 %49, 0
  br i1 %154, label %166, label %155

155:                                              ; preds = %150, %155
  %156 = phi i64 [ %163, %155 ], [ %152, %150 ]
  %157 = phi i64 [ %162, %155 ], [ %153, %150 ]
  %158 = phi i64 [ %164, %155 ], [ %49, %150 ]
  %159 = getelementptr inbounds [5005 x i64], [5005 x i64]* @a, i64 0, i64 %156
  %160 = load i64, i64* %159, align 8, !tbaa !18
  %161 = icmp slt i64 %160, %157
  %162 = select i1 %161, i64 %157, i64 %160
  %163 = add nuw nsw i64 %156, 1
  %164 = add i64 %158, -1
  %165 = icmp eq i64 %164, 0
  br i1 %165, label %166, label %155, !llvm.loop !23

166:                                              ; preds = %155, %150
  %167 = phi i64 [ %151, %150 ], [ %162, %155 ]
  store i64 0, i64* getelementptr inbounds ([5005 x i64], [5005 x i64]* @harm, i64 0, i64 0), align 16, !tbaa !18
  %168 = icmp slt i64 %167, 1
  br i1 %168, label %195, label %199

169:                                              ; preds = %169, %51
  %170 = phi i64 [ 0, %51 ], [ %192, %169 ]
  %171 = phi i64 [ 0, %51 ], [ %191, %169 ]
  %172 = phi i64 [ %52, %51 ], [ %193, %169 ]
  %173 = getelementptr inbounds [5005 x i64], [5005 x i64]* @a, i64 0, i64 %170
  %174 = load i64, i64* %173, align 16, !tbaa !18
  %175 = icmp slt i64 %174, %171
  %176 = select i1 %175, i64 %171, i64 %174
  %177 = or i64 %170, 1
  %178 = getelementptr inbounds [5005 x i64], [5005 x i64]* @a, i64 0, i64 %177
  %179 = load i64, i64* %178, align 8, !tbaa !18
  %180 = icmp slt i64 %179, %176
  %181 = select i1 %180, i64 %176, i64 %179
  %182 = or i64 %170, 2
  %183 = getelementptr inbounds [5005 x i64], [5005 x i64]* @a, i64 0, i64 %182
  %184 = load i64, i64* %183, align 16, !tbaa !18
  %185 = icmp slt i64 %184, %181
  %186 = select i1 %185, i64 %181, i64 %184
  %187 = or i64 %170, 3
  %188 = getelementptr inbounds [5005 x i64], [5005 x i64]* @a, i64 0, i64 %187
  %189 = load i64, i64* %188, align 8, !tbaa !18
  %190 = icmp slt i64 %189, %186
  %191 = select i1 %190, i64 %186, i64 %189
  %192 = add nuw nsw i64 %170, 4
  %193 = add i64 %172, -4
  %194 = icmp eq i64 %193, 0
  br i1 %194, label %150, label %169, !llvm.loop !25

195:                                              ; preds = %213, %166
  %196 = getelementptr inbounds [5005 x i64], [5005 x i64]* @harm, i64 0, i64 %167
  %197 = load i64, i64* %196, align 8, !tbaa !18
  %198 = zext i32 %25 to i64
  br label %258

199:                                              ; preds = %166, %213
  %200 = phi i64 [ %221, %213 ], [ 0, %166 ]
  %201 = phi i64 [ %222, %213 ], [ 1, %166 ]
  br label %202

202:                                              ; preds = %202, %199
  %203 = phi i64 [ %205, %202 ], [ %201, %199 ]
  %204 = phi i64 [ %209, %202 ], [ 0, %199 ]
  %205 = phi i64 [ %211, %202 ], [ 1000000007, %199 ]
  %206 = phi i64 [ %204, %202 ], [ 1, %199 ]
  %207 = sdiv i64 %203, %205
  %208 = mul nsw i64 %207, %204
  %209 = sub nsw i64 %206, %208
  %210 = mul nsw i64 %207, %205
  %211 = srem i64 %203, %205
  %212 = icmp eq i64 %211, 0
  br i1 %212, label %213, label %202, !llvm.loop !3

213:                                              ; preds = %202
  %214 = srem i64 %204, 1000000007
  %215 = trunc i64 %214 to i32
  %216 = add nsw i32 %215, 1000000007
  %217 = urem i32 %216, 1000000007
  %218 = zext i32 %217 to i64
  %219 = add nsw i64 %200, %218
  %220 = getelementptr inbounds [5005 x i64], [5005 x i64]* @harm, i64 0, i64 %201
  %221 = srem i64 %219, 1000000007
  store i64 %221, i64* %220, align 8, !tbaa !18
  %222 = add nuw nsw i64 %201, 1
  %223 = icmp eq i64 %201, %167
  br i1 %223, label %195, label %199, !llvm.loop !26

224:                                              ; preds = %258
  %225 = zext i32 %273 to i64
  br label %226

226:                                              ; preds = %224, %149
  %227 = phi i64 [ 0, %149 ], [ %225, %224 ]
  %228 = tail call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo9_M_insertIxEERSoT_(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i64 %227)
  %229 = bitcast %"class.std::basic_ostream"* %228 to i8**
  %230 = load i8*, i8** %229, align 8, !tbaa !9
  %231 = getelementptr i8, i8* %230, i64 -24
  %232 = bitcast i8* %231 to i64*
  %233 = load i64, i64* %232, align 8
  %234 = bitcast %"class.std::basic_ostream"* %228 to i8*
  %235 = add nsw i64 %233, 240
  %236 = getelementptr inbounds i8, i8* %234, i64 %235
  %237 = bitcast i8* %236 to %"class.std::ctype"**
  %238 = load %"class.std::ctype"*, %"class.std::ctype"** %237, align 8, !tbaa !27
  %239 = icmp eq %"class.std::ctype"* %238, null
  br i1 %239, label %240, label %241

240:                                              ; preds = %226
  tail call void @_ZSt16__throw_bad_castv() #8
  unreachable

241:                                              ; preds = %226
  %242 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %238, i64 0, i32 8
  %243 = load i8, i8* %242, align 8, !tbaa !28
  %244 = icmp eq i8 %243, 0
  br i1 %244, label %248, label %245

245:                                              ; preds = %241
  %246 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %238, i64 0, i32 9, i64 10
  %247 = load i8, i8* %246, align 1, !tbaa !30
  br label %254

248:                                              ; preds = %241
  tail call void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull align 8 dereferenceable(570) %238)
  %249 = bitcast %"class.std::ctype"* %238 to i8 (%"class.std::ctype"*, i8)***
  %250 = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %249, align 8, !tbaa !9
  %251 = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %250, i64 6
  %252 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %251, align 8
  %253 = tail call signext i8 %252(%"class.std::ctype"* nonnull align 8 dereferenceable(570) %238, i8 signext 10)
  br label %254

254:                                              ; preds = %245, %248
  %255 = phi i8 [ %247, %245 ], [ %253, %248 ]
  %256 = tail call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %228, i8 signext %255)
  %257 = tail call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %256)
  ret i32 0

258:                                              ; preds = %195, %258
  %259 = phi i64 [ 0, %195 ], [ %275, %258 ]
  %260 = phi i64 [ 0, %195 ], [ %274, %258 ]
  %261 = getelementptr inbounds [5005 x i64], [5005 x i64]* @c, i64 0, i64 %259
  %262 = load i64, i64* %261, align 8, !tbaa !18
  %263 = getelementptr inbounds [5005 x i64], [5005 x i64]* @a, i64 0, i64 %259
  %264 = load i64, i64* %263, align 8, !tbaa !18
  %265 = getelementptr inbounds [5005 x i64], [5005 x i64]* @harm, i64 0, i64 %264
  %266 = load i64, i64* %265, align 8, !tbaa !18
  %267 = sub i64 %197, %266
  %268 = mul i64 %267, %262
  %269 = add nsw i64 %268, %260
  %270 = srem i64 %269, 1000000007
  %271 = trunc i64 %270 to i32
  %272 = add nsw i32 %271, 1000000007
  %273 = urem i32 %272, 1000000007
  %274 = zext i32 %273 to i64
  %275 = add nuw nsw i64 %259, 1
  %276 = icmp eq i64 %275, %198
  br i1 %276, label %224, label %258, !llvm.loop !31
}

declare dso_local %struct._IO_FILE* @freopen(i8*, i8*, %struct._IO_FILE*) local_unnamed_addr #0

declare dso_local zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext) local_unnamed_addr #0

declare dso_local nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16), i32* nonnull align 4 dereferenceable(4)) local_unnamed_addr #0

declare dso_local nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSi10_M_extractIxEERSiRT_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16), i64* nonnull align 8 dereferenceable(8)) local_unnamed_addr #0

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo9_M_insertIxEERSoT_(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #0

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8), i8 signext) local_unnamed_addr #0

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8)) local_unnamed_addr #0

; Function Attrs: noreturn
declare dso_local void @_ZSt16__throw_bad_castv() local_unnamed_addr #6

declare dso_local void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull align 8 dereferenceable(570)) local_unnamed_addr #0

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_RationalSums.cpp() #7 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #9
  ret void
}

attributes #0 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nofree nounwind }
attributes #3 = { nofree nosync nounwind readnone uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nofree norecurse nosync nounwind readnone uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { norecurse uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { noreturn }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.mustprogress"}
!5 = !{!6, !6, i64 0}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C++ TBAA"}
!9 = !{!10, !10, i64 0}
!10 = !{!"vtable pointer", !8, i64 0}
!11 = !{!12, !6, i64 216}
!12 = !{!"_ZTSSt9basic_iosIcSt11char_traitsIcEE", !6, i64 216, !7, i64 224, !13, i64 225, !6, i64 232, !6, i64 240, !6, i64 248, !6, i64 256}
!13 = !{!"bool", !7, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"int", !7, i64 0}
!16 = distinct !{!16, !4}
!17 = distinct !{!17, !4}
!18 = !{!19, !19, i64 0}
!19 = !{!"long long", !7, i64 0}
!20 = distinct !{!20, !4}
!21 = distinct !{!21, !4}
!22 = distinct !{!22, !4}
!23 = distinct !{!23, !24}
!24 = !{!"llvm.loop.unroll.disable"}
!25 = distinct !{!25, !4}
!26 = distinct !{!26, !4}
!27 = !{!12, !6, i64 240}
!28 = !{!29, !7, i64 56}
!29 = !{!"_ZTSSt5ctypeIcE", !6, i64 16, !13, i64 24, !6, i64 32, !6, i64 40, !6, i64 48, !7, i64 56, !7, i64 57, !7, i64 313, !7, i64 569}
!30 = !{!7, !7, i64 0}
!31 = distinct !{!31, !4}
