; ModuleID = '../../Benchmarks/LonelyInteger/LonelyInteger.cpp'
source_filename = "../../Benchmarks/LonelyInteger/LonelyInteger.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@.str = private unnamed_addr constant [29 x i8] c"../input_files/LonelyInteger\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@stdin = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@_ZSt3cin = external dso_local global %"class.std::basic_istream", align 8
@_ZSt4cout = external dso_local global %"class.std::basic_ostream", align 8
@.str.2 = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_LonelyInteger.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define dso_local i32 @_Z13lonelyintegerSt6vectorIiSaIiEE(%"class.std::vector"* nocapture readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %3 = load i32*, i32** %2, align 8, !tbaa !3
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i32*, i32** %4, align 8, !tbaa !8
  %6 = ptrtoint i32* %3 to i64
  %7 = ptrtoint i32* %5 to i64
  %8 = sub i64 %6, %7
  %9 = ashr exact i64 %8, 2
  switch i64 %9, label %12 [
    i64 0, label %114
    i64 1, label %10
  ]

10:                                               ; preds = %1
  %11 = load i32, i32* %5, align 4, !tbaa !9
  br label %114

12:                                               ; preds = %1
  %13 = load i32, i32* %5, align 4, !tbaa !9
  %14 = icmp ugt i64 %9, 1
  br i1 %14, label %15, label %114

15:                                               ; preds = %12
  %16 = add nsw i64 %9, -1
  %17 = icmp ult i64 %16, 8
  br i1 %17, label %103, label %18

18:                                               ; preds = %15
  %19 = and i64 %16, -8
  %20 = or i64 %19, 1
  %21 = insertelement <4 x i32> <i32 poison, i32 0, i32 0, i32 0>, i32 %13, i32 0
  %22 = add nsw i64 %19, -8
  %23 = lshr exact i64 %22, 3
  %24 = add nuw nsw i64 %23, 1
  %25 = and i64 %24, 3
  %26 = icmp ult i64 %22, 24
  br i1 %26, label %73, label %27

27:                                               ; preds = %18
  %28 = and i64 %24, 4611686018427387900
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i64 [ 0, %27 ], [ %70, %29 ]
  %31 = phi <4 x i32> [ %21, %27 ], [ %68, %29 ]
  %32 = phi <4 x i32> [ zeroinitializer, %27 ], [ %69, %29 ]
  %33 = phi i64 [ %28, %27 ], [ %71, %29 ]
  %34 = or i64 %30, 1
  %35 = getelementptr inbounds i32, i32* %5, i64 %34
  %36 = bitcast i32* %35 to <4 x i32>*
  %37 = load <4 x i32>, <4 x i32>* %36, align 4, !tbaa !9
  %38 = getelementptr inbounds i32, i32* %35, i64 4
  %39 = bitcast i32* %38 to <4 x i32>*
  %40 = load <4 x i32>, <4 x i32>* %39, align 4, !tbaa !9
  %41 = xor <4 x i32> %37, %31
  %42 = xor <4 x i32> %40, %32
  %43 = or i64 %30, 9
  %44 = getelementptr inbounds i32, i32* %5, i64 %43
  %45 = bitcast i32* %44 to <4 x i32>*
  %46 = load <4 x i32>, <4 x i32>* %45, align 4, !tbaa !9
  %47 = getelementptr inbounds i32, i32* %44, i64 4
  %48 = bitcast i32* %47 to <4 x i32>*
  %49 = load <4 x i32>, <4 x i32>* %48, align 4, !tbaa !9
  %50 = xor <4 x i32> %46, %41
  %51 = xor <4 x i32> %49, %42
  %52 = or i64 %30, 17
  %53 = getelementptr inbounds i32, i32* %5, i64 %52
  %54 = bitcast i32* %53 to <4 x i32>*
  %55 = load <4 x i32>, <4 x i32>* %54, align 4, !tbaa !9
  %56 = getelementptr inbounds i32, i32* %53, i64 4
  %57 = bitcast i32* %56 to <4 x i32>*
  %58 = load <4 x i32>, <4 x i32>* %57, align 4, !tbaa !9
  %59 = xor <4 x i32> %55, %50
  %60 = xor <4 x i32> %58, %51
  %61 = or i64 %30, 25
  %62 = getelementptr inbounds i32, i32* %5, i64 %61
  %63 = bitcast i32* %62 to <4 x i32>*
  %64 = load <4 x i32>, <4 x i32>* %63, align 4, !tbaa !9
  %65 = getelementptr inbounds i32, i32* %62, i64 4
  %66 = bitcast i32* %65 to <4 x i32>*
  %67 = load <4 x i32>, <4 x i32>* %66, align 4, !tbaa !9
  %68 = xor <4 x i32> %64, %59
  %69 = xor <4 x i32> %67, %60
  %70 = add nuw i64 %30, 32
  %71 = add i64 %33, -4
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %29, !llvm.loop !11

73:                                               ; preds = %29, %18
  %74 = phi <4 x i32> [ undef, %18 ], [ %68, %29 ]
  %75 = phi <4 x i32> [ undef, %18 ], [ %69, %29 ]
  %76 = phi i64 [ 0, %18 ], [ %70, %29 ]
  %77 = phi <4 x i32> [ %21, %18 ], [ %68, %29 ]
  %78 = phi <4 x i32> [ zeroinitializer, %18 ], [ %69, %29 ]
  %79 = icmp eq i64 %25, 0
  br i1 %79, label %97, label %80

80:                                               ; preds = %73, %80
  %81 = phi i64 [ %94, %80 ], [ %76, %73 ]
  %82 = phi <4 x i32> [ %92, %80 ], [ %77, %73 ]
  %83 = phi <4 x i32> [ %93, %80 ], [ %78, %73 ]
  %84 = phi i64 [ %95, %80 ], [ %25, %73 ]
  %85 = or i64 %81, 1
  %86 = getelementptr inbounds i32, i32* %5, i64 %85
  %87 = bitcast i32* %86 to <4 x i32>*
  %88 = load <4 x i32>, <4 x i32>* %87, align 4, !tbaa !9
  %89 = getelementptr inbounds i32, i32* %86, i64 4
  %90 = bitcast i32* %89 to <4 x i32>*
  %91 = load <4 x i32>, <4 x i32>* %90, align 4, !tbaa !9
  %92 = xor <4 x i32> %88, %82
  %93 = xor <4 x i32> %91, %83
  %94 = add nuw i64 %81, 8
  %95 = add i64 %84, -1
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %97, label %80, !llvm.loop !14

97:                                               ; preds = %80, %73
  %98 = phi <4 x i32> [ %74, %73 ], [ %92, %80 ]
  %99 = phi <4 x i32> [ %75, %73 ], [ %93, %80 ]
  %100 = xor <4 x i32> %99, %98
  %101 = call i32 @llvm.vector.reduce.xor.v4i32(<4 x i32> %100)
  %102 = icmp eq i64 %16, %19
  br i1 %102, label %114, label %103

103:                                              ; preds = %15, %97
  %104 = phi i64 [ 1, %15 ], [ %20, %97 ]
  %105 = phi i32 [ %13, %15 ], [ %101, %97 ]
  br label %106

106:                                              ; preds = %103, %106
  %107 = phi i64 [ %112, %106 ], [ %104, %103 ]
  %108 = phi i32 [ %111, %106 ], [ %105, %103 ]
  %109 = getelementptr inbounds i32, i32* %5, i64 %107
  %110 = load i32, i32* %109, align 4, !tbaa !9
  %111 = xor i32 %110, %108
  %112 = add nuw nsw i64 %107, 1
  %113 = icmp eq i64 %112, %9
  br i1 %113, label %114, label %106, !llvm.loop !16

114:                                              ; preds = %106, %97, %12, %1, %10
  %115 = phi i32 [ %11, %10 ], [ 0, %1 ], [ %13, %12 ], [ %101, %97 ], [ %111, %106 ]
  ret i32 %115
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: norecurse uwtable
define dso_local i32 @main() local_unnamed_addr #5 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !18
  %4 = tail call %struct._IO_FILE* @freopen(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), %struct._IO_FILE* %3)
  %5 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #12
  %6 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* nonnull align 4 dereferenceable(4) %1)
  %7 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSi6ignoreEli(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i64 9223372036854775807, i32 10)
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #12
  %9 = load i32, i32* %1, align 4, !tbaa !9
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %26, label %13

11:                                               ; preds = %72
  %12 = ptrtoint i32* %76 to i64
  br label %13

13:                                               ; preds = %11, %0
  %14 = phi i32* [ null, %0 ], [ %73, %11 ]
  %15 = phi i64 [ 0, %0 ], [ %12, %11 ]
  %16 = ptrtoint i32* %14 to i64
  %17 = sub i64 %15, %16
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %191, label %19

19:                                               ; preds = %13
  %20 = ashr exact i64 %17, 2
  %21 = icmp ugt i64 %20, 2305843009213693951
  br i1 %21, label %22, label %24

22:                                               ; preds = %19
  invoke void @_ZSt17__throw_bad_allocv() #13
          to label %23 unwind label %199

23:                                               ; preds = %22
  unreachable

24:                                               ; preds = %19
  %25 = invoke noalias nonnull i8* @_Znwm(i64 %17) #14
          to label %84 unwind label %199

26:                                               ; preds = %0, %72
  %27 = phi i32 [ %77, %72 ], [ 0, %0 ]
  %28 = phi i32* [ %75, %72 ], [ null, %0 ]
  %29 = phi i32* [ %76, %72 ], [ null, %0 ]
  %30 = phi i32* [ %73, %72 ], [ null, %0 ]
  %31 = invoke nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* nonnull align 4 dereferenceable(4) %2)
          to label %32 unwind label %80

32:                                               ; preds = %26
  %33 = icmp eq i32* %29, %28
  br i1 %33, label %36, label %34

34:                                               ; preds = %32
  %35 = load i32, i32* %2, align 4, !tbaa !9
  store i32 %35, i32* %29, align 4, !tbaa !9
  br label %72

36:                                               ; preds = %32
  %37 = ptrtoint i32* %28 to i64
  %38 = ptrtoint i32* %30 to i64
  %39 = sub i64 %37, %38
  %40 = ashr exact i64 %39, 2
  %41 = icmp eq i64 %39, 9223372036854775804
  br i1 %41, label %42, label %44

42:                                               ; preds = %36
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0)) #13
          to label %43 unwind label %82

43:                                               ; preds = %42
  unreachable

44:                                               ; preds = %36
  %45 = icmp eq i64 %39, 0
  %46 = select i1 %45, i64 1, i64 %40
  %47 = add nsw i64 %46, %40
  %48 = icmp ult i64 %47, %40
  %49 = icmp ugt i64 %47, 2305843009213693951
  %50 = or i1 %48, %49
  %51 = select i1 %50, i64 2305843009213693951, i64 %47
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %58, label %53

53:                                               ; preds = %44
  %54 = shl nuw nsw i64 %51, 2
  %55 = invoke noalias nonnull i8* @_Znwm(i64 %54) #14
          to label %56 unwind label %80

56:                                               ; preds = %53
  %57 = bitcast i8* %55 to i32*
  br label %58

58:                                               ; preds = %56, %44
  %59 = phi i32* [ %57, %56 ], [ null, %44 ]
  %60 = getelementptr inbounds i32, i32* %59, i64 %40
  %61 = load i32, i32* %2, align 4, !tbaa !9
  store i32 %61, i32* %60, align 4, !tbaa !9
  %62 = icmp sgt i64 %39, 0
  br i1 %62, label %63, label %66

63:                                               ; preds = %58
  %64 = bitcast i32* %59 to i8*
  %65 = bitcast i32* %30 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %64, i8* align 4 %65, i64 %39, i1 false) #12
  br label %66

66:                                               ; preds = %58, %63
  %67 = icmp eq i32* %30, null
  br i1 %67, label %70, label %68

68:                                               ; preds = %66
  %69 = bitcast i32* %30 to i8*
  call void @_ZdlPv(i8* nonnull %69) #12
  br label %70

70:                                               ; preds = %68, %66
  %71 = getelementptr inbounds i32, i32* %59, i64 %51
  br label %72

72:                                               ; preds = %70, %34
  %73 = phi i32* [ %59, %70 ], [ %30, %34 ]
  %74 = phi i32* [ %60, %70 ], [ %29, %34 ]
  %75 = phi i32* [ %71, %70 ], [ %28, %34 ]
  %76 = getelementptr inbounds i32, i32* %74, i64 1
  %77 = add nuw nsw i32 %27, 1
  %78 = load i32, i32* %1, align 4, !tbaa !9
  %79 = icmp slt i32 %77, %78
  br i1 %79, label %26, label %11, !llvm.loop !19

80:                                               ; preds = %26, %53
  %81 = landingpad { i8*, i32 }
          cleanup
  br label %201

82:                                               ; preds = %42
  %83 = landingpad { i8*, i32 }
          cleanup
  br label %201

84:                                               ; preds = %24
  %85 = bitcast i8* %25 to i32*
  %86 = bitcast i32* %14 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %25, i8* align 4 %86, i64 %17, i1 false) #12
  switch i64 %20, label %89 [
    i64 0, label %189
    i64 1, label %87
  ]

87:                                               ; preds = %84
  %88 = load i32, i32* %85, align 4, !tbaa !9
  br label %189

89:                                               ; preds = %84
  %90 = load i32, i32* %85, align 4, !tbaa !9
  %91 = add nsw i64 %20, -1
  %92 = icmp ult i64 %91, 8
  br i1 %92, label %178, label %93

93:                                               ; preds = %89
  %94 = and i64 %91, -8
  %95 = or i64 %94, 1
  %96 = insertelement <4 x i32> <i32 poison, i32 0, i32 0, i32 0>, i32 %90, i32 0
  %97 = add nsw i64 %94, -8
  %98 = lshr exact i64 %97, 3
  %99 = add nuw nsw i64 %98, 1
  %100 = and i64 %99, 3
  %101 = icmp ult i64 %97, 24
  br i1 %101, label %148, label %102

102:                                              ; preds = %93
  %103 = and i64 %99, 4611686018427387900
  br label %104

104:                                              ; preds = %104, %102
  %105 = phi i64 [ 0, %102 ], [ %145, %104 ]
  %106 = phi <4 x i32> [ %96, %102 ], [ %143, %104 ]
  %107 = phi <4 x i32> [ zeroinitializer, %102 ], [ %144, %104 ]
  %108 = phi i64 [ %103, %102 ], [ %146, %104 ]
  %109 = or i64 %105, 1
  %110 = getelementptr inbounds i32, i32* %85, i64 %109
  %111 = bitcast i32* %110 to <4 x i32>*
  %112 = load <4 x i32>, <4 x i32>* %111, align 4, !tbaa !9
  %113 = getelementptr inbounds i32, i32* %110, i64 4
  %114 = bitcast i32* %113 to <4 x i32>*
  %115 = load <4 x i32>, <4 x i32>* %114, align 4, !tbaa !9
  %116 = xor <4 x i32> %112, %106
  %117 = xor <4 x i32> %115, %107
  %118 = or i64 %105, 9
  %119 = getelementptr inbounds i32, i32* %85, i64 %118
  %120 = bitcast i32* %119 to <4 x i32>*
  %121 = load <4 x i32>, <4 x i32>* %120, align 4, !tbaa !9
  %122 = getelementptr inbounds i32, i32* %119, i64 4
  %123 = bitcast i32* %122 to <4 x i32>*
  %124 = load <4 x i32>, <4 x i32>* %123, align 4, !tbaa !9
  %125 = xor <4 x i32> %121, %116
  %126 = xor <4 x i32> %124, %117
  %127 = or i64 %105, 17
  %128 = getelementptr inbounds i32, i32* %85, i64 %127
  %129 = bitcast i32* %128 to <4 x i32>*
  %130 = load <4 x i32>, <4 x i32>* %129, align 4, !tbaa !9
  %131 = getelementptr inbounds i32, i32* %128, i64 4
  %132 = bitcast i32* %131 to <4 x i32>*
  %133 = load <4 x i32>, <4 x i32>* %132, align 4, !tbaa !9
  %134 = xor <4 x i32> %130, %125
  %135 = xor <4 x i32> %133, %126
  %136 = or i64 %105, 25
  %137 = getelementptr inbounds i32, i32* %85, i64 %136
  %138 = bitcast i32* %137 to <4 x i32>*
  %139 = load <4 x i32>, <4 x i32>* %138, align 4, !tbaa !9
  %140 = getelementptr inbounds i32, i32* %137, i64 4
  %141 = bitcast i32* %140 to <4 x i32>*
  %142 = load <4 x i32>, <4 x i32>* %141, align 4, !tbaa !9
  %143 = xor <4 x i32> %139, %134
  %144 = xor <4 x i32> %142, %135
  %145 = add nuw i64 %105, 32
  %146 = add i64 %108, -4
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %148, label %104, !llvm.loop !20

148:                                              ; preds = %104, %93
  %149 = phi <4 x i32> [ undef, %93 ], [ %143, %104 ]
  %150 = phi <4 x i32> [ undef, %93 ], [ %144, %104 ]
  %151 = phi i64 [ 0, %93 ], [ %145, %104 ]
  %152 = phi <4 x i32> [ %96, %93 ], [ %143, %104 ]
  %153 = phi <4 x i32> [ zeroinitializer, %93 ], [ %144, %104 ]
  %154 = icmp eq i64 %100, 0
  br i1 %154, label %172, label %155

155:                                              ; preds = %148, %155
  %156 = phi i64 [ %169, %155 ], [ %151, %148 ]
  %157 = phi <4 x i32> [ %167, %155 ], [ %152, %148 ]
  %158 = phi <4 x i32> [ %168, %155 ], [ %153, %148 ]
  %159 = phi i64 [ %170, %155 ], [ %100, %148 ]
  %160 = or i64 %156, 1
  %161 = getelementptr inbounds i32, i32* %85, i64 %160
  %162 = bitcast i32* %161 to <4 x i32>*
  %163 = load <4 x i32>, <4 x i32>* %162, align 4, !tbaa !9
  %164 = getelementptr inbounds i32, i32* %161, i64 4
  %165 = bitcast i32* %164 to <4 x i32>*
  %166 = load <4 x i32>, <4 x i32>* %165, align 4, !tbaa !9
  %167 = xor <4 x i32> %163, %157
  %168 = xor <4 x i32> %166, %158
  %169 = add nuw i64 %156, 8
  %170 = add i64 %159, -1
  %171 = icmp eq i64 %170, 0
  br i1 %171, label %172, label %155, !llvm.loop !21

172:                                              ; preds = %155, %148
  %173 = phi <4 x i32> [ %149, %148 ], [ %167, %155 ]
  %174 = phi <4 x i32> [ %150, %148 ], [ %168, %155 ]
  %175 = xor <4 x i32> %174, %173
  %176 = call i32 @llvm.vector.reduce.xor.v4i32(<4 x i32> %175)
  %177 = icmp eq i64 %91, %94
  br i1 %177, label %189, label %178

178:                                              ; preds = %89, %172
  %179 = phi i64 [ 1, %89 ], [ %95, %172 ]
  %180 = phi i32 [ %90, %89 ], [ %176, %172 ]
  br label %181

181:                                              ; preds = %178, %181
  %182 = phi i64 [ %187, %181 ], [ %179, %178 ]
  %183 = phi i32 [ %186, %181 ], [ %180, %178 ]
  %184 = getelementptr inbounds i32, i32* %85, i64 %182
  %185 = load i32, i32* %184, align 4, !tbaa !9
  %186 = xor i32 %185, %183
  %187 = add nuw nsw i64 %182, 1
  %188 = icmp eq i64 %187, %20
  br i1 %188, label %189, label %181, !llvm.loop !22

189:                                              ; preds = %181, %172, %84, %87
  %190 = phi i32 [ %88, %87 ], [ 0, %84 ], [ %176, %172 ], [ %186, %181 ]
  call void @_ZdlPv(i8* nonnull %25) #12
  br label %191

191:                                              ; preds = %13, %189
  %192 = phi i32 [ %190, %189 ], [ 0, %13 ]
  %193 = invoke nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 %192)
          to label %194 unwind label %199

194:                                              ; preds = %191
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #12
  %195 = icmp eq i32* %14, null
  br i1 %195, label %198, label %196

196:                                              ; preds = %194
  %197 = bitcast i32* %14 to i8*
  call void @_ZdlPv(i8* nonnull %197) #12
  br label %198

198:                                              ; preds = %194, %196
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #12
  ret i32 0

199:                                              ; preds = %24, %22, %191
  %200 = landingpad { i8*, i32 }
          cleanup
  br label %201

201:                                              ; preds = %80, %82, %199
  %202 = phi i32* [ %14, %199 ], [ %30, %80 ], [ %30, %82 ]
  %203 = phi { i8*, i32 } [ %200, %199 ], [ %81, %80 ], [ %83, %82 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #12
  %204 = icmp eq i32* %202, null
  br i1 %204, label %207, label %205

205:                                              ; preds = %201
  %206 = bitcast i32* %202 to i8*
  call void @_ZdlPv(i8* nonnull %206) #12
  br label %207

207:                                              ; preds = %201, %205
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #12
  resume { i8*, i32 } %203
}

declare dso_local %struct._IO_FILE* @freopen(i8*, i8*, %struct._IO_FILE*) local_unnamed_addr #0

declare dso_local nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16), i32* nonnull align 4 dereferenceable(4)) local_unnamed_addr #0

declare dso_local nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSi6ignoreEli(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16), i64, i32) local_unnamed_addr #0

declare dso_local i32 @__gxx_personality_v0(...)

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8), i32) local_unnamed_addr #0

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #7

; Function Attrs: noreturn
declare dso_local void @_ZSt17__throw_bad_allocv() local_unnamed_addr #7

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #9

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_LonelyInteger.cpp() #10 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #12
  ret void
}

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i32 @llvm.vector.reduce.xor.v4i32(<4 x i32>) #11

attributes #0 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nofree nounwind }
attributes #3 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #5 = { norecurse uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #10 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #11 = { nofree nosync nounwind readnone willreturn }
attributes #12 = { nounwind }
attributes #13 = { noreturn }
attributes #14 = { allocsize(0) }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !6, i64 0}
!11 = distinct !{!11, !12, !13}
!12 = !{!"llvm.loop.mustprogress"}
!13 = !{!"llvm.loop.isvectorized", i32 1}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.unroll.disable"}
!16 = distinct !{!16, !12, !17, !13}
!17 = !{!"llvm.loop.unroll.runtime.disable"}
!18 = !{!5, !5, i64 0}
!19 = distinct !{!19, !12}
!20 = distinct !{!20, !12, !13}
!21 = distinct !{!21, !15}
!22 = distinct !{!22, !12, !17, !13}
