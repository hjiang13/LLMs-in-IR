digraph "CFG for '_Z13lonelyintegerSt6vectorIiSaIiEE' function" {
	label="CFG for '_Z13lonelyintegerSt6vectorIiSaIiEE' function";

	Node0x55e83f2a5220 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%1:\l  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 1\l  %3 = load i32*, i32** %2, align 8, !tbaa !3\l  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 0\l  %5 = load i32*, i32** %4, align 8, !tbaa !8\l  %6 = ptrtoint i32* %3 to i64\l  %7 = ptrtoint i32* %5 to i64\l  %8 = sub i64 %6, %7\l  %9 = ashr exact i64 %8, 2\l  switch i64 %9, label %12 [\l    i64 0, label %114\l    i64 1, label %10\l  ]\l|{<s0>def|<s1>0|<s2>1}}"];
	Node0x55e83f2a5220:s0 -> Node0x55e83f2a5fa0;
	Node0x55e83f2a5220:s1 -> Node0x55e83f2a6430;
	Node0x55e83f2a5220:s2 -> Node0x55e83f2a64f0;
	Node0x55e83f2a64f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%10:\l10:                                               \l  %11 = load i32, i32* %5, align 4, !tbaa !9\l  br label %114\l}"];
	Node0x55e83f2a64f0 -> Node0x55e83f2a6430;
	Node0x55e83f2a5fa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%12:\l12:                                               \l  %13 = load i32, i32* %5, align 4, !tbaa !9\l  %14 = icmp ugt i64 %9, 1\l  br i1 %14, label %15, label %114\l|{<s0>T|<s1>F}}"];
	Node0x55e83f2a5fa0:s0 -> Node0x55e83f2a6f70;
	Node0x55e83f2a5fa0:s1 -> Node0x55e83f2a6430;
	Node0x55e83f2a6f70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e0dbd870",label="{%15:\l15:                                               \l  %16 = add nsw i64 %9, -1\l  %17 = icmp ult i64 %16, 8\l  br i1 %17, label %103, label %18\l|{<s0>T|<s1>F}}"];
	Node0x55e83f2a6f70:s0 -> Node0x55e83f2a7160;
	Node0x55e83f2a6f70:s1 -> Node0x55e83f2a71b0;
	Node0x55e83f2a71b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c1d4f470",label="{%18:\l18:                                               \l  %19 = and i64 %16, -8\l  %20 = or i64 %19, 1\l  %21 = insertelement \<4 x i32\> \<i32 poison, i32 0, i32 0, i32 0\>, i32 %13,\l... i32 0\l  %22 = add nsw i64 %19, -8\l  %23 = lshr exact i64 %22, 3\l  %24 = add nuw nsw i64 %23, 1\l  %25 = and i64 %24, 3\l  %26 = icmp ult i64 %22, 24\l  br i1 %26, label %73, label %27\l|{<s0>T|<s1>F}}"];
	Node0x55e83f2a71b0:s0 -> Node0x55e83f2a8510;
	Node0x55e83f2a71b0:s1 -> Node0x55e83f2a8560;
	Node0x55e83f2a8560 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%27:\l27:                                               \l  %28 = and i64 %24, 4611686018427387900\l  br label %29\l}"];
	Node0x55e83f2a8560 -> Node0x55e83f2a8780;
	Node0x55e83f2a8780 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%29:\l29:                                               \l  %30 = phi i64 [ 0, %27 ], [ %70, %29 ]\l  %31 = phi \<4 x i32\> [ %21, %27 ], [ %68, %29 ]\l  %32 = phi \<4 x i32\> [ zeroinitializer, %27 ], [ %69, %29 ]\l  %33 = phi i64 [ %28, %27 ], [ %71, %29 ]\l  %34 = or i64 %30, 1\l  %35 = getelementptr inbounds i32, i32* %5, i64 %34\l  %36 = bitcast i32* %35 to \<4 x i32\>*\l  %37 = load \<4 x i32\>, \<4 x i32\>* %36, align 4, !tbaa !9\l  %38 = getelementptr inbounds i32, i32* %35, i64 4\l  %39 = bitcast i32* %38 to \<4 x i32\>*\l  %40 = load \<4 x i32\>, \<4 x i32\>* %39, align 4, !tbaa !9\l  %41 = xor \<4 x i32\> %37, %31\l  %42 = xor \<4 x i32\> %40, %32\l  %43 = or i64 %30, 9\l  %44 = getelementptr inbounds i32, i32* %5, i64 %43\l  %45 = bitcast i32* %44 to \<4 x i32\>*\l  %46 = load \<4 x i32\>, \<4 x i32\>* %45, align 4, !tbaa !9\l  %47 = getelementptr inbounds i32, i32* %44, i64 4\l  %48 = bitcast i32* %47 to \<4 x i32\>*\l  %49 = load \<4 x i32\>, \<4 x i32\>* %48, align 4, !tbaa !9\l  %50 = xor \<4 x i32\> %46, %41\l  %51 = xor \<4 x i32\> %49, %42\l  %52 = or i64 %30, 17\l  %53 = getelementptr inbounds i32, i32* %5, i64 %52\l  %54 = bitcast i32* %53 to \<4 x i32\>*\l  %55 = load \<4 x i32\>, \<4 x i32\>* %54, align 4, !tbaa !9\l  %56 = getelementptr inbounds i32, i32* %53, i64 4\l  %57 = bitcast i32* %56 to \<4 x i32\>*\l  %58 = load \<4 x i32\>, \<4 x i32\>* %57, align 4, !tbaa !9\l  %59 = xor \<4 x i32\> %55, %50\l  %60 = xor \<4 x i32\> %58, %51\l  %61 = or i64 %30, 25\l  %62 = getelementptr inbounds i32, i32* %5, i64 %61\l  %63 = bitcast i32* %62 to \<4 x i32\>*\l  %64 = load \<4 x i32\>, \<4 x i32\>* %63, align 4, !tbaa !9\l  %65 = getelementptr inbounds i32, i32* %62, i64 4\l  %66 = bitcast i32* %65 to \<4 x i32\>*\l  %67 = load \<4 x i32\>, \<4 x i32\>* %66, align 4, !tbaa !9\l  %68 = xor \<4 x i32\> %64, %59\l  %69 = xor \<4 x i32\> %67, %60\l  %70 = add nuw i64 %30, 32\l  %71 = add i64 %33, -4\l  %72 = icmp eq i64 %71, 0\l  br i1 %72, label %73, label %29, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x55e83f2a8780:s0 -> Node0x55e83f2a8510;
	Node0x55e83f2a8780:s1 -> Node0x55e83f2a8780;
	Node0x55e83f2a8510 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c1d4f470",label="{%73:\l73:                                               \l  %74 = phi \<4 x i32\> [ undef, %18 ], [ %68, %29 ]\l  %75 = phi \<4 x i32\> [ undef, %18 ], [ %69, %29 ]\l  %76 = phi i64 [ 0, %18 ], [ %70, %29 ]\l  %77 = phi \<4 x i32\> [ %21, %18 ], [ %68, %29 ]\l  %78 = phi \<4 x i32\> [ zeroinitializer, %18 ], [ %69, %29 ]\l  %79 = icmp eq i64 %25, 0\l  br i1 %79, label %97, label %80\l|{<s0>T|<s1>F}}"];
	Node0x55e83f2a8510:s0 -> Node0x55e83f2ab150;
	Node0x55e83f2a8510:s1 -> Node0x55e83f2ab1a0;
	Node0x55e83f2ab1a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{%80:\l80:                                               \l  %81 = phi i64 [ %94, %80 ], [ %76, %73 ]\l  %82 = phi \<4 x i32\> [ %92, %80 ], [ %77, %73 ]\l  %83 = phi \<4 x i32\> [ %93, %80 ], [ %78, %73 ]\l  %84 = phi i64 [ %95, %80 ], [ %25, %73 ]\l  %85 = or i64 %81, 1\l  %86 = getelementptr inbounds i32, i32* %5, i64 %85\l  %87 = bitcast i32* %86 to \<4 x i32\>*\l  %88 = load \<4 x i32\>, \<4 x i32\>* %87, align 4, !tbaa !9\l  %89 = getelementptr inbounds i32, i32* %86, i64 4\l  %90 = bitcast i32* %89 to \<4 x i32\>*\l  %91 = load \<4 x i32\>, \<4 x i32\>* %90, align 4, !tbaa !9\l  %92 = xor \<4 x i32\> %88, %82\l  %93 = xor \<4 x i32\> %91, %83\l  %94 = add nuw i64 %81, 8\l  %95 = add i64 %84, -1\l  %96 = icmp eq i64 %95, 0\l  br i1 %96, label %97, label %80, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x55e83f2ab1a0:s0 -> Node0x55e83f2ab150;
	Node0x55e83f2ab1a0:s1 -> Node0x55e83f2ab1a0;
	Node0x55e83f2ab150 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c1d4f470",label="{%97:\l97:                                               \l  %98 = phi \<4 x i32\> [ %74, %73 ], [ %92, %80 ]\l  %99 = phi \<4 x i32\> [ %75, %73 ], [ %93, %80 ]\l  %100 = xor \<4 x i32\> %99, %98\l  %101 = call i32 @llvm.vector.reduce.xor.v4i32(\<4 x i32\> %100)\l  %102 = icmp eq i64 %16, %19\l  br i1 %102, label %114, label %103\l|{<s0>T|<s1>F}}"];
	Node0x55e83f2ab150:s0 -> Node0x55e83f2a6430;
	Node0x55e83f2ab150:s1 -> Node0x55e83f2a7160;
	Node0x55e83f2a7160 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%103:\l103:                                              \l  %104 = phi i64 [ 1, %15 ], [ %20, %97 ]\l  %105 = phi i32 [ %13, %15 ], [ %101, %97 ]\l  br label %106\l}"];
	Node0x55e83f2a7160 -> Node0x55e83f2ac480;
	Node0x55e83f2ac480 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%106:\l106:                                              \l  %107 = phi i64 [ %112, %106 ], [ %104, %103 ]\l  %108 = phi i32 [ %111, %106 ], [ %105, %103 ]\l  %109 = getelementptr inbounds i32, i32* %5, i64 %107\l  %110 = load i32, i32* %109, align 4, !tbaa !9\l  %111 = xor i32 %110, %108\l  %112 = add nuw nsw i64 %107, 1\l  %113 = icmp eq i64 %112, %9\l  br i1 %113, label %114, label %106, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x55e83f2ac480:s0 -> Node0x55e83f2a6430;
	Node0x55e83f2ac480:s1 -> Node0x55e83f2ac480;
	Node0x55e83f2a6430 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%114:\l114:                                              \l  %115 = phi i32 [ %11, %10 ], [ 0, %1 ], [ %13, %12 ], [ %101, %97 ], [ %111,\l... %106 ]\l  ret i32 %115\l}"];
}
