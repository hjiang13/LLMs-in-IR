; ModuleID = '../../Benchmarks/FactorialArray/FactorialArray.cpp'
source_filename = "../../Benchmarks/FactorialArray/FactorialArray.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.std::set" = type { %"class.std::_Rb_tree" }
%"class.std::_Rb_tree" = type { %"struct.std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>>::_Rb_tree_impl" }
%"struct.std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>>::_Rb_tree_impl" = type { %"struct.std::_Rb_tree_key_compare", %"struct.std::_Rb_tree_header" }
%"struct.std::_Rb_tree_key_compare" = type { %"struct.std::less" }
%"struct.std::less" = type { i8 }
%"struct.std::_Rb_tree_header" = type { %"struct.std::_Rb_tree_node_base", i64 }
%"struct.std::_Rb_tree_node_base" = type { i32, %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* }
%"struct.std::_Rb_tree_node" = type <{ %"struct.std::_Rb_tree_node_base", %"struct.__gnu_cxx::__aligned_membuf", [4 x i8] }>
%"struct.__gnu_cxx::__aligned_membuf" = type { [4 x i8] }

$__clang_call_terminate = comdat any

$_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEED2Ev = comdat any

$_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE = comdat any

$_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE5eraseERKi = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZN3fwt1tE = dso_local local_unnamed_addr global [100001 x i32] zeroinitializer, align 16
@f = dso_local local_unnamed_addr global [40 x i32] zeroinitializer, align 16
@a = dso_local global [100000 x i32] zeroinitializer, align 16
@.str = private unnamed_addr constant [30 x i8] c"../input_files/FactorialArray\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@stdin = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.2 = private unnamed_addr constant [6 x i8] c"%d %d\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_FactorialArray.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable
define dso_local void @_ZN3fwt3addEii(i32 %0, i32 %1) local_unnamed_addr #3 {
  %3 = icmp slt i32 %0, 100000
  br i1 %3, label %4, label %17

4:                                                ; preds = %2
  %5 = add nsw i32 %0, 1
  br label %6

6:                                                ; preds = %4, %6
  %7 = phi i32 [ %15, %6 ], [ %5, %4 ]
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds [100001 x i32], [100001 x i32]* @_ZN3fwt1tE, i64 0, i64 %8
  %10 = load i32, i32* %9, align 4, !tbaa !3
  %11 = add nsw i32 %10, %1
  %12 = srem i32 %11, 1000000000
  store i32 %12, i32* %9, align 4, !tbaa !3
  %13 = sub nsw i32 0, %7
  %14 = and i32 %7, %13
  %15 = add nsw i32 %14, %7
  %16 = icmp slt i32 %15, 100001
  br i1 %16, label %6, label %17, !llvm.loop !7

17:                                               ; preds = %6, %2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define dso_local i32 @_ZN3fwt3getEi(i32 %0) local_unnamed_addr #4 {
  %2 = add nsw i32 %0, 1
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %15, label %4

4:                                                ; preds = %1, %4
  %5 = phi i32 [ %11, %4 ], [ 0, %1 ]
  %6 = phi i32 [ %13, %4 ], [ %2, %1 ]
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds [100001 x i32], [100001 x i32]* @_ZN3fwt1tE, i64 0, i64 %7
  %9 = load i32, i32* %8, align 4, !tbaa !3
  %10 = add nsw i32 %9, %5
  %11 = srem i32 %10, 1000000000
  %12 = add i32 %6, -1
  %13 = and i32 %12, %6
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %4, !llvm.loop !9

15:                                               ; preds = %4, %1
  %16 = phi i32 [ 0, %1 ], [ %11, %4 ]
  ret i32 %16
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: norecurse uwtable
define dso_local i32 @main() local_unnamed_addr #6 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca %"class.std::set", align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !10
  %8 = tail call %struct._IO_FILE* @freopen(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), %struct._IO_FILE* %7)
  store i32 1, i32* getelementptr inbounds ([40 x i32], [40 x i32]* @f, i64 0, i64 0), align 16, !tbaa !3
  br label %29

9:                                                ; preds = %29
  %10 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #15
  %11 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #15
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)
  %13 = getelementptr inbounds %"class.std::set", %"class.std::set"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %13) #15
  %14 = getelementptr inbounds i8, i8* %13, i64 8
  %15 = bitcast i8* %14 to i32*
  store i32 0, i32* %15, align 8, !tbaa !12
  %16 = getelementptr inbounds i8, i8* %13, i64 16
  %17 = bitcast i8* %16 to %"struct.std::_Rb_tree_node_base"**
  store %"struct.std::_Rb_tree_node_base"* null, %"struct.std::_Rb_tree_node_base"** %17, align 8, !tbaa !17
  %18 = getelementptr inbounds i8, i8* %13, i64 24
  %19 = bitcast i8* %18 to i8**
  store i8* %14, i8** %19, align 8, !tbaa !18
  %20 = getelementptr inbounds i8, i8* %13, i64 32
  %21 = bitcast i8* %20 to i8**
  store i8* %14, i8** %21, align 8, !tbaa !19
  %22 = getelementptr inbounds i8, i8* %13, i64 40
  %23 = bitcast i8* %22 to i64*
  store i64 0, i64* %23, align 8, !tbaa !20
  %24 = bitcast i8* %16 to %"struct.std::_Rb_tree_node"**
  %25 = bitcast i8* %14 to %"struct.std::_Rb_tree_node_base"*
  %26 = bitcast i8* %18 to %"struct.std::_Rb_tree_node_base"**
  %27 = load i32, i32* %1, align 4, !tbaa !3
  %28 = icmp sgt i32 %27, 0
  br i1 %28, label %56, label %48

29:                                               ; preds = %29, %0
  %30 = phi i64 [ 1, %0 ], [ %43, %29 ]
  %31 = phi i64 [ 1, %0 ], [ %46, %29 ]
  %32 = mul nsw i64 %30, %31
  %33 = srem i64 %32, 1000000000
  %34 = trunc i64 %33 to i32
  %35 = getelementptr inbounds [40 x i32], [40 x i32]* @f, i64 0, i64 %31
  store i32 %34, i32* %35, align 4, !tbaa !3
  %36 = add nuw nsw i64 %31, 1
  %37 = mul nsw i64 %33, %36
  %38 = srem i64 %37, 1000000000
  %39 = trunc i64 %38 to i32
  %40 = getelementptr inbounds [40 x i32], [40 x i32]* @f, i64 0, i64 %36
  store i32 %39, i32* %40, align 4, !tbaa !3
  %41 = add nuw nsw i64 %31, 2
  %42 = mul nsw i64 %38, %41
  %43 = srem i64 %42, 1000000000
  %44 = trunc i64 %43 to i32
  %45 = getelementptr inbounds [40 x i32], [40 x i32]* @f, i64 0, i64 %41
  store i32 %44, i32* %45, align 4, !tbaa !3
  %46 = add nuw nsw i64 %31, 3
  %47 = icmp eq i64 %46, 40
  br i1 %47, label %9, label %29, !llvm.loop !21

48:                                               ; preds = %136, %9
  %49 = bitcast i32* %4 to i8*
  %50 = bitcast i32* %5 to i8*
  %51 = bitcast i32* %6 to i8*
  %52 = getelementptr inbounds %"class.std::set", %"class.std::set"* %3, i64 0, i32 0
  %53 = load i32, i32* %2, align 4, !tbaa !3
  %54 = add nsw i32 %53, -1
  store i32 %54, i32* %2, align 4, !tbaa !3
  %55 = icmp eq i32 %53, 0
  br i1 %55, label %450, label %141

56:                                               ; preds = %9, %136
  %57 = phi i64 [ %137, %136 ], [ 0, %9 ]
  %58 = getelementptr inbounds [100000 x i32], [100000 x i32]* @a, i64 0, i64 %57
  %59 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i32* nonnull %58)
  %60 = load i32, i32* %58, align 4, !tbaa !3
  %61 = icmp slt i32 %60, 40
  br i1 %61, label %62, label %136

62:                                               ; preds = %56
  %63 = sext i32 %60 to i64
  %64 = getelementptr inbounds [40 x i32], [40 x i32]* @f, i64 0, i64 %63
  %65 = load i32, i32* %64, align 4, !tbaa !3
  %66 = icmp ult i64 %57, 100000
  br i1 %66, label %67, label %81

67:                                               ; preds = %62
  %68 = trunc i64 %57 to i32
  %69 = add nuw nsw i32 %68, 1
  br label %70

70:                                               ; preds = %70, %67
  %71 = phi i32 [ %79, %70 ], [ %69, %67 ]
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds [100001 x i32], [100001 x i32]* @_ZN3fwt1tE, i64 0, i64 %72
  %74 = load i32, i32* %73, align 4, !tbaa !3
  %75 = add nsw i32 %74, %65
  %76 = srem i32 %75, 1000000000
  store i32 %76, i32* %73, align 4, !tbaa !3
  %77 = sub nsw i32 0, %71
  %78 = and i32 %71, %77
  %79 = add nsw i32 %78, %71
  %80 = icmp slt i32 %79, 100001
  br i1 %80, label %70, label %81, !llvm.loop !7

81:                                               ; preds = %70, %62
  %82 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %24, align 8, !tbaa !10
  %83 = icmp eq %"struct.std::_Rb_tree_node"* %82, null
  br i1 %83, label %99, label %84

84:                                               ; preds = %81, %84
  %85 = phi %"struct.std::_Rb_tree_node"* [ %95, %84 ], [ %82, %81 ]
  %86 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %85, i64 0, i32 1
  %87 = bitcast %"struct.__gnu_cxx::__aligned_membuf"* %86 to i32*
  %88 = load i32, i32* %87, align 4, !tbaa !3
  %89 = sext i32 %88 to i64
  %90 = icmp slt i64 %57, %89
  %91 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %85, i64 0, i32 0, i32 2
  %92 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %85, i64 0, i32 0, i32 3
  %93 = select i1 %90, %"struct.std::_Rb_tree_node_base"** %91, %"struct.std::_Rb_tree_node_base"** %92
  %94 = bitcast %"struct.std::_Rb_tree_node_base"** %93 to %"struct.std::_Rb_tree_node"**
  %95 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %94, align 8, !tbaa !10
  %96 = icmp eq %"struct.std::_Rb_tree_node"* %95, null
  br i1 %96, label %97, label %84, !llvm.loop !22

97:                                               ; preds = %84
  %98 = getelementptr %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %85, i64 0, i32 0
  br i1 %90, label %99, label %105

99:                                               ; preds = %97, %81
  %100 = phi %"struct.std::_Rb_tree_node_base"* [ %98, %97 ], [ %25, %81 ]
  %101 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %26, align 8, !tbaa !18
  %102 = icmp eq %"struct.std::_Rb_tree_node_base"* %100, %101
  br i1 %102, label %114, label %103

103:                                              ; preds = %99
  %104 = call %"struct.std::_Rb_tree_node_base"* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* %100) #16
  br label %105

105:                                              ; preds = %103, %97
  %106 = phi %"struct.std::_Rb_tree_node_base"* [ %100, %103 ], [ %98, %97 ]
  %107 = phi %"struct.std::_Rb_tree_node_base"* [ %104, %103 ], [ %98, %97 ]
  %108 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %107, i64 1, i32 0
  %109 = load i32, i32* %108, align 4, !tbaa !3
  %110 = sext i32 %109 to i64
  %111 = icmp sle i64 %57, %110
  %112 = icmp eq %"struct.std::_Rb_tree_node_base"* %106, null
  %113 = select i1 %111, i1 true, i1 %112
  br i1 %113, label %136, label %116

114:                                              ; preds = %99
  %115 = icmp eq %"struct.std::_Rb_tree_node_base"* %100, null
  br i1 %115, label %136, label %116

116:                                              ; preds = %105, %114
  %117 = phi %"struct.std::_Rb_tree_node_base"* [ %100, %114 ], [ %106, %105 ]
  %118 = icmp eq %"struct.std::_Rb_tree_node_base"* %117, %25
  br i1 %118, label %124, label %119

119:                                              ; preds = %116
  %120 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %117, i64 1, i32 0
  %121 = load i32, i32* %120, align 4, !tbaa !3
  %122 = sext i32 %121 to i64
  %123 = icmp slt i64 %57, %122
  br label %124

124:                                              ; preds = %119, %116
  %125 = phi i1 [ true, %116 ], [ %123, %119 ]
  %126 = invoke noalias nonnull i8* @_Znwm(i64 40) #17
          to label %127 unwind label %134

127:                                              ; preds = %124
  %128 = getelementptr inbounds i8, i8* %126, i64 32
  %129 = bitcast i8* %128 to i32*
  %130 = trunc i64 %57 to i32
  store i32 %130, i32* %129, align 4, !tbaa !3
  %131 = bitcast i8* %126 to %"struct.std::_Rb_tree_node_base"*
  call void @_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_(i1 zeroext %125, %"struct.std::_Rb_tree_node_base"* nonnull %131, %"struct.std::_Rb_tree_node_base"* nonnull %117, %"struct.std::_Rb_tree_node_base"* nonnull align 8 dereferenceable(32) %25) #15
  %132 = load i64, i64* %23, align 8, !tbaa !20
  %133 = add i64 %132, 1
  store i64 %133, i64* %23, align 8, !tbaa !20
  br label %136

134:                                              ; preds = %124
  %135 = landingpad { i8*, i32 }
          cleanup
  br label %456

136:                                              ; preds = %127, %114, %105, %56
  %137 = add nuw nsw i64 %57, 1
  %138 = load i32, i32* %1, align 4, !tbaa !3
  %139 = sext i32 %138 to i64
  %140 = icmp slt i64 %137, %139
  br i1 %140, label %56, label %48, !llvm.loop !23

141:                                              ; preds = %48, %446
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %49) #15
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %50) #15
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %51) #15
  %142 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %143 = load i32, i32* %5, align 4, !tbaa !3
  %144 = add nsw i32 %143, -1
  store i32 %144, i32* %5, align 4, !tbaa !3
  %145 = load i32, i32* %6, align 4, !tbaa !3
  %146 = add nsw i32 %145, -1
  store i32 %146, i32* %6, align 4, !tbaa !3
  %147 = load i32, i32* %4, align 4, !tbaa !3
  switch i32 %147, label %344 [
    i32 1, label %148
    i32 2, label %311
  ]

148:                                              ; preds = %141
  %149 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %24, align 8, !tbaa !17
  %150 = icmp eq %"struct.std::_Rb_tree_node"* %149, null
  br i1 %150, label %446, label %151

151:                                              ; preds = %148, %151
  %152 = phi %"struct.std::_Rb_tree_node"* [ %164, %151 ], [ %149, %148 ]
  %153 = phi %"struct.std::_Rb_tree_node_base"* [ %161, %151 ], [ %25, %148 ]
  %154 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %152, i64 0, i32 1
  %155 = bitcast %"struct.__gnu_cxx::__aligned_membuf"* %154 to i32*
  %156 = load i32, i32* %155, align 4, !tbaa !3
  %157 = icmp slt i32 %156, %144
  %158 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %152, i64 0, i32 0, i32 3
  %159 = getelementptr %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %152, i64 0, i32 0
  %160 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %152, i64 0, i32 0, i32 2
  %161 = select i1 %157, %"struct.std::_Rb_tree_node_base"* %153, %"struct.std::_Rb_tree_node_base"* %159
  %162 = select i1 %157, %"struct.std::_Rb_tree_node_base"** %158, %"struct.std::_Rb_tree_node_base"** %160
  %163 = bitcast %"struct.std::_Rb_tree_node_base"** %162 to %"struct.std::_Rb_tree_node"**
  %164 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %163, align 8, !tbaa !10
  %165 = icmp eq %"struct.std::_Rb_tree_node"* %164, null
  br i1 %165, label %166, label %151, !llvm.loop !24

166:                                              ; preds = %151
  %167 = icmp eq %"struct.std::_Rb_tree_node_base"* %161, %25
  br i1 %167, label %446, label %168

168:                                              ; preds = %166
  %169 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %161, i64 1, i32 0
  %170 = load i32, i32* %169, align 4, !tbaa !3
  %171 = icmp slt i32 %170, %145
  br i1 %171, label %172, label %446

172:                                              ; preds = %168, %306
  %173 = phi i32 [ %309, %306 ], [ %170, %168 ]
  %174 = phi %"struct.std::_Rb_tree_node_base"* [ %175, %306 ], [ %161, %168 ]
  %175 = call %"struct.std::_Rb_tree_node_base"* @_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* nonnull %174) #16
  %176 = sext i32 %173 to i64
  %177 = getelementptr inbounds [100000 x i32], [100000 x i32]* @a, i64 0, i64 %176
  %178 = load i32, i32* %177, align 4, !tbaa !3
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds [40 x i32], [40 x i32]* @f, i64 0, i64 %179
  %181 = load i32, i32* %180, align 4, !tbaa !3
  %182 = sub i32 1000000000, %181
  %183 = icmp slt i32 %173, 100000
  br i1 %183, label %184, label %200

184:                                              ; preds = %172
  %185 = add nsw i32 %173, 1
  br label %186

186:                                              ; preds = %186, %184
  %187 = phi i32 [ %195, %186 ], [ %185, %184 ]
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds [100001 x i32], [100001 x i32]* @_ZN3fwt1tE, i64 0, i64 %188
  %190 = load i32, i32* %189, align 4, !tbaa !3
  %191 = add nsw i32 %182, %190
  %192 = srem i32 %191, 1000000000
  store i32 %192, i32* %189, align 4, !tbaa !3
  %193 = sub nsw i32 0, %187
  %194 = and i32 %187, %193
  %195 = add nsw i32 %194, %187
  %196 = icmp slt i32 %195, 100001
  br i1 %196, label %186, label %197, !llvm.loop !7

197:                                              ; preds = %186
  %198 = add nsw i32 %178, 1
  store i32 %198, i32* %177, align 4, !tbaa !3
  %199 = icmp slt i32 %178, 39
  br i1 %199, label %203, label %220

200:                                              ; preds = %172
  %201 = add nsw i32 %178, 1
  store i32 %201, i32* %177, align 4, !tbaa !3
  %202 = icmp slt i32 %178, 39
  br i1 %202, label %304, label %220

203:                                              ; preds = %197
  %204 = sext i32 %198 to i64
  %205 = getelementptr inbounds [40 x i32], [40 x i32]* @f, i64 0, i64 %204
  %206 = load i32, i32* %205, align 4, !tbaa !3
  br label %207

207:                                              ; preds = %207, %203
  %208 = phi i32 [ %216, %207 ], [ %185, %203 ]
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds [100001 x i32], [100001 x i32]* @_ZN3fwt1tE, i64 0, i64 %209
  %211 = load i32, i32* %210, align 4, !tbaa !3
  %212 = add nsw i32 %211, %206
  %213 = srem i32 %212, 1000000000
  store i32 %213, i32* %210, align 4, !tbaa !3
  %214 = sub nsw i32 0, %208
  %215 = and i32 %208, %214
  %216 = add nsw i32 %215, %208
  %217 = icmp slt i32 %216, 100001
  br i1 %217, label %207, label %304, !llvm.loop !7

218:                                              ; preds = %436, %366
  %219 = landingpad { i8*, i32 }
          cleanup
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %51) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %50) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %49) #15
  br label %456

220:                                              ; preds = %200, %197
  %221 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %24, align 8, !tbaa !10
  %222 = icmp eq %"struct.std::_Rb_tree_node"* %221, null
  br i1 %222, label %282, label %223

223:                                              ; preds = %220, %276
  %224 = phi %"struct.std::_Rb_tree_node"* [ %280, %276 ], [ %221, %220 ]
  %225 = phi %"struct.std::_Rb_tree_node_base"* [ %277, %276 ], [ %25, %220 ]
  %226 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %224, i64 0, i32 1
  %227 = bitcast %"struct.__gnu_cxx::__aligned_membuf"* %226 to i32*
  %228 = load i32, i32* %227, align 4, !tbaa !3
  %229 = icmp slt i32 %228, %173
  br i1 %229, label %230, label %232

230:                                              ; preds = %223
  %231 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %224, i64 0, i32 0, i32 3
  br label %276

232:                                              ; preds = %223
  %233 = icmp slt i32 %173, %228
  %234 = getelementptr %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %224, i64 0, i32 0
  %235 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %224, i64 0, i32 0, i32 2
  br i1 %233, label %276, label %236

236:                                              ; preds = %232
  %237 = bitcast %"struct.std::_Rb_tree_node_base"** %235 to %"struct.std::_Rb_tree_node"**
  %238 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %237, align 8, !tbaa !25
  %239 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %224, i64 0, i32 0, i32 3
  %240 = bitcast %"struct.std::_Rb_tree_node_base"** %239 to %"struct.std::_Rb_tree_node"**
  %241 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %240, align 8, !tbaa !26
  %242 = icmp eq %"struct.std::_Rb_tree_node"* %238, null
  br i1 %242, label %258, label %243

243:                                              ; preds = %236, %243
  %244 = phi %"struct.std::_Rb_tree_node"* [ %256, %243 ], [ %238, %236 ]
  %245 = phi %"struct.std::_Rb_tree_node_base"* [ %253, %243 ], [ %234, %236 ]
  %246 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %244, i64 0, i32 1
  %247 = bitcast %"struct.__gnu_cxx::__aligned_membuf"* %246 to i32*
  %248 = load i32, i32* %247, align 4, !tbaa !3
  %249 = icmp slt i32 %248, %173
  %250 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %244, i64 0, i32 0, i32 3
  %251 = getelementptr %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %244, i64 0, i32 0
  %252 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %244, i64 0, i32 0, i32 2
  %253 = select i1 %249, %"struct.std::_Rb_tree_node_base"* %245, %"struct.std::_Rb_tree_node_base"* %251
  %254 = select i1 %249, %"struct.std::_Rb_tree_node_base"** %250, %"struct.std::_Rb_tree_node_base"** %252
  %255 = bitcast %"struct.std::_Rb_tree_node_base"** %254 to %"struct.std::_Rb_tree_node"**
  %256 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %255, align 8, !tbaa !10
  %257 = icmp eq %"struct.std::_Rb_tree_node"* %256, null
  br i1 %257, label %258, label %243, !llvm.loop !24

258:                                              ; preds = %243, %236
  %259 = phi %"struct.std::_Rb_tree_node_base"* [ %234, %236 ], [ %253, %243 ]
  %260 = icmp eq %"struct.std::_Rb_tree_node"* %241, null
  br i1 %260, label %282, label %261

261:                                              ; preds = %258, %261
  %262 = phi %"struct.std::_Rb_tree_node"* [ %274, %261 ], [ %241, %258 ]
  %263 = phi %"struct.std::_Rb_tree_node_base"* [ %271, %261 ], [ %225, %258 ]
  %264 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %262, i64 0, i32 1
  %265 = bitcast %"struct.__gnu_cxx::__aligned_membuf"* %264 to i32*
  %266 = load i32, i32* %265, align 4, !tbaa !3
  %267 = icmp slt i32 %173, %266
  %268 = getelementptr %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %262, i64 0, i32 0
  %269 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %262, i64 0, i32 0, i32 2
  %270 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %262, i64 0, i32 0, i32 3
  %271 = select i1 %267, %"struct.std::_Rb_tree_node_base"* %268, %"struct.std::_Rb_tree_node_base"* %263
  %272 = select i1 %267, %"struct.std::_Rb_tree_node_base"** %269, %"struct.std::_Rb_tree_node_base"** %270
  %273 = bitcast %"struct.std::_Rb_tree_node_base"** %272 to %"struct.std::_Rb_tree_node"**
  %274 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %273, align 8, !tbaa !10
  %275 = icmp eq %"struct.std::_Rb_tree_node"* %274, null
  br i1 %275, label %282, label %261, !llvm.loop !27

276:                                              ; preds = %232, %230
  %277 = phi %"struct.std::_Rb_tree_node_base"* [ %225, %230 ], [ %234, %232 ]
  %278 = phi %"struct.std::_Rb_tree_node_base"** [ %231, %230 ], [ %235, %232 ]
  %279 = bitcast %"struct.std::_Rb_tree_node_base"** %278 to %"struct.std::_Rb_tree_node"**
  %280 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %279, align 8, !tbaa !10
  %281 = icmp eq %"struct.std::_Rb_tree_node"* %280, null
  br i1 %281, label %282, label %223, !llvm.loop !28

282:                                              ; preds = %276, %261, %258, %220
  %283 = phi %"struct.std::_Rb_tree_node_base"* [ %259, %258 ], [ %25, %220 ], [ %259, %261 ], [ %277, %276 ]
  %284 = phi %"struct.std::_Rb_tree_node_base"* [ %225, %258 ], [ %25, %220 ], [ %271, %261 ], [ %277, %276 ]
  %285 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %26, align 8, !tbaa !18
  %286 = icmp eq %"struct.std::_Rb_tree_node_base"* %285, %283
  %287 = icmp eq %"struct.std::_Rb_tree_node_base"* %284, %25
  %288 = select i1 %286, i1 %287, i1 false
  br i1 %288, label %289, label %294

289:                                              ; preds = %282
  invoke void @_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE(%"class.std::_Rb_tree"* nonnull align 8 dereferenceable(48) %52, %"struct.std::_Rb_tree_node"* %221)
          to label %293 unwind label %290

290:                                              ; preds = %289
  %291 = landingpad { i8*, i32 }
          catch i8* null
  %292 = extractvalue { i8*, i32 } %291, 0
  call void @__clang_call_terminate(i8* %292) #18
  unreachable

293:                                              ; preds = %289
  store %"struct.std::_Rb_tree_node_base"* null, %"struct.std::_Rb_tree_node_base"** %17, align 8, !tbaa !17
  store i8* %14, i8** %19, align 8, !tbaa !18
  store i8* %14, i8** %21, align 8, !tbaa !19
  store i64 0, i64* %23, align 8, !tbaa !20
  br label %304

294:                                              ; preds = %282
  %295 = icmp eq %"struct.std::_Rb_tree_node_base"* %283, %284
  br i1 %295, label %304, label %296

296:                                              ; preds = %294, %296
  %297 = phi %"struct.std::_Rb_tree_node_base"* [ %298, %296 ], [ %283, %294 ]
  %298 = call %"struct.std::_Rb_tree_node_base"* @_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* %297) #16
  %299 = call %"struct.std::_Rb_tree_node_base"* @_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_(%"struct.std::_Rb_tree_node_base"* %297, %"struct.std::_Rb_tree_node_base"* nonnull align 8 dereferenceable(32) %25) #15
  %300 = bitcast %"struct.std::_Rb_tree_node_base"* %299 to i8*
  call void @_ZdlPv(i8* %300) #15
  %301 = load i64, i64* %23, align 8, !tbaa !20
  %302 = add i64 %301, -1
  store i64 %302, i64* %23, align 8, !tbaa !20
  %303 = icmp eq %"struct.std::_Rb_tree_node_base"* %298, %284
  br i1 %303, label %304, label %296, !llvm.loop !29

304:                                              ; preds = %296, %207, %200, %293, %294
  %305 = icmp eq %"struct.std::_Rb_tree_node_base"* %175, %25
  br i1 %305, label %446, label %306, !llvm.loop !30

306:                                              ; preds = %304
  %307 = load i32, i32* %6, align 4, !tbaa !3
  %308 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %175, i64 1, i32 0
  %309 = load i32, i32* %308, align 4, !tbaa !3
  %310 = icmp sgt i32 %309, %307
  br i1 %310, label %446, label %172

311:                                              ; preds = %141
  %312 = icmp eq i32 %145, 0
  br i1 %312, label %324, label %313

313:                                              ; preds = %311, %313
  %314 = phi i32 [ %320, %313 ], [ 0, %311 ]
  %315 = phi i32 [ %322, %313 ], [ %145, %311 ]
  %316 = sext i32 %315 to i64
  %317 = getelementptr inbounds [100001 x i32], [100001 x i32]* @_ZN3fwt1tE, i64 0, i64 %316
  %318 = load i32, i32* %317, align 4, !tbaa !3
  %319 = add nsw i32 %318, %314
  %320 = srem i32 %319, 1000000000
  %321 = add i32 %315, -1
  %322 = and i32 %321, %315
  %323 = icmp eq i32 %322, 0
  br i1 %323, label %324, label %313, !llvm.loop !9

324:                                              ; preds = %313, %311
  %325 = phi i32 [ 0, %311 ], [ %320, %313 ]
  %326 = icmp eq i32 %144, 0
  br i1 %326, label %338, label %327

327:                                              ; preds = %324, %327
  %328 = phi i32 [ %334, %327 ], [ 0, %324 ]
  %329 = phi i32 [ %336, %327 ], [ %144, %324 ]
  %330 = sext i32 %329 to i64
  %331 = getelementptr inbounds [100001 x i32], [100001 x i32]* @_ZN3fwt1tE, i64 0, i64 %330
  %332 = load i32, i32* %331, align 4, !tbaa !3
  %333 = add nsw i32 %332, %328
  %334 = srem i32 %333, 1000000000
  %335 = add i32 %329, -1
  %336 = and i32 %335, %329
  %337 = icmp eq i32 %336, 0
  br i1 %337, label %338, label %327, !llvm.loop !9

338:                                              ; preds = %327, %324
  %339 = phi i32 [ 0, %324 ], [ %334, %327 ]
  %340 = add nsw i32 %325, 1000000000
  %341 = sub i32 %340, %339
  %342 = srem i32 %341, 1000000000
  %343 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), i32 %342)
  br label %446

344:                                              ; preds = %141
  store i32 %145, i32* %6, align 4, !tbaa !3
  %345 = sext i32 %144 to i64
  %346 = getelementptr inbounds [100000 x i32], [100000 x i32]* @a, i64 0, i64 %345
  %347 = load i32, i32* %346, align 4, !tbaa !3
  %348 = icmp slt i32 %347, 40
  br i1 %348, label %349, label %372

349:                                              ; preds = %344
  %350 = sext i32 %347 to i64
  %351 = getelementptr inbounds [40 x i32], [40 x i32]* @f, i64 0, i64 %350
  %352 = load i32, i32* %351, align 4, !tbaa !3
  %353 = sub i32 1000000000, %352
  %354 = icmp slt i32 %143, 100001
  br i1 %354, label %355, label %366

355:                                              ; preds = %349, %355
  %356 = phi i32 [ %364, %355 ], [ %143, %349 ]
  %357 = sext i32 %356 to i64
  %358 = getelementptr inbounds [100001 x i32], [100001 x i32]* @_ZN3fwt1tE, i64 0, i64 %357
  %359 = load i32, i32* %358, align 4, !tbaa !3
  %360 = add nsw i32 %353, %359
  %361 = srem i32 %360, 1000000000
  store i32 %361, i32* %358, align 4, !tbaa !3
  %362 = sub nsw i32 0, %356
  %363 = and i32 %356, %362
  %364 = add nsw i32 %363, %356
  %365 = icmp slt i32 %364, 100001
  br i1 %365, label %355, label %366, !llvm.loop !7

366:                                              ; preds = %355, %349
  %367 = invoke i64 @_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE5eraseERKi(%"class.std::_Rb_tree"* nonnull align 8 dereferenceable(48) %52, i32* nonnull align 4 dereferenceable(4) %5)
          to label %368 unwind label %218

368:                                              ; preds = %366
  %369 = load i32, i32* %6, align 4, !tbaa !3
  %370 = load i32, i32* %5, align 4, !tbaa !3
  %371 = sext i32 %370 to i64
  br label %372

372:                                              ; preds = %368, %344
  %373 = phi i64 [ %371, %368 ], [ %345, %344 ]
  %374 = phi i32 [ %370, %368 ], [ %144, %344 ]
  %375 = phi i32 [ %369, %368 ], [ %145, %344 ]
  %376 = getelementptr inbounds [100000 x i32], [100000 x i32]* @a, i64 0, i64 %373
  store i32 %375, i32* %376, align 4, !tbaa !3
  %377 = icmp slt i32 %375, 40
  br i1 %377, label %378, label %446

378:                                              ; preds = %372
  %379 = sext i32 %375 to i64
  %380 = getelementptr inbounds [40 x i32], [40 x i32]* @f, i64 0, i64 %379
  %381 = load i32, i32* %380, align 4, !tbaa !3
  %382 = icmp slt i32 %374, 100000
  br i1 %382, label %383, label %396

383:                                              ; preds = %378
  %384 = add nsw i32 %374, 1
  br label %385

385:                                              ; preds = %385, %383
  %386 = phi i32 [ %394, %385 ], [ %384, %383 ]
  %387 = sext i32 %386 to i64
  %388 = getelementptr inbounds [100001 x i32], [100001 x i32]* @_ZN3fwt1tE, i64 0, i64 %387
  %389 = load i32, i32* %388, align 4, !tbaa !3
  %390 = add nsw i32 %389, %381
  %391 = srem i32 %390, 1000000000
  store i32 %391, i32* %388, align 4, !tbaa !3
  %392 = sub nsw i32 0, %386
  %393 = and i32 %386, %392
  %394 = add nsw i32 %393, %386
  %395 = icmp slt i32 %394, 100001
  br i1 %395, label %385, label %396, !llvm.loop !7

396:                                              ; preds = %385, %378
  %397 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %24, align 8, !tbaa !10
  %398 = icmp eq %"struct.std::_Rb_tree_node"* %397, null
  br i1 %398, label %413, label %399

399:                                              ; preds = %396, %399
  %400 = phi %"struct.std::_Rb_tree_node"* [ %409, %399 ], [ %397, %396 ]
  %401 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %400, i64 0, i32 1
  %402 = bitcast %"struct.__gnu_cxx::__aligned_membuf"* %401 to i32*
  %403 = load i32, i32* %402, align 4, !tbaa !3
  %404 = icmp slt i32 %374, %403
  %405 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %400, i64 0, i32 0, i32 2
  %406 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %400, i64 0, i32 0, i32 3
  %407 = select i1 %404, %"struct.std::_Rb_tree_node_base"** %405, %"struct.std::_Rb_tree_node_base"** %406
  %408 = bitcast %"struct.std::_Rb_tree_node_base"** %407 to %"struct.std::_Rb_tree_node"**
  %409 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %408, align 8, !tbaa !10
  %410 = icmp eq %"struct.std::_Rb_tree_node"* %409, null
  br i1 %410, label %411, label %399, !llvm.loop !22

411:                                              ; preds = %399
  %412 = getelementptr %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %400, i64 0, i32 0
  br i1 %404, label %413, label %419

413:                                              ; preds = %411, %396
  %414 = phi %"struct.std::_Rb_tree_node_base"* [ %412, %411 ], [ %25, %396 ]
  %415 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %26, align 8, !tbaa !18
  %416 = icmp eq %"struct.std::_Rb_tree_node_base"* %414, %415
  br i1 %416, label %427, label %417

417:                                              ; preds = %413
  %418 = call %"struct.std::_Rb_tree_node_base"* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* %414) #16
  br label %419

419:                                              ; preds = %417, %411
  %420 = phi %"struct.std::_Rb_tree_node_base"* [ %414, %417 ], [ %412, %411 ]
  %421 = phi %"struct.std::_Rb_tree_node_base"* [ %418, %417 ], [ %412, %411 ]
  %422 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %421, i64 1, i32 0
  %423 = load i32, i32* %422, align 4, !tbaa !3
  %424 = icmp sge i32 %423, %374
  %425 = icmp eq %"struct.std::_Rb_tree_node_base"* %420, null
  %426 = select i1 %424, i1 true, i1 %425
  br i1 %426, label %446, label %429

427:                                              ; preds = %413
  %428 = icmp eq %"struct.std::_Rb_tree_node_base"* %414, null
  br i1 %428, label %446, label %429

429:                                              ; preds = %419, %427
  %430 = phi %"struct.std::_Rb_tree_node_base"* [ %414, %427 ], [ %420, %419 ]
  %431 = icmp eq %"struct.std::_Rb_tree_node_base"* %430, %25
  br i1 %431, label %436, label %432

432:                                              ; preds = %429
  %433 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %430, i64 1, i32 0
  %434 = load i32, i32* %433, align 4, !tbaa !3
  %435 = icmp slt i32 %374, %434
  br label %436

436:                                              ; preds = %432, %429
  %437 = phi i1 [ true, %429 ], [ %435, %432 ]
  %438 = invoke noalias nonnull i8* @_Znwm(i64 40) #17
          to label %439 unwind label %218

439:                                              ; preds = %436
  %440 = getelementptr inbounds i8, i8* %438, i64 32
  %441 = bitcast i8* %440 to i32*
  %442 = load i32, i32* %5, align 4, !tbaa !3
  store i32 %442, i32* %441, align 4, !tbaa !3
  %443 = bitcast i8* %438 to %"struct.std::_Rb_tree_node_base"*
  call void @_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_(i1 zeroext %437, %"struct.std::_Rb_tree_node_base"* nonnull %443, %"struct.std::_Rb_tree_node_base"* nonnull %430, %"struct.std::_Rb_tree_node_base"* nonnull align 8 dereferenceable(32) %25) #15
  %444 = load i64, i64* %23, align 8, !tbaa !20
  %445 = add i64 %444, 1
  store i64 %445, i64* %23, align 8, !tbaa !20
  br label %446

446:                                              ; preds = %306, %304, %168, %148, %166, %439, %427, %419, %338, %372
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %51) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %50) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %49) #15
  %447 = load i32, i32* %2, align 4, !tbaa !3
  %448 = add nsw i32 %447, -1
  store i32 %448, i32* %2, align 4, !tbaa !3
  %449 = icmp eq i32 %447, 0
  br i1 %449, label %450, label %141, !llvm.loop !31

450:                                              ; preds = %446, %48
  %451 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %24, align 8, !tbaa !17
  invoke void @_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE(%"class.std::_Rb_tree"* nonnull align 8 dereferenceable(48) %52, %"struct.std::_Rb_tree_node"* %451)
          to label %455 unwind label %452

452:                                              ; preds = %450
  %453 = landingpad { i8*, i32 }
          catch i8* null
  %454 = extractvalue { i8*, i32 } %453, 0
  call void @__clang_call_terminate(i8* %454) #18
  unreachable

455:                                              ; preds = %450
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %13) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #15
  ret i32 0

456:                                              ; preds = %218, %134
  %457 = phi { i8*, i32 } [ %135, %134 ], [ %219, %218 ]
  %458 = getelementptr inbounds %"class.std::set", %"class.std::set"* %3, i64 0, i32 0
  call void @_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEED2Ev(%"class.std::_Rb_tree"* nonnull align 8 dereferenceable(48) %458) #15
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %13) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #15
  resume { i8*, i32 } %457
}

declare dso_local %struct._IO_FILE* @freopen(i8*, i8*, %struct._IO_FILE*) local_unnamed_addr #0

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @__isoc99_scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #7

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #7

; Function Attrs: noinline noreturn nounwind
define linkonce_odr hidden void @__clang_call_terminate(i8* %0) local_unnamed_addr #8 comdat {
  %2 = tail call i8* @__cxa_begin_catch(i8* %0) #15
  tail call void @_ZSt9terminatev() #18
  unreachable
}

declare dso_local i8* @__cxa_begin_catch(i8*) local_unnamed_addr

declare dso_local void @_ZSt9terminatev() local_unnamed_addr

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEED2Ev(%"class.std::_Rb_tree"* nonnull align 8 dereferenceable(48) %0) unnamed_addr #9 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = getelementptr inbounds i8, i8* %2, i64 16
  %4 = bitcast i8* %3 to %"struct.std::_Rb_tree_node"**
  %5 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %4, align 8, !tbaa !17
  invoke void @_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE(%"class.std::_Rb_tree"* nonnull align 8 dereferenceable(48) %0, %"struct.std::_Rb_tree_node"* %5)
          to label %6 unwind label %7

6:                                                ; preds = %1
  ret void

7:                                                ; preds = %1
  %8 = landingpad { i8*, i32 }
          catch i8* null
  %9 = extractvalue { i8*, i32 } %8, 0
  tail call void @__clang_call_terminate(i8* %9) #18
  unreachable
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE(%"class.std::_Rb_tree"* nonnull align 8 dereferenceable(48) %0, %"struct.std::_Rb_tree_node"* %1) local_unnamed_addr #10 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {
  %3 = icmp eq %"struct.std::_Rb_tree_node"* %1, null
  br i1 %3, label %14, label %4

4:                                                ; preds = %2, %4
  %5 = phi %"struct.std::_Rb_tree_node"* [ %11, %4 ], [ %1, %2 ]
  %6 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %5, i64 0, i32 0, i32 3
  %7 = bitcast %"struct.std::_Rb_tree_node_base"** %6 to %"struct.std::_Rb_tree_node"**
  %8 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %7, align 8, !tbaa !26
  tail call void @_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE(%"class.std::_Rb_tree"* nonnull align 8 dereferenceable(48) %0, %"struct.std::_Rb_tree_node"* %8)
  %9 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %5, i64 0, i32 0, i32 2
  %10 = bitcast %"struct.std::_Rb_tree_node_base"** %9 to %"struct.std::_Rb_tree_node"**
  %11 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %10, align 8, !tbaa !25
  %12 = bitcast %"struct.std::_Rb_tree_node"* %5 to i8*
  tail call void @_ZdlPv(i8* nonnull %12) #15
  %13 = icmp eq %"struct.std::_Rb_tree_node"* %11, null
  br i1 %13, label %14, label %4, !llvm.loop !32

14:                                               ; preds = %4, %2
  ret void
}

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #11

; Function Attrs: mustprogress nofree nounwind readonly willreturn
declare dso_local %"struct.std::_Rb_tree_node_base"* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"*) local_unnamed_addr #12

; Function Attrs: nounwind
declare dso_local void @_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_(i1 zeroext, %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* nonnull align 8 dereferenceable(32)) local_unnamed_addr #1

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #13

; Function Attrs: mustprogress nofree nounwind readonly willreturn
declare dso_local %"struct.std::_Rb_tree_node_base"* @_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"*) local_unnamed_addr #12

; Function Attrs: uwtable
define linkonce_odr dso_local i64 @_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE5eraseERKi(%"class.std::_Rb_tree"* nonnull align 8 dereferenceable(48) %0, i32* nonnull align 4 dereferenceable(4) %1) local_unnamed_addr #14 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {
  %3 = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds i8, i8* %3, i64 16
  %5 = bitcast i8* %4 to %"struct.std::_Rb_tree_node"**
  %6 = getelementptr inbounds i8, i8* %3, i64 8
  %7 = bitcast i8* %6 to %"struct.std::_Rb_tree_node_base"*
  %8 = load i32, i32* %1, align 4
  %9 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %5, align 8, !tbaa !10
  %10 = icmp eq %"struct.std::_Rb_tree_node"* %9, null
  br i1 %10, label %70, label %11

11:                                               ; preds = %2, %64
  %12 = phi %"struct.std::_Rb_tree_node"* [ %68, %64 ], [ %9, %2 ]
  %13 = phi %"struct.std::_Rb_tree_node_base"* [ %65, %64 ], [ %7, %2 ]
  %14 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %12, i64 0, i32 1
  %15 = bitcast %"struct.__gnu_cxx::__aligned_membuf"* %14 to i32*
  %16 = load i32, i32* %15, align 4, !tbaa !3
  %17 = icmp slt i32 %16, %8
  br i1 %17, label %18, label %20

18:                                               ; preds = %11
  %19 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %12, i64 0, i32 0, i32 3
  br label %64

20:                                               ; preds = %11
  %21 = icmp slt i32 %8, %16
  %22 = getelementptr %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %12, i64 0, i32 0
  %23 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %12, i64 0, i32 0, i32 2
  br i1 %21, label %64, label %24

24:                                               ; preds = %20
  %25 = bitcast %"struct.std::_Rb_tree_node_base"** %23 to %"struct.std::_Rb_tree_node"**
  %26 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %25, align 8, !tbaa !25
  %27 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %12, i64 0, i32 0, i32 3
  %28 = bitcast %"struct.std::_Rb_tree_node_base"** %27 to %"struct.std::_Rb_tree_node"**
  %29 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %28, align 8, !tbaa !26
  %30 = icmp eq %"struct.std::_Rb_tree_node"* %26, null
  br i1 %30, label %46, label %31

31:                                               ; preds = %24, %31
  %32 = phi %"struct.std::_Rb_tree_node"* [ %44, %31 ], [ %26, %24 ]
  %33 = phi %"struct.std::_Rb_tree_node_base"* [ %41, %31 ], [ %22, %24 ]
  %34 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %32, i64 0, i32 1
  %35 = bitcast %"struct.__gnu_cxx::__aligned_membuf"* %34 to i32*
  %36 = load i32, i32* %35, align 4, !tbaa !3
  %37 = icmp slt i32 %36, %8
  %38 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %32, i64 0, i32 0, i32 3
  %39 = getelementptr %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %32, i64 0, i32 0
  %40 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %32, i64 0, i32 0, i32 2
  %41 = select i1 %37, %"struct.std::_Rb_tree_node_base"* %33, %"struct.std::_Rb_tree_node_base"* %39
  %42 = select i1 %37, %"struct.std::_Rb_tree_node_base"** %38, %"struct.std::_Rb_tree_node_base"** %40
  %43 = bitcast %"struct.std::_Rb_tree_node_base"** %42 to %"struct.std::_Rb_tree_node"**
  %44 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %43, align 8, !tbaa !10
  %45 = icmp eq %"struct.std::_Rb_tree_node"* %44, null
  br i1 %45, label %46, label %31, !llvm.loop !24

46:                                               ; preds = %31, %24
  %47 = phi %"struct.std::_Rb_tree_node_base"* [ %22, %24 ], [ %41, %31 ]
  %48 = icmp eq %"struct.std::_Rb_tree_node"* %29, null
  br i1 %48, label %70, label %49

49:                                               ; preds = %46, %49
  %50 = phi %"struct.std::_Rb_tree_node"* [ %62, %49 ], [ %29, %46 ]
  %51 = phi %"struct.std::_Rb_tree_node_base"* [ %59, %49 ], [ %13, %46 ]
  %52 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %50, i64 0, i32 1
  %53 = bitcast %"struct.__gnu_cxx::__aligned_membuf"* %52 to i32*
  %54 = load i32, i32* %53, align 4, !tbaa !3
  %55 = icmp slt i32 %8, %54
  %56 = getelementptr %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %50, i64 0, i32 0
  %57 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %50, i64 0, i32 0, i32 2
  %58 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %50, i64 0, i32 0, i32 3
  %59 = select i1 %55, %"struct.std::_Rb_tree_node_base"* %56, %"struct.std::_Rb_tree_node_base"* %51
  %60 = select i1 %55, %"struct.std::_Rb_tree_node_base"** %57, %"struct.std::_Rb_tree_node_base"** %58
  %61 = bitcast %"struct.std::_Rb_tree_node_base"** %60 to %"struct.std::_Rb_tree_node"**
  %62 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %61, align 8, !tbaa !10
  %63 = icmp eq %"struct.std::_Rb_tree_node"* %62, null
  br i1 %63, label %70, label %49, !llvm.loop !27

64:                                               ; preds = %20, %18
  %65 = phi %"struct.std::_Rb_tree_node_base"* [ %13, %18 ], [ %22, %20 ]
  %66 = phi %"struct.std::_Rb_tree_node_base"** [ %19, %18 ], [ %23, %20 ]
  %67 = bitcast %"struct.std::_Rb_tree_node_base"** %66 to %"struct.std::_Rb_tree_node"**
  %68 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %67, align 8, !tbaa !10
  %69 = icmp eq %"struct.std::_Rb_tree_node"* %68, null
  br i1 %69, label %70, label %11, !llvm.loop !28

70:                                               ; preds = %64, %49, %2, %46
  %71 = phi %"struct.std::_Rb_tree_node_base"* [ %47, %46 ], [ %7, %2 ], [ %47, %49 ], [ %65, %64 ]
  %72 = phi %"struct.std::_Rb_tree_node_base"* [ %13, %46 ], [ %7, %2 ], [ %59, %49 ], [ %65, %64 ]
  %73 = getelementptr inbounds i8, i8* %3, i64 40
  %74 = bitcast i8* %73 to i64*
  %75 = load i64, i64* %74, align 8, !tbaa !20
  %76 = getelementptr inbounds i8, i8* %3, i64 24
  %77 = bitcast i8* %76 to %"struct.std::_Rb_tree_node_base"**
  %78 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %77, align 8, !tbaa !18
  %79 = icmp eq %"struct.std::_Rb_tree_node_base"* %78, %71
  %80 = icmp eq %"struct.std::_Rb_tree_node_base"* %72, %7
  %81 = select i1 %79, i1 %80, i1 false
  br i1 %81, label %82, label %91

82:                                               ; preds = %70
  invoke void @_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE(%"class.std::_Rb_tree"* nonnull align 8 dereferenceable(48) %0, %"struct.std::_Rb_tree_node"* %9)
          to label %86 unwind label %83

83:                                               ; preds = %82
  %84 = landingpad { i8*, i32 }
          catch i8* null
  %85 = extractvalue { i8*, i32 } %84, 0
  tail call void @__clang_call_terminate(i8* %85) #18
  unreachable

86:                                               ; preds = %82
  %87 = bitcast i8* %4 to %"struct.std::_Rb_tree_node_base"**
  store %"struct.std::_Rb_tree_node_base"* null, %"struct.std::_Rb_tree_node_base"** %87, align 8, !tbaa !17
  %88 = bitcast i8* %76 to i8**
  store i8* %6, i8** %88, align 8, !tbaa !18
  %89 = getelementptr inbounds i8, i8* %3, i64 32
  %90 = bitcast i8* %89 to i8**
  store i8* %6, i8** %90, align 8, !tbaa !19
  store i64 0, i64* %74, align 8, !tbaa !20
  br label %101

91:                                               ; preds = %70
  %92 = icmp eq %"struct.std::_Rb_tree_node_base"* %71, %72
  br i1 %92, label %101, label %93

93:                                               ; preds = %91, %93
  %94 = phi %"struct.std::_Rb_tree_node_base"* [ %95, %93 ], [ %71, %91 ]
  %95 = tail call %"struct.std::_Rb_tree_node_base"* @_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* %94) #16
  %96 = tail call %"struct.std::_Rb_tree_node_base"* @_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_(%"struct.std::_Rb_tree_node_base"* %94, %"struct.std::_Rb_tree_node_base"* nonnull align 8 dereferenceable(32) %7) #15
  %97 = bitcast %"struct.std::_Rb_tree_node_base"* %96 to i8*
  tail call void @_ZdlPv(i8* %97) #15
  %98 = load i64, i64* %74, align 8, !tbaa !20
  %99 = add i64 %98, -1
  store i64 %99, i64* %74, align 8, !tbaa !20
  %100 = icmp eq %"struct.std::_Rb_tree_node_base"* %95, %72
  br i1 %100, label %101, label %93, !llvm.loop !29

101:                                              ; preds = %93, %86, %91
  %102 = phi i64 [ 0, %86 ], [ %75, %91 ], [ %99, %93 ]
  %103 = sub i64 %75, %102
  ret i64 %103
}

; Function Attrs: nounwind
declare dso_local %"struct.std::_Rb_tree_node_base"* @_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_(%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* nonnull align 8 dereferenceable(32)) local_unnamed_addr #1

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_FactorialArray.cpp() #14 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #15
  ret void
}

attributes #0 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nofree nounwind }
attributes #3 = { mustprogress nofree norecurse nosync nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #6 = { norecurse uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { noinline noreturn nounwind }
attributes #9 = { nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #10 = { mustprogress uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #11 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #12 = { mustprogress nofree nounwind readonly willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #13 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #14 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #15 = { nounwind }
attributes #16 = { nounwind readonly willreturn }
attributes #17 = { allocsize(0) }
attributes #18 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"int", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.mustprogress"}
!9 = distinct !{!9, !8}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !5, i64 0}
!12 = !{!13, !15, i64 0}
!13 = !{!"_ZTSSt15_Rb_tree_header", !14, i64 0, !16, i64 32}
!14 = !{!"_ZTSSt18_Rb_tree_node_base", !15, i64 0, !11, i64 8, !11, i64 16, !11, i64 24}
!15 = !{!"_ZTSSt14_Rb_tree_color", !5, i64 0}
!16 = !{!"long", !5, i64 0}
!17 = !{!13, !11, i64 8}
!18 = !{!13, !11, i64 16}
!19 = !{!13, !11, i64 24}
!20 = !{!13, !16, i64 32}
!21 = distinct !{!21, !8}
!22 = distinct !{!22, !8}
!23 = distinct !{!23, !8}
!24 = distinct !{!24, !8}
!25 = !{!14, !11, i64 16}
!26 = !{!14, !11, i64 24}
!27 = distinct !{!27, !8}
!28 = distinct !{!28, !8}
!29 = distinct !{!29, !8}
!30 = distinct !{!30, !8}
!31 = distinct !{!31, !8}
!32 = distinct !{!32, !8}
