digraph "CFG for '_Z21isAnagramOfPalindromeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE' function" {
	label="CFG for '_Z21isAnagramOfPalindromeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE' function";

	Node0x562116502c60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%1:\l  %2 = alloca [256 x i32], align 16\l  %3 = bitcast [256 x i32]* %2 to i8*\l  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %3) #10\l  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16\l... dereferenceable(1024) %3, i8 0, i64 1024, i1 false)\l  %4 = getelementptr inbounds %\"class.std::__cxx11::basic_string\",\l... %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\l  %5 = load i64, i64* %4, align 8, !tbaa !3\l  %6 = trunc i64 %5 to i32\l  %7 = icmp sgt i32 %6, 0\l  br i1 %7, label %8, label %65\l|{<s0>T|<s1>F}}"];
	Node0x562116502c60:s0 -> Node0x562116504170;
	Node0x562116502c60:s1 -> Node0x562116504200;
	Node0x562116504170 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%8:\l8:                                                \l  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\",\l... %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\l  %10 = load i8*, i8** %9, align 8, !tbaa !10\l  %11 = and i64 %5, 4294967295\l  %12 = add nsw i64 %11, -1\l  %13 = and i64 %5, 3\l  %14 = icmp ult i64 %12, 3\l  br i1 %14, label %50, label %15\l|{<s0>T|<s1>F}}"];
	Node0x562116504170:s0 -> Node0x5621165034a0;
	Node0x562116504170:s1 -> Node0x562116504830;
	Node0x562116504830 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%15:\l15:                                               \l  %16 = sub nsw i64 %11, %13\l  br label %17\l}"];
	Node0x562116504830 -> Node0x562116504a00;
	Node0x562116504a00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#d24b4070",label="{%17:\l17:                                               \l  %18 = phi i64 [ 0, %15 ], [ %47, %17 ]\l  %19 = phi i64 [ %16, %15 ], [ %48, %17 ]\l  %20 = getelementptr inbounds i8, i8* %10, i64 %18\l  %21 = load i8, i8* %20, align 1, !tbaa !11\l  %22 = sext i8 %21 to i64\l  %23 = getelementptr inbounds [256 x i32], [256 x i32]* %2, i64 0, i64 %22\l  %24 = load i32, i32* %23, align 4, !tbaa !12\l  %25 = add nsw i32 %24, 1\l  store i32 %25, i32* %23, align 4, !tbaa !12\l  %26 = or i64 %18, 1\l  %27 = getelementptr inbounds i8, i8* %10, i64 %26\l  %28 = load i8, i8* %27, align 1, !tbaa !11\l  %29 = sext i8 %28 to i64\l  %30 = getelementptr inbounds [256 x i32], [256 x i32]* %2, i64 0, i64 %29\l  %31 = load i32, i32* %30, align 4, !tbaa !12\l  %32 = add nsw i32 %31, 1\l  store i32 %32, i32* %30, align 4, !tbaa !12\l  %33 = or i64 %18, 2\l  %34 = getelementptr inbounds i8, i8* %10, i64 %33\l  %35 = load i8, i8* %34, align 1, !tbaa !11\l  %36 = sext i8 %35 to i64\l  %37 = getelementptr inbounds [256 x i32], [256 x i32]* %2, i64 0, i64 %36\l  %38 = load i32, i32* %37, align 4, !tbaa !12\l  %39 = add nsw i32 %38, 1\l  store i32 %39, i32* %37, align 4, !tbaa !12\l  %40 = or i64 %18, 3\l  %41 = getelementptr inbounds i8, i8* %10, i64 %40\l  %42 = load i8, i8* %41, align 1, !tbaa !11\l  %43 = sext i8 %42 to i64\l  %44 = getelementptr inbounds [256 x i32], [256 x i32]* %2, i64 0, i64 %43\l  %45 = load i32, i32* %44, align 4, !tbaa !12\l  %46 = add nsw i32 %45, 1\l  store i32 %46, i32* %44, align 4, !tbaa !12\l  %47 = add nuw nsw i64 %18, 4\l  %48 = add i64 %19, -4\l  %49 = icmp eq i64 %48, 0\l  br i1 %49, label %50, label %17, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x562116504a00:s0 -> Node0x5621165034a0;
	Node0x562116504a00:s1 -> Node0x562116504a00;
	Node0x5621165034a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%50:\l50:                                               \l  %51 = phi i64 [ 0, %8 ], [ %47, %17 ]\l  %52 = icmp eq i64 %13, 0\l  br i1 %52, label %65, label %53\l|{<s0>T|<s1>F}}"];
	Node0x5621165034a0:s0 -> Node0x562116504200;
	Node0x5621165034a0:s1 -> Node0x562116507260;
	Node0x562116507260 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%53:\l53:                                               \l  %54 = phi i64 [ %62, %53 ], [ %51, %50 ]\l  %55 = phi i64 [ %63, %53 ], [ %13, %50 ]\l  %56 = getelementptr inbounds i8, i8* %10, i64 %54\l  %57 = load i8, i8* %56, align 1, !tbaa !11\l  %58 = sext i8 %57 to i64\l  %59 = getelementptr inbounds [256 x i32], [256 x i32]* %2, i64 0, i64 %58\l  %60 = load i32, i32* %59, align 4, !tbaa !12\l  %61 = add nsw i32 %60, 1\l  store i32 %61, i32* %59, align 4, !tbaa !12\l  %62 = add nuw nsw i64 %54, 1\l  %63 = add i64 %55, -1\l  %64 = icmp eq i64 %63, 0\l  br i1 %64, label %65, label %53, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x562116507260:s0 -> Node0x562116504200;
	Node0x562116507260:s1 -> Node0x562116507260;
	Node0x562116504200 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%65:\l65:                                               \l  br label %66\l}"];
	Node0x562116504200 -> Node0x562116508010;
	Node0x562116508010 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%66:\l66:                                               \l  %67 = phi i64 [ 0, %65 ], [ %90, %88 ]\l  %68 = phi i1 [ true, %65 ], [ %91, %88 ]\l  %69 = phi i32 [ 0, %65 ], [ %89, %88 ]\l  %70 = getelementptr inbounds [256 x i32], [256 x i32]* %2, i64 0, i64 %67\l  %71 = load i32, i32* %70, align 8, !tbaa !12\l  %72 = and i32 %71, 1\l  %73 = icmp eq i32 %72, 0\l  br i1 %73, label %76, label %74\l|{<s0>T|<s1>F}}"];
	Node0x562116508010:s0 -> Node0x5621165086a0;
	Node0x562116508010:s1 -> Node0x562116508730;
	Node0x562116508730 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%74:\l74:                                               \l  %75 = icmp eq i32 %69, 1\l  br i1 %75, label %83, label %76\l|{<s0>T|<s1>F}}"];
	Node0x562116508730:s0 -> Node0x562116508900;
	Node0x562116508730:s1 -> Node0x5621165086a0;
	Node0x5621165086a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%76:\l76:                                               \l  %77 = phi i32 [ %69, %66 ], [ 1, %74 ]\l  %78 = or i64 %67, 1\l  %79 = getelementptr inbounds [256 x i32], [256 x i32]* %2, i64 0, i64 %78\l  %80 = load i32, i32* %79, align 4, !tbaa !12\l  %81 = and i32 %80, 1\l  %82 = icmp eq i32 %81, 0\l  br i1 %82, label %88, label %86\l|{<s0>T|<s1>F}}"];
	Node0x5621165086a0:s0 -> Node0x5621165080d0;
	Node0x5621165086a0:s1 -> Node0x562116508d90;
	Node0x562116508900 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5d8d170",label="{%83:\l83:                                               \l  %84 = phi i1 [ %68, %74 ], [ true, %86 ], [ %91, %88 ]\l  %85 = xor i1 %84, true\l  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %3) #10\l  ret i1 %85\l}"];
	Node0x562116508d90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%86:\l86:                                               \l  %87 = icmp eq i32 %77, 1\l  br i1 %87, label %83, label %88\l|{<s0>T|<s1>F}}"];
	Node0x562116508d90:s0 -> Node0x562116508900;
	Node0x562116508d90:s1 -> Node0x5621165080d0;
	Node0x5621165080d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{%88:\l88:                                               \l  %89 = phi i32 [ %77, %76 ], [ 1, %86 ]\l  %90 = add nuw nsw i64 %67, 2\l  %91 = icmp ult i64 %78, 255\l  %92 = icmp eq i64 %90, 256\l  br i1 %92, label %83, label %66, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x5621165080d0:s0 -> Node0x562116508900;
	Node0x5621165080d0:s1 -> Node0x562116508010;
}
