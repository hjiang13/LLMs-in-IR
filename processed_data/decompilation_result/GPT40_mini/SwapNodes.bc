; ModuleID = './SwapNodes.cpp'
source_filename = "./SwapNodes.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%struct.node = type { i32, %struct.node*, %struct.node* }
%"class.std::deque" = type { %"class.std::_Deque_base" }
%"class.std::_Deque_base" = type { %"struct.std::_Deque_base<node *, std::allocator<node *>>::_Deque_impl" }
%"struct.std::_Deque_base<node *, std::allocator<node *>>::_Deque_impl" = type { %struct.node***, i64, %"struct.std::_Deque_iterator", %"struct.std::_Deque_iterator" }
%"struct.std::_Deque_iterator" = type { %struct.node**, %struct.node**, %struct.node**, %struct.node*** }
%"class.std::length_error" = type { %"class.std::logic_error" }
%"class.std::logic_error" = type { %"class.std::exception", %"struct.std::__cow_string" }
%"class.std::exception" = type { i32 (...)** }
%"struct.std::__cow_string" = type { %union.anon }
%union.anon = type { i8* }

$_ZNSt5dequeIP4nodeSaIS1_EED2Ev = comdat any

$_ZNSt11_Deque_baseIP4nodeSaIS1_EE17_M_initialize_mapEm = comdat any

$__clang_call_terminate = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZSt4cout = external dso_local global %"class.std::basic_ostream", align 8
@.str = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.1 = private unnamed_addr constant [28 x i8] c"Enter the number of nodes: \00", align 1
@_ZSt3cin = external dso_local global %"class.std::basic_istream", align 8
@.str.2 = private unnamed_addr constant [48 x i8] c"Cannot create std::deque larger than max_size()\00", align 1
@_ZTISt12length_error = external dso_local constant i8*
@.str.3 = private unnamed_addr constant [35 x i8] c"Enter the level to swap subtrees: \00", align 1
@.str.4 = private unnamed_addr constant [35 x i8] c"InOrder traversal after swapping: \00", align 1
@.str.5 = private unnamed_addr constant [48 x i8] c"cannot create std::deque larger than max_size()\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_SwapNodes.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: mustprogress uwtable
define dso_local void @_Z7InOrderP4node(%struct.node* readonly %0) local_unnamed_addr #3 {
  %2 = icmp eq %struct.node* %0, null
  br i1 %2, label %14, label %3

3:                                                ; preds = %1, %3
  %4 = phi %struct.node* [ %12, %3 ], [ %0, %1 ]
  %5 = getelementptr inbounds %struct.node, %struct.node* %4, i64 0, i32 1
  %6 = load %struct.node*, %struct.node** %5, align 8, !tbaa !3
  tail call void @_Z7InOrderP4node(%struct.node* %6)
  %7 = getelementptr inbounds %struct.node, %struct.node* %4, i64 0, i32 0
  %8 = load i32, i32* %7, align 8, !tbaa !9
  %9 = tail call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 %8)
  %10 = tail call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %9, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0), i64 1)
  %11 = getelementptr inbounds %struct.node, %struct.node* %4, i64 0, i32 2
  %12 = load %struct.node*, %struct.node** %11, align 8, !tbaa !10
  %13 = icmp eq %struct.node* %12, null
  br i1 %13, label %14, label %3

14:                                               ; preds = %3, %1
  ret void
}

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8), i32) local_unnamed_addr #0

; Function Attrs: mustprogress nofree nosync nounwind uwtable
define dso_local void @_Z19swapSubtreesOfLevelP4nodei(%struct.node* %0, i32 %1) local_unnamed_addr #4 {
  %3 = icmp eq %struct.node* %0, null
  br i1 %3, label %20, label %4

4:                                                ; preds = %2, %14
  %5 = phi i32 [ %16, %14 ], [ %1, %2 ]
  %6 = phi %struct.node* [ %18, %14 ], [ %0, %2 ]
  %7 = icmp eq i32 %5, 0
  %8 = getelementptr inbounds %struct.node, %struct.node* %6, i64 0, i32 1
  br i1 %7, label %9, label %14

9:                                                ; preds = %4
  %10 = bitcast %struct.node** %8 to <2 x %struct.node*>*
  %11 = load <2 x %struct.node*>, <2 x %struct.node*>* %10, align 8, !tbaa !11
  %12 = shufflevector <2 x %struct.node*> %11, <2 x %struct.node*> poison, <2 x i32> <i32 1, i32 0>
  %13 = bitcast %struct.node** %8 to <2 x %struct.node*>*
  store <2 x %struct.node*> %12, <2 x %struct.node*>* %13, align 8, !tbaa !11
  br label %20

14:                                               ; preds = %4
  %15 = load %struct.node*, %struct.node** %8, align 8, !tbaa !3
  %16 = add nsw i32 %5, -1
  tail call void @_Z19swapSubtreesOfLevelP4nodei(%struct.node* %15, i32 %16)
  %17 = getelementptr inbounds %struct.node, %struct.node* %6, i64 0, i32 2
  %18 = load %struct.node*, %struct.node** %17, align 8, !tbaa !10
  %19 = icmp eq %struct.node* %18, null
  br i1 %19, label %20, label %4

20:                                               ; preds = %14, %2, %9
  ret void
}

; Function Attrs: norecurse uwtable
define dso_local i32 @main() local_unnamed_addr #5 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = alloca i32, align 4
  %2 = alloca %"class.std::deque", align 8
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #15
  %5 = tail call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i8* nonnull getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0), i64 27)
  %6 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* nonnull align 4 dereferenceable(4) %1)
  %7 = load i32, i32* %1, align 4, !tbaa !12
  %8 = icmp slt i32 %7, 1
  br i1 %8, label %9, label %15

9:                                                ; preds = %0
  %10 = call i8* @__cxa_allocate_exception(i64 16) #15
  %11 = bitcast i8* %10 to %"class.std::length_error"*
  invoke void @_ZNSt12length_errorC1EPKc(%"class.std::length_error"* nonnull align 8 dereferenceable(16) %11, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0))
          to label %12 unwind label %13

12:                                               ; preds = %9
  call void @__cxa_throw(i8* %10, i8* bitcast (i8** @_ZTISt12length_error to i8*), i8* bitcast (void (%"class.std::length_error"*)* @_ZNSt12length_errorD1Ev to i8*)) #16
  unreachable

13:                                               ; preds = %9
  %14 = landingpad { i8*, i32 }
          cleanup
  call void @__cxa_free_exception(i8* %10) #15
  br label %417

15:                                               ; preds = %0
  %16 = bitcast %"class.std::deque"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %16) #15
  %17 = getelementptr inbounds %"class.std::deque", %"class.std::deque"* %2, i64 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(80) %16, i8 0, i64 80, i1 false) #15
  call void @_ZNSt11_Deque_baseIP4nodeSaIS1_EE17_M_initialize_mapEm(%"class.std::_Deque_base"* nonnull align 8 dereferenceable(80) %17, i64 0)
  %18 = getelementptr inbounds %"class.std::deque", %"class.std::deque"* %2, i64 0, i32 0, i32 0, i32 3, i32 0
  %19 = getelementptr inbounds %"class.std::deque", %"class.std::deque"* %2, i64 0, i32 0, i32 0, i32 3, i32 2
  %20 = getelementptr inbounds %"class.std::deque", %"class.std::deque"* %2, i64 0, i32 0, i32 0, i32 3, i32 3
  %21 = getelementptr inbounds %"class.std::deque", %"class.std::deque"* %2, i64 0, i32 0, i32 0, i32 2, i32 3
  %22 = getelementptr inbounds %"class.std::deque", %"class.std::deque"* %2, i64 0, i32 0, i32 0, i32 3, i32 1
  %23 = getelementptr inbounds %"class.std::deque", %"class.std::deque"* %2, i64 0, i32 0, i32 0, i32 2, i32 2
  %24 = getelementptr inbounds %"class.std::deque", %"class.std::deque"* %2, i64 0, i32 0, i32 0, i32 2, i32 0
  %25 = getelementptr inbounds %"class.std::deque", %"class.std::deque"* %2, i64 0, i32 0, i32 0, i32 1
  %26 = getelementptr inbounds %"class.std::deque", %"class.std::deque"* %2, i64 0, i32 0, i32 0, i32 0
  %27 = bitcast %"class.std::deque"* %2 to i8**
  %28 = getelementptr inbounds %"class.std::deque", %"class.std::deque"* %2, i64 0, i32 0, i32 0, i32 2, i32 1
  %29 = bitcast %struct.node*** %18 to i8***
  %30 = load i32, i32* %1, align 4, !tbaa !12
  %31 = icmp sgt i32 %30, 0
  br i1 %31, label %44, label %32

32:                                               ; preds = %167, %15
  %33 = phi i32 [ %30, %15 ], [ %168, %167 ]
  %34 = load %struct.node**, %struct.node*** %24, align 8
  %35 = load %struct.node**, %struct.node*** %28, align 8
  %36 = load %struct.node***, %struct.node**** %21, align 8
  %37 = ptrtoint %struct.node** %34 to i64
  %38 = ptrtoint %struct.node** %35 to i64
  %39 = sub i64 %37, %38
  %40 = ashr exact i64 %39, 3
  %41 = icmp sgt i32 %33, 0
  br i1 %41, label %42, label %175

42:                                               ; preds = %32
  %43 = zext i32 %33 to i64
  br label %178

44:                                               ; preds = %15, %167
  %45 = phi i32 [ %168, %167 ], [ %30, %15 ]
  %46 = phi i32 [ %50, %167 ], [ 0, %15 ]
  %47 = invoke noalias nonnull dereferenceable(24) i8* @_Znwm(i64 24) #17
          to label %48 unwind label %171

48:                                               ; preds = %44
  %49 = bitcast i8* %47 to %struct.node*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(24) %47, i8 0, i64 16, i1 false)
  %50 = add nuw nsw i32 %46, 1
  %51 = getelementptr inbounds %struct.node, %struct.node* %49, i64 0, i32 0
  store i32 %50, i32* %51, align 8, !tbaa !9
  %52 = getelementptr inbounds %struct.node, %struct.node* %49, i64 0, i32 1
  %53 = bitcast %struct.node** %52 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %53, i8 0, i64 16, i1 false)
  %54 = load %struct.node**, %struct.node*** %18, align 8, !tbaa !13
  %55 = load %struct.node**, %struct.node*** %19, align 8, !tbaa !18
  %56 = getelementptr inbounds %struct.node*, %struct.node** %55, i64 -1
  %57 = icmp eq %struct.node** %54, %56
  br i1 %57, label %62, label %58

58:                                               ; preds = %48
  %59 = bitcast %struct.node** %54 to i8**
  store i8* %47, i8** %59, align 8, !tbaa !11
  %60 = load %struct.node**, %struct.node*** %18, align 8, !tbaa !13
  %61 = getelementptr inbounds %struct.node*, %struct.node** %60, i64 1
  br label %167

62:                                               ; preds = %48
  %63 = load %struct.node***, %struct.node**** %20, align 8, !tbaa !19
  %64 = load %struct.node***, %struct.node**** %21, align 8, !tbaa !19
  %65 = ptrtoint %struct.node*** %63 to i64
  %66 = ptrtoint %struct.node*** %64 to i64
  %67 = sub i64 %65, %66
  %68 = shl i64 %67, 3
  %69 = add i64 %68, -64
  %70 = load %struct.node**, %struct.node*** %22, align 8, !tbaa !20
  %71 = ptrtoint %struct.node** %54 to i64
  %72 = ptrtoint %struct.node** %70 to i64
  %73 = sub i64 %71, %72
  %74 = ashr exact i64 %73, 3
  %75 = add nsw i64 %69, %74
  %76 = load %struct.node**, %struct.node*** %23, align 8, !tbaa !21
  %77 = load %struct.node**, %struct.node*** %24, align 8, !tbaa !22
  %78 = ptrtoint %struct.node** %76 to i64
  %79 = ptrtoint %struct.node** %77 to i64
  %80 = sub i64 %78, %79
  %81 = ashr exact i64 %80, 3
  %82 = add nsw i64 %75, %81
  %83 = icmp eq i64 %82, 1152921504606846975
  br i1 %83, label %84, label %86

84:                                               ; preds = %62
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.5, i64 0, i64 0)) #16
          to label %85 unwind label %173

85:                                               ; preds = %84
  unreachable

86:                                               ; preds = %62
  %87 = load i64, i64* %25, align 8, !tbaa !23
  %88 = load %struct.node***, %struct.node**** %26, align 8, !tbaa !24
  %89 = ptrtoint %struct.node*** %88 to i64
  %90 = sub i64 %65, %89
  %91 = ashr exact i64 %90, 3
  %92 = sub i64 %87, %91
  %93 = icmp ult i64 %92, 2
  br i1 %93, label %94, label %155

94:                                               ; preds = %86
  %95 = ashr exact i64 %67, 3
  %96 = add nsw i64 %95, 1
  %97 = add nsw i64 %95, 2
  %98 = shl nsw i64 %97, 1
  %99 = icmp ugt i64 %87, %98
  br i1 %99, label %100, label %120

100:                                              ; preds = %94
  %101 = sub i64 %87, %97
  %102 = lshr i64 %101, 1
  %103 = getelementptr inbounds %struct.node**, %struct.node*** %88, i64 %102
  %104 = icmp ult %struct.node*** %103, %64
  %105 = getelementptr inbounds %struct.node**, %struct.node*** %63, i64 1
  %106 = ptrtoint %struct.node*** %105 to i64
  %107 = sub i64 %106, %66
  %108 = icmp eq i64 %107, 0
  br i1 %104, label %109, label %113

109:                                              ; preds = %100
  br i1 %108, label %148, label %110

110:                                              ; preds = %109
  %111 = bitcast %struct.node*** %103 to i8*
  %112 = bitcast %struct.node*** %64 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %111, i8* nonnull align 8 %112, i64 %107, i1 false) #15
  br label %148

113:                                              ; preds = %100
  br i1 %108, label %148, label %114

114:                                              ; preds = %113
  %115 = ashr exact i64 %107, 3
  %116 = sub nsw i64 %96, %115
  %117 = getelementptr inbounds %struct.node**, %struct.node*** %103, i64 %116
  %118 = bitcast %struct.node*** %117 to i8*
  %119 = bitcast %struct.node*** %64 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %118, i8* align 8 %119, i64 %107, i1 false) #15
  br label %148

120:                                              ; preds = %94
  %121 = icmp eq i64 %87, 0
  %122 = select i1 %121, i64 1, i64 %87
  %123 = add i64 %87, 2
  %124 = add i64 %123, %122
  %125 = icmp ugt i64 %124, 1152921504606846975
  br i1 %125, label %126, label %128

126:                                              ; preds = %120
  invoke void @_ZSt17__throw_bad_allocv() #16
          to label %127 unwind label %173

127:                                              ; preds = %126
  unreachable

128:                                              ; preds = %120
  %129 = shl nuw nsw i64 %124, 3
  %130 = invoke noalias nonnull i8* @_Znwm(i64 %129) #18
          to label %131 unwind label %171

131:                                              ; preds = %128
  %132 = bitcast i8* %130 to %struct.node***
  %133 = sub nsw i64 %124, %97
  %134 = lshr i64 %133, 1
  %135 = getelementptr inbounds %struct.node**, %struct.node*** %132, i64 %134
  %136 = load %struct.node***, %struct.node**** %21, align 8, !tbaa !25
  %137 = load %struct.node***, %struct.node**** %20, align 8, !tbaa !26
  %138 = getelementptr inbounds %struct.node**, %struct.node*** %137, i64 1
  %139 = ptrtoint %struct.node*** %138 to i64
  %140 = ptrtoint %struct.node*** %136 to i64
  %141 = sub i64 %139, %140
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %146, label %143

143:                                              ; preds = %131
  %144 = bitcast %struct.node*** %135 to i8*
  %145 = bitcast %struct.node*** %136 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 8 %144, i8* align 8 %145, i64 %141, i1 false) #15
  br label %146

146:                                              ; preds = %143, %131
  %147 = load i8*, i8** %27, align 8, !tbaa !24
  call void @_ZdlPv(i8* %147) #15
  store i8* %130, i8** %27, align 8, !tbaa !24
  store i64 %124, i64* %25, align 8, !tbaa !23
  br label %148

148:                                              ; preds = %146, %114, %113, %110, %109
  %149 = phi %struct.node*** [ %135, %146 ], [ %103, %113 ], [ %103, %114 ], [ %103, %109 ], [ %103, %110 ]
  store %struct.node*** %149, %struct.node**** %21, align 8, !tbaa !19
  %150 = load %struct.node**, %struct.node*** %149, align 8, !tbaa !11
  store %struct.node** %150, %struct.node*** %28, align 8, !tbaa !20
  %151 = getelementptr inbounds %struct.node*, %struct.node** %150, i64 64
  store %struct.node** %151, %struct.node*** %23, align 8, !tbaa !21
  %152 = getelementptr inbounds %struct.node**, %struct.node*** %149, i64 %95
  store %struct.node*** %152, %struct.node**** %20, align 8, !tbaa !19
  %153 = load %struct.node**, %struct.node*** %152, align 8, !tbaa !11
  store %struct.node** %153, %struct.node*** %22, align 8, !tbaa !20
  %154 = getelementptr inbounds %struct.node*, %struct.node** %153, i64 64
  store %struct.node** %154, %struct.node*** %19, align 8, !tbaa !21
  br label %155

155:                                              ; preds = %148, %86
  %156 = invoke noalias nonnull i8* @_Znwm(i64 512) #18
          to label %157 unwind label %171

157:                                              ; preds = %155
  %158 = load %struct.node***, %struct.node**** %20, align 8, !tbaa !26
  %159 = getelementptr inbounds %struct.node**, %struct.node*** %158, i64 1
  %160 = bitcast %struct.node*** %159 to i8**
  store i8* %156, i8** %160, align 8, !tbaa !11
  %161 = load i8**, i8*** %29, align 8, !tbaa !13
  store i8* %47, i8** %161, align 8, !tbaa !11
  %162 = load %struct.node***, %struct.node**** %20, align 8, !tbaa !26
  %163 = getelementptr inbounds %struct.node**, %struct.node*** %162, i64 1
  store %struct.node*** %163, %struct.node**** %20, align 8, !tbaa !19
  %164 = load %struct.node**, %struct.node*** %163, align 8, !tbaa !11
  store %struct.node** %164, %struct.node*** %22, align 8, !tbaa !20
  %165 = getelementptr inbounds %struct.node*, %struct.node** %164, i64 64
  store %struct.node** %165, %struct.node*** %19, align 8, !tbaa !21
  %166 = load i32, i32* %1, align 4, !tbaa !12
  br label %167

167:                                              ; preds = %157, %58
  %168 = phi i32 [ %45, %58 ], [ %166, %157 ]
  %169 = phi %struct.node** [ %61, %58 ], [ %164, %157 ]
  store %struct.node** %169, %struct.node*** %18, align 8, !tbaa !13
  %170 = icmp slt i32 %50, %168
  br i1 %170, label %44, label %32, !llvm.loop !27

171:                                              ; preds = %44, %155, %128
  %172 = landingpad { i8*, i32 }
          cleanup
  br label %415

173:                                              ; preds = %84, %126
  %174 = landingpad { i8*, i32 }
          cleanup
  br label %415

175:                                              ; preds = %276, %32
  %176 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %176) #15
  %177 = invoke nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i8* nonnull getelementptr inbounds ([35 x i8], [35 x i8]* @.str.3, i64 0, i64 0), i64 34)
          to label %279 unwind label %393

178:                                              ; preds = %42, %276
  %179 = phi i64 [ 0, %42 ], [ %277, %276 ]
  %180 = shl nuw nsw i64 %179, 1
  %181 = or i64 %180, 1
  %182 = trunc i64 %181 to i32
  %183 = icmp sgt i32 %33, %182
  br i1 %183, label %184, label %228

184:                                              ; preds = %178
  %185 = add nsw i64 %40, %181
  %186 = icmp sgt i64 %185, -1
  br i1 %186, label %187, label %193

187:                                              ; preds = %184
  %188 = icmp slt i64 %185, 64
  br i1 %188, label %189, label %191

189:                                              ; preds = %187
  %190 = getelementptr inbounds %struct.node*, %struct.node** %34, i64 %181
  br label %203

191:                                              ; preds = %187
  %192 = lshr i64 %185, 6
  br label %196

193:                                              ; preds = %184
  %194 = lshr i64 %185, 6
  %195 = or i64 %194, -288230376151711744
  br label %196

196:                                              ; preds = %193, %191
  %197 = phi i64 [ %192, %191 ], [ %195, %193 ]
  %198 = getelementptr inbounds %struct.node**, %struct.node*** %36, i64 %197
  %199 = load %struct.node**, %struct.node*** %198, align 8, !tbaa !11, !noalias !29
  %200 = mul i64 %197, -64
  %201 = add i64 %200, %185
  %202 = getelementptr inbounds %struct.node*, %struct.node** %199, i64 %201
  br label %203

203:                                              ; preds = %189, %196
  %204 = phi %struct.node** [ %190, %189 ], [ %202, %196 ]
  %205 = load %struct.node*, %struct.node** %204, align 8, !tbaa !11
  %206 = add nsw i64 %40, %179
  %207 = icmp sgt i64 %206, -1
  br i1 %207, label %208, label %214

208:                                              ; preds = %203
  %209 = icmp slt i64 %206, 64
  br i1 %209, label %210, label %212

210:                                              ; preds = %208
  %211 = getelementptr inbounds %struct.node*, %struct.node** %34, i64 %179
  br label %224

212:                                              ; preds = %208
  %213 = lshr i64 %206, 6
  br label %217

214:                                              ; preds = %203
  %215 = lshr i64 %206, 6
  %216 = or i64 %215, -288230376151711744
  br label %217

217:                                              ; preds = %214, %212
  %218 = phi i64 [ %213, %212 ], [ %216, %214 ]
  %219 = getelementptr inbounds %struct.node**, %struct.node*** %36, i64 %218
  %220 = load %struct.node**, %struct.node*** %219, align 8, !tbaa !11, !noalias !32
  %221 = mul i64 %218, -64
  %222 = add i64 %221, %206
  %223 = getelementptr inbounds %struct.node*, %struct.node** %220, i64 %222
  br label %224

224:                                              ; preds = %210, %217
  %225 = phi %struct.node** [ %211, %210 ], [ %223, %217 ]
  %226 = load %struct.node*, %struct.node** %225, align 8, !tbaa !11
  %227 = getelementptr inbounds %struct.node, %struct.node* %226, i64 0, i32 1
  store %struct.node* %205, %struct.node** %227, align 8, !tbaa !3
  br label %228

228:                                              ; preds = %224, %178
  %229 = add nuw nsw i64 %180, 2
  %230 = trunc i64 %229 to i32
  %231 = icmp sgt i32 %33, %230
  br i1 %231, label %232, label %276

232:                                              ; preds = %228
  %233 = add nsw i64 %40, %229
  %234 = icmp sgt i64 %233, -1
  br i1 %234, label %235, label %241

235:                                              ; preds = %232
  %236 = icmp slt i64 %233, 64
  br i1 %236, label %237, label %239

237:                                              ; preds = %235
  %238 = getelementptr inbounds %struct.node*, %struct.node** %34, i64 %229
  br label %251

239:                                              ; preds = %235
  %240 = lshr i64 %233, 6
  br label %244

241:                                              ; preds = %232
  %242 = lshr i64 %233, 6
  %243 = or i64 %242, -288230376151711744
  br label %244

244:                                              ; preds = %241, %239
  %245 = phi i64 [ %240, %239 ], [ %243, %241 ]
  %246 = getelementptr inbounds %struct.node**, %struct.node*** %36, i64 %245
  %247 = load %struct.node**, %struct.node*** %246, align 8, !tbaa !11, !noalias !35
  %248 = mul i64 %245, -64
  %249 = add i64 %248, %233
  %250 = getelementptr inbounds %struct.node*, %struct.node** %247, i64 %249
  br label %251

251:                                              ; preds = %237, %244
  %252 = phi %struct.node** [ %238, %237 ], [ %250, %244 ]
  %253 = load %struct.node*, %struct.node** %252, align 8, !tbaa !11
  %254 = add nsw i64 %40, %179
  %255 = icmp sgt i64 %254, -1
  br i1 %255, label %256, label %262

256:                                              ; preds = %251
  %257 = icmp slt i64 %254, 64
  br i1 %257, label %258, label %260

258:                                              ; preds = %256
  %259 = getelementptr inbounds %struct.node*, %struct.node** %34, i64 %179
  br label %272

260:                                              ; preds = %256
  %261 = lshr i64 %254, 6
  br label %265

262:                                              ; preds = %251
  %263 = lshr i64 %254, 6
  %264 = or i64 %263, -288230376151711744
  br label %265

265:                                              ; preds = %262, %260
  %266 = phi i64 [ %261, %260 ], [ %264, %262 ]
  %267 = getelementptr inbounds %struct.node**, %struct.node*** %36, i64 %266
  %268 = load %struct.node**, %struct.node*** %267, align 8, !tbaa !11, !noalias !38
  %269 = mul i64 %266, -64
  %270 = add i64 %269, %254
  %271 = getelementptr inbounds %struct.node*, %struct.node** %268, i64 %270
  br label %272

272:                                              ; preds = %258, %265
  %273 = phi %struct.node** [ %259, %258 ], [ %271, %265 ]
  %274 = load %struct.node*, %struct.node** %273, align 8, !tbaa !11
  %275 = getelementptr inbounds %struct.node, %struct.node* %274, i64 0, i32 2
  store %struct.node* %253, %struct.node** %275, align 8, !tbaa !10
  br label %276

276:                                              ; preds = %228, %272
  %277 = add nuw nsw i64 %179, 1
  %278 = icmp eq i64 %277, %43
  br i1 %278, label %175, label %178, !llvm.loop !41

279:                                              ; preds = %175
  %280 = invoke nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* nonnull align 4 dereferenceable(4) %3)
          to label %281 unwind label %393

281:                                              ; preds = %279
  %282 = load %struct.node**, %struct.node*** %24, align 8, !tbaa !22, !noalias !42
  %283 = load %struct.node**, %struct.node*** %28, align 8, !tbaa !20, !noalias !42
  %284 = load %struct.node***, %struct.node**** %21, align 8, !tbaa !19, !noalias !42
  %285 = ptrtoint %struct.node** %282 to i64
  %286 = ptrtoint %struct.node** %283 to i64
  %287 = sub i64 %285, %286
  %288 = ashr exact i64 %287, 3
  %289 = icmp sgt i64 %287, -8
  br i1 %289, label %290, label %294

290:                                              ; preds = %281
  %291 = icmp slt i64 %287, 512
  br i1 %291, label %304, label %292

292:                                              ; preds = %290
  %293 = lshr i64 %288, 6
  br label %297

294:                                              ; preds = %281
  %295 = lshr i64 %288, 6
  %296 = or i64 %295, -288230376151711744
  br label %297

297:                                              ; preds = %294, %292
  %298 = phi i64 [ %293, %292 ], [ %296, %294 ]
  %299 = getelementptr inbounds %struct.node**, %struct.node*** %284, i64 %298
  %300 = load %struct.node**, %struct.node*** %299, align 8, !tbaa !11, !noalias !42
  %301 = mul i64 %298, -64
  %302 = add i64 %301, %288
  %303 = getelementptr inbounds %struct.node*, %struct.node** %300, i64 %302
  br label %304

304:                                              ; preds = %290, %297
  %305 = phi %struct.node** [ %303, %297 ], [ %282, %290 ]
  %306 = load %struct.node*, %struct.node** %305, align 8, !tbaa !11
  %307 = load i32, i32* %3, align 4, !tbaa !12
  call void @_Z19swapSubtreesOfLevelP4nodei(%struct.node* %306, i32 %307)
  %308 = invoke nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i8* nonnull getelementptr inbounds ([35 x i8], [35 x i8]* @.str.4, i64 0, i64 0), i64 34)
          to label %309 unwind label %393

309:                                              ; preds = %304
  %310 = load %struct.node**, %struct.node*** %24, align 8, !tbaa !22, !noalias !45
  %311 = load %struct.node**, %struct.node*** %28, align 8, !tbaa !20, !noalias !45
  %312 = load %struct.node***, %struct.node**** %21, align 8, !tbaa !19, !noalias !45
  %313 = ptrtoint %struct.node** %310 to i64
  %314 = ptrtoint %struct.node** %311 to i64
  %315 = sub i64 %313, %314
  %316 = ashr exact i64 %315, 3
  %317 = icmp sgt i64 %315, -8
  br i1 %317, label %318, label %322

318:                                              ; preds = %309
  %319 = icmp slt i64 %315, 512
  br i1 %319, label %332, label %320

320:                                              ; preds = %318
  %321 = lshr i64 %316, 6
  br label %325

322:                                              ; preds = %309
  %323 = lshr i64 %316, 6
  %324 = or i64 %323, -288230376151711744
  br label %325

325:                                              ; preds = %322, %320
  %326 = phi i64 [ %321, %320 ], [ %324, %322 ]
  %327 = getelementptr inbounds %struct.node**, %struct.node*** %312, i64 %326
  %328 = load %struct.node**, %struct.node*** %327, align 8, !tbaa !11, !noalias !45
  %329 = mul i64 %326, -64
  %330 = add i64 %329, %316
  %331 = getelementptr inbounds %struct.node*, %struct.node** %328, i64 %330
  br label %332

332:                                              ; preds = %318, %325
  %333 = phi %struct.node** [ %331, %325 ], [ %310, %318 ]
  %334 = load %struct.node*, %struct.node** %333, align 8, !tbaa !11
  invoke void @_Z7InOrderP4node(%struct.node* %334)
          to label %335 unwind label %393

335:                                              ; preds = %332
  %336 = load i8*, i8** bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8**), align 8, !tbaa !48
  %337 = getelementptr i8, i8* %336, i64 -24
  %338 = bitcast i8* %337 to i64*
  %339 = load i64, i64* %338, align 8
  %340 = add nsw i64 %339, 240
  %341 = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8*), i64 %340
  %342 = bitcast i8* %341 to %"class.std::ctype"**
  %343 = load %"class.std::ctype"*, %"class.std::ctype"** %342, align 8, !tbaa !50
  %344 = icmp eq %"class.std::ctype"* %343, null
  br i1 %344, label %345, label %347

345:                                              ; preds = %335
  invoke void @_ZSt16__throw_bad_castv() #16
          to label %346 unwind label %393

346:                                              ; preds = %345
  unreachable

347:                                              ; preds = %335
  %348 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %343, i64 0, i32 8
  %349 = load i8, i8* %348, align 8, !tbaa !53
  %350 = icmp eq i8 %349, 0
  br i1 %350, label %354, label %351

351:                                              ; preds = %347
  %352 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %343, i64 0, i32 9, i64 10
  %353 = load i8, i8* %352, align 1, !tbaa !55
  br label %361

354:                                              ; preds = %347
  invoke void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull align 8 dereferenceable(570) %343)
          to label %355 unwind label %393

355:                                              ; preds = %354
  %356 = bitcast %"class.std::ctype"* %343 to i8 (%"class.std::ctype"*, i8)***
  %357 = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %356, align 8, !tbaa !48
  %358 = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %357, i64 6
  %359 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %358, align 8
  %360 = invoke signext i8 %359(%"class.std::ctype"* nonnull align 8 dereferenceable(570) %343, i8 signext 10)
          to label %361 unwind label %393

361:                                              ; preds = %355, %351
  %362 = phi i8 [ %353, %351 ], [ %360, %355 ]
  %363 = invoke nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i8 signext %362)
          to label %364 unwind label %393

364:                                              ; preds = %361
  %365 = invoke nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %363)
          to label %366 unwind label %393

366:                                              ; preds = %364
  %367 = load %struct.node**, %struct.node*** %24, align 8, !tbaa !22, !noalias !56
  %368 = load %struct.node**, %struct.node*** %18, align 8, !tbaa !22, !noalias !59
  %369 = icmp eq %struct.node** %367, %368
  br i1 %369, label %373, label %370

370:                                              ; preds = %366
  %371 = load %struct.node***, %struct.node**** %21, align 8, !tbaa !19, !noalias !56
  %372 = load %struct.node**, %struct.node*** %23, align 8, !tbaa !21, !noalias !56
  br label %395

373:                                              ; preds = %410, %366
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %176) #15
  %374 = load %struct.node***, %struct.node**** %26, align 8, !tbaa !24
  %375 = icmp eq %struct.node*** %374, null
  br i1 %375, label %392, label %376

376:                                              ; preds = %373
  %377 = bitcast %struct.node*** %374 to i8*
  %378 = load %struct.node***, %struct.node**** %21, align 8, !tbaa !25
  %379 = load %struct.node***, %struct.node**** %20, align 8, !tbaa !26
  %380 = getelementptr inbounds %struct.node**, %struct.node*** %379, i64 1
  %381 = icmp ult %struct.node*** %378, %380
  br i1 %381, label %382, label %390

382:                                              ; preds = %376, %382
  %383 = phi %struct.node*** [ %386, %382 ], [ %378, %376 ]
  %384 = bitcast %struct.node*** %383 to i8**
  %385 = load i8*, i8** %384, align 8, !tbaa !11
  call void @_ZdlPv(i8* %385) #15
  %386 = getelementptr inbounds %struct.node**, %struct.node*** %383, i64 1
  %387 = icmp ult %struct.node*** %383, %379
  br i1 %387, label %382, label %388, !llvm.loop !62

388:                                              ; preds = %382
  %389 = load i8*, i8** %27, align 8, !tbaa !24
  br label %390

390:                                              ; preds = %388, %376
  %391 = phi i8* [ %389, %388 ], [ %377, %376 ]
  call void @_ZdlPv(i8* %391) #15
  br label %392

392:                                              ; preds = %373, %390
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %16) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #15
  ret i32 0

393:                                              ; preds = %364, %361, %355, %354, %345, %304, %175, %332, %279
  %394 = landingpad { i8*, i32 }
          cleanup
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %176) #15
  br label %415

395:                                              ; preds = %370, %410
  %396 = phi %struct.node*** [ %413, %410 ], [ %371, %370 ]
  %397 = phi %struct.node** [ %412, %410 ], [ %372, %370 ]
  %398 = phi %struct.node** [ %411, %410 ], [ %367, %370 ]
  %399 = load %struct.node*, %struct.node** %398, align 8, !tbaa !11
  %400 = icmp eq %struct.node* %399, null
  br i1 %400, label %403, label %401

401:                                              ; preds = %395
  %402 = bitcast %struct.node* %399 to i8*
  call void @_ZdlPv(i8* %402) #19
  br label %403

403:                                              ; preds = %401, %395
  %404 = getelementptr inbounds %struct.node*, %struct.node** %398, i64 1
  %405 = icmp eq %struct.node** %404, %397
  br i1 %405, label %406, label %410

406:                                              ; preds = %403
  %407 = getelementptr inbounds %struct.node**, %struct.node*** %396, i64 1
  %408 = load %struct.node**, %struct.node*** %407, align 8, !tbaa !11
  %409 = getelementptr inbounds %struct.node*, %struct.node** %408, i64 64
  br label %410

410:                                              ; preds = %403, %406
  %411 = phi %struct.node** [ %408, %406 ], [ %404, %403 ]
  %412 = phi %struct.node** [ %409, %406 ], [ %397, %403 ]
  %413 = phi %struct.node*** [ %407, %406 ], [ %396, %403 ]
  %414 = icmp eq %struct.node** %411, %368
  br i1 %414, label %373, label %395

415:                                              ; preds = %171, %173, %393
  %416 = phi { i8*, i32 } [ %394, %393 ], [ %172, %171 ], [ %174, %173 ]
  call void @_ZNSt5dequeIP4nodeSaIS1_EED2Ev(%"class.std::deque"* nonnull align 8 dereferenceable(80) %2) #15
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %16) #15
  br label %417

417:                                              ; preds = %415, %13
  %418 = phi { i8*, i32 } [ %14, %13 ], [ %416, %415 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #15
  resume { i8*, i32 } %418
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #6

declare dso_local nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16), i32* nonnull align 4 dereferenceable(4)) local_unnamed_addr #0

declare dso_local i8* @__cxa_allocate_exception(i64) local_unnamed_addr

declare dso_local void @_ZNSt12length_errorC1EPKc(%"class.std::length_error"* nonnull align 8 dereferenceable(16), i8*) unnamed_addr #0

declare dso_local i32 @__gxx_personality_v0(...)

declare dso_local void @__cxa_free_exception(i8*) local_unnamed_addr

; Function Attrs: nounwind
declare dso_local void @_ZNSt12length_errorD1Ev(%"class.std::length_error"* nonnull align 8 dereferenceable(16)) unnamed_addr #1

declare dso_local void @__cxa_throw(i8*, i8*, i8*) local_unnamed_addr

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #8

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #6

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #9

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZNSt5dequeIP4nodeSaIS1_EED2Ev(%"class.std::deque"* nonnull align 8 dereferenceable(80) %0) unnamed_addr #10 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = getelementptr inbounds %"class.std::deque", %"class.std::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %struct.node***, %struct.node**** %2, align 8, !tbaa !24
  %4 = icmp eq %struct.node*** %3, null
  br i1 %4, label %24, label %5

5:                                                ; preds = %1
  %6 = bitcast %struct.node*** %3 to i8*
  %7 = getelementptr inbounds %"class.std::deque", %"class.std::deque"* %0, i64 0, i32 0, i32 0, i32 2, i32 3
  %8 = load %struct.node***, %struct.node**** %7, align 8, !tbaa !25
  %9 = getelementptr inbounds %"class.std::deque", %"class.std::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 3
  %10 = load %struct.node***, %struct.node**** %9, align 8, !tbaa !26
  %11 = getelementptr inbounds %struct.node**, %struct.node*** %10, i64 1
  %12 = icmp ult %struct.node*** %8, %11
  br i1 %12, label %13, label %22

13:                                               ; preds = %5, %13
  %14 = phi %struct.node*** [ %17, %13 ], [ %8, %5 ]
  %15 = bitcast %struct.node*** %14 to i8**
  %16 = load i8*, i8** %15, align 8, !tbaa !11
  tail call void @_ZdlPv(i8* %16) #15
  %17 = getelementptr inbounds %struct.node**, %struct.node*** %14, i64 1
  %18 = icmp ult %struct.node*** %14, %10
  br i1 %18, label %13, label %19, !llvm.loop !62

19:                                               ; preds = %13
  %20 = bitcast %"class.std::deque"* %0 to i8**
  %21 = load i8*, i8** %20, align 8, !tbaa !24
  br label %22

22:                                               ; preds = %19, %5
  %23 = phi i8* [ %21, %19 ], [ %6, %5 ]
  tail call void @_ZdlPv(i8* %23) #15
  br label %24

24:                                               ; preds = %1, %22
  ret void
}

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8), i8*, i64) local_unnamed_addr #0

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZNSt11_Deque_baseIP4nodeSaIS1_EE17_M_initialize_mapEm(%"class.std::_Deque_base"* nonnull align 8 dereferenceable(80) %0, i64 %1) local_unnamed_addr #11 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = lshr i64 %1, 6
  %4 = add nuw nsw i64 %3, 1
  %5 = icmp ugt i64 %3, 5
  %6 = select i1 %5, i64 %3, i64 5
  %7 = add nuw nsw i64 %6, 3
  %8 = getelementptr inbounds %"class.std::_Deque_base", %"class.std::_Deque_base"* %0, i64 0, i32 0, i32 1
  store i64 %7, i64* %8, align 8, !tbaa !23
  %9 = shl nuw nsw i64 %7, 3
  %10 = tail call noalias nonnull i8* @_Znwm(i64 %9) #18
  %11 = bitcast i8* %10 to %struct.node***
  %12 = bitcast %"class.std::_Deque_base"* %0 to i8**
  store i8* %10, i8** %12, align 8, !tbaa !24
  %13 = load i64, i64* %8, align 8, !tbaa !23
  %14 = sub i64 %13, %4
  %15 = lshr i64 %14, 1
  %16 = getelementptr inbounds %struct.node**, %struct.node*** %11, i64 %15
  %17 = getelementptr inbounds %struct.node**, %struct.node*** %16, i64 %4
  br label %18

18:                                               ; preds = %2, %21
  %19 = phi %struct.node*** [ %23, %21 ], [ %16, %2 ]
  %20 = invoke noalias nonnull i8* @_Znwm(i64 512) #18
          to label %21 unwind label %25

21:                                               ; preds = %18
  %22 = bitcast %struct.node*** %19 to i8**
  store i8* %20, i8** %22, align 8, !tbaa !11
  %23 = getelementptr inbounds %struct.node**, %struct.node*** %19, i64 1
  %24 = icmp ult %struct.node*** %23, %17
  br i1 %24, label %18, label %51, !llvm.loop !63

25:                                               ; preds = %18
  %26 = landingpad { i8*, i32 }
          catch i8* null
  %27 = extractvalue { i8*, i32 } %26, 0
  %28 = tail call i8* @__cxa_begin_catch(i8* %27) #15
  %29 = icmp ugt %struct.node*** %19, %16
  br i1 %29, label %30, label %36

30:                                               ; preds = %25, %30
  %31 = phi %struct.node*** [ %34, %30 ], [ %16, %25 ]
  %32 = bitcast %struct.node*** %31 to i8**
  %33 = load i8*, i8** %32, align 8, !tbaa !11
  tail call void @_ZdlPv(i8* %33) #15
  %34 = getelementptr inbounds %struct.node**, %struct.node*** %31, i64 1
  %35 = icmp ult %struct.node*** %34, %19
  br i1 %35, label %30, label %36, !llvm.loop !62

36:                                               ; preds = %30, %25
  invoke void @__cxa_rethrow() #16
          to label %42 unwind label %37

37:                                               ; preds = %36
  %38 = landingpad { i8*, i32 }
          catch i8* null
  invoke void @__cxa_end_catch()
          to label %43 unwind label %39

39:                                               ; preds = %37
  %40 = landingpad { i8*, i32 }
          catch i8* null
  %41 = extractvalue { i8*, i32 } %40, 0
  tail call void @__clang_call_terminate(i8* %41) #20
  unreachable

42:                                               ; preds = %36
  unreachable

43:                                               ; preds = %37
  %44 = extractvalue { i8*, i32 } %38, 0
  %45 = tail call i8* @__cxa_begin_catch(i8* %44) #15
  %46 = load i8*, i8** %12, align 8, !tbaa !24
  tail call void @_ZdlPv(i8* %46) #15
  %47 = bitcast %"class.std::_Deque_base"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %47, i8 0, i64 16, i1 false)
  invoke void @__cxa_rethrow() #16
          to label %70 unwind label %48

48:                                               ; preds = %43
  %49 = landingpad { i8*, i32 }
          cleanup
  invoke void @__cxa_end_catch()
          to label %50 unwind label %67

50:                                               ; preds = %48
  resume { i8*, i32 } %49

51:                                               ; preds = %21
  %52 = getelementptr inbounds %"class.std::_Deque_base", %"class.std::_Deque_base"* %0, i64 0, i32 0, i32 2, i32 3
  store %struct.node*** %16, %struct.node**** %52, align 8, !tbaa !19
  %53 = load %struct.node**, %struct.node*** %16, align 8, !tbaa !11
  %54 = getelementptr inbounds %"class.std::_Deque_base", %"class.std::_Deque_base"* %0, i64 0, i32 0, i32 2, i32 1
  store %struct.node** %53, %struct.node*** %54, align 8, !tbaa !20
  %55 = getelementptr inbounds %struct.node*, %struct.node** %53, i64 64
  %56 = getelementptr inbounds %"class.std::_Deque_base", %"class.std::_Deque_base"* %0, i64 0, i32 0, i32 2, i32 2
  store %struct.node** %55, %struct.node*** %56, align 8, !tbaa !21
  %57 = getelementptr inbounds %struct.node**, %struct.node*** %17, i64 -1
  %58 = getelementptr inbounds %"class.std::_Deque_base", %"class.std::_Deque_base"* %0, i64 0, i32 0, i32 3, i32 3
  store %struct.node*** %57, %struct.node**** %58, align 8, !tbaa !19
  %59 = load %struct.node**, %struct.node*** %57, align 8, !tbaa !11
  %60 = getelementptr inbounds %"class.std::_Deque_base", %"class.std::_Deque_base"* %0, i64 0, i32 0, i32 3, i32 1
  store %struct.node** %59, %struct.node*** %60, align 8, !tbaa !20
  %61 = getelementptr inbounds %struct.node*, %struct.node** %59, i64 64
  %62 = getelementptr inbounds %"class.std::_Deque_base", %"class.std::_Deque_base"* %0, i64 0, i32 0, i32 3, i32 2
  store %struct.node** %61, %struct.node*** %62, align 8, !tbaa !21
  %63 = getelementptr inbounds %"class.std::_Deque_base", %"class.std::_Deque_base"* %0, i64 0, i32 0, i32 2, i32 0
  store %struct.node** %53, %struct.node*** %63, align 8, !tbaa !64
  %64 = and i64 %1, 63
  %65 = getelementptr inbounds %struct.node*, %struct.node** %59, i64 %64
  %66 = getelementptr inbounds %"class.std::_Deque_base", %"class.std::_Deque_base"* %0, i64 0, i32 0, i32 3, i32 0
  store %struct.node** %65, %struct.node*** %66, align 8, !tbaa !13
  ret void

67:                                               ; preds = %48
  %68 = landingpad { i8*, i32 }
          catch i8* null
  %69 = extractvalue { i8*, i32 } %68, 0
  tail call void @__clang_call_terminate(i8* %69) #20
  unreachable

70:                                               ; preds = %43
  unreachable
}

declare dso_local i8* @__cxa_begin_catch(i8*) local_unnamed_addr

declare dso_local void @__cxa_rethrow() local_unnamed_addr

declare dso_local void @__cxa_end_catch() local_unnamed_addr

; Function Attrs: noinline noreturn nounwind
define linkonce_odr hidden void @__clang_call_terminate(i8* %0) local_unnamed_addr #12 comdat {
  %2 = tail call i8* @__cxa_begin_catch(i8* %0) #15
  tail call void @_ZSt9terminatev() #20
  unreachable
}

declare dso_local void @_ZSt9terminatev() local_unnamed_addr

; Function Attrs: noreturn
declare dso_local void @_ZSt17__throw_bad_allocv() local_unnamed_addr #13

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #13

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #14

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8), i8 signext) local_unnamed_addr #0

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8)) local_unnamed_addr #0

; Function Attrs: noreturn
declare dso_local void @_ZSt16__throw_bad_castv() local_unnamed_addr #13

declare dso_local void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull align 8 dereferenceable(570)) local_unnamed_addr #0

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_SwapNodes.cpp() #11 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #15
  ret void
}

attributes #0 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nofree nounwind }
attributes #3 = { mustprogress uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { mustprogress nofree nosync nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { norecurse uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #7 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #9 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #10 = { nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #11 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #12 = { noinline noreturn nounwind }
attributes #13 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #14 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #15 = { nounwind }
attributes #16 = { noreturn }
attributes #17 = { builtin allocsize(0) }
attributes #18 = { allocsize(0) }
attributes #19 = { builtin nounwind }
attributes #20 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !8, i64 8}
!4 = !{!"_ZTS4node", !5, i64 0, !8, i64 8, !8, i64 16}
!5 = !{!"int", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!"any pointer", !6, i64 0}
!9 = !{!4, !5, i64 0}
!10 = !{!4, !8, i64 16}
!11 = !{!8, !8, i64 0}
!12 = !{!5, !5, i64 0}
!13 = !{!14, !8, i64 48}
!14 = !{!"_ZTSSt11_Deque_baseIP4nodeSaIS1_EE", !15, i64 0}
!15 = !{!"_ZTSNSt11_Deque_baseIP4nodeSaIS1_EE11_Deque_implE", !8, i64 0, !16, i64 8, !17, i64 16, !17, i64 48}
!16 = !{!"long", !6, i64 0}
!17 = !{!"_ZTSSt15_Deque_iteratorIP4nodeRS1_PS1_E", !8, i64 0, !8, i64 8, !8, i64 16, !8, i64 24}
!18 = !{!14, !8, i64 64}
!19 = !{!17, !8, i64 24}
!20 = !{!17, !8, i64 8}
!21 = !{!17, !8, i64 16}
!22 = !{!17, !8, i64 0}
!23 = !{!14, !16, i64 8}
!24 = !{!14, !8, i64 0}
!25 = !{!14, !8, i64 40}
!26 = !{!14, !8, i64 72}
!27 = distinct !{!27, !28}
!28 = !{!"llvm.loop.mustprogress"}
!29 = !{!30}
!30 = distinct !{!30, !31, !"_ZNKSt15_Deque_iteratorIP4nodeRS1_PS1_EplEl: argument 0"}
!31 = distinct !{!31, !"_ZNKSt15_Deque_iteratorIP4nodeRS1_PS1_EplEl"}
!32 = !{!33}
!33 = distinct !{!33, !34, !"_ZNKSt15_Deque_iteratorIP4nodeRS1_PS1_EplEl: argument 0"}
!34 = distinct !{!34, !"_ZNKSt15_Deque_iteratorIP4nodeRS1_PS1_EplEl"}
!35 = !{!36}
!36 = distinct !{!36, !37, !"_ZNKSt15_Deque_iteratorIP4nodeRS1_PS1_EplEl: argument 0"}
!37 = distinct !{!37, !"_ZNKSt15_Deque_iteratorIP4nodeRS1_PS1_EplEl"}
!38 = !{!39}
!39 = distinct !{!39, !40, !"_ZNKSt15_Deque_iteratorIP4nodeRS1_PS1_EplEl: argument 0"}
!40 = distinct !{!40, !"_ZNKSt15_Deque_iteratorIP4nodeRS1_PS1_EplEl"}
!41 = distinct !{!41, !28}
!42 = !{!43}
!43 = distinct !{!43, !44, !"_ZNKSt15_Deque_iteratorIP4nodeRS1_PS1_EplEl: argument 0"}
!44 = distinct !{!44, !"_ZNKSt15_Deque_iteratorIP4nodeRS1_PS1_EplEl"}
!45 = !{!46}
!46 = distinct !{!46, !47, !"_ZNKSt15_Deque_iteratorIP4nodeRS1_PS1_EplEl: argument 0"}
!47 = distinct !{!47, !"_ZNKSt15_Deque_iteratorIP4nodeRS1_PS1_EplEl"}
!48 = !{!49, !49, i64 0}
!49 = !{!"vtable pointer", !7, i64 0}
!50 = !{!51, !8, i64 240}
!51 = !{!"_ZTSSt9basic_iosIcSt11char_traitsIcEE", !8, i64 216, !6, i64 224, !52, i64 225, !8, i64 232, !8, i64 240, !8, i64 248, !8, i64 256}
!52 = !{!"bool", !6, i64 0}
!53 = !{!54, !6, i64 56}
!54 = !{!"_ZTSSt5ctypeIcE", !8, i64 16, !52, i64 24, !8, i64 32, !8, i64 40, !8, i64 48, !6, i64 56, !6, i64 57, !6, i64 313, !6, i64 569}
!55 = !{!6, !6, i64 0}
!56 = !{!57}
!57 = distinct !{!57, !58, !"_ZNSt5dequeIP4nodeSaIS1_EE5beginEv: argument 0"}
!58 = distinct !{!58, !"_ZNSt5dequeIP4nodeSaIS1_EE5beginEv"}
!59 = !{!60}
!60 = distinct !{!60, !61, !"_ZNSt5dequeIP4nodeSaIS1_EE3endEv: argument 0"}
!61 = distinct !{!61, !"_ZNSt5dequeIP4nodeSaIS1_EE3endEv"}
!62 = distinct !{!62, !28}
!63 = distinct !{!63, !28}
!64 = !{!14, !8, i64 16}
