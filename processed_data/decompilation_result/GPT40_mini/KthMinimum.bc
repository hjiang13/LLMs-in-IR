; ModuleID = './KthMinimum.cpp'
source_filename = "./KthMinimum.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@a1 = dso_local global [262160 x i32] zeroinitializer, align 16
@a2 = dso_local global [262160 x i32] zeroinitializer, align 16
@n1 = dso_local global i32 0, align 4
@n2 = dso_local global i32 0, align 4
@d = dso_local local_unnamed_addr global i32 0, align 4
@.str = private unnamed_addr constant [26 x i8] c"../input_files/KthMinimum\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@stdin = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@_ZSt3cin = external dso_local global %"class.std::basic_istream", align 8
@_ZSt4cout = external dso_local global %"class.std::basic_ostream", align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_KthMinimum.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define dso_local void @_Z4addPPiii(i32* nocapture %0, i32 %1, i32 %2) local_unnamed_addr #3 {
  %4 = icmp slt i32 %1, 262145
  br i1 %4, label %5, label %10

5:                                                ; preds = %3
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds i32, i32* %0, i64 %6
  %8 = load i32, i32* %7, align 4, !tbaa !3
  %9 = add nsw i32 %8, %2
  store i32 %9, i32* %7, align 4, !tbaa !3
  br label %10

10:                                               ; preds = %5, %3
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define dso_local i32 @_Z6calcPiPix(i32* nocapture readonly %0, i64 %1) local_unnamed_addr #4 {
  %3 = icmp slt i64 %1, 1
  br i1 %3, label %100, label %4

4:                                                ; preds = %2
  %5 = icmp slt i64 %1, 262144
  %6 = select i1 %5, i64 %1, i64 262144
  %7 = icmp ult i64 %6, 8
  br i1 %7, label %89, label %8

8:                                                ; preds = %4
  %9 = and i64 %6, -8
  %10 = add i64 %9, -8
  %11 = lshr exact i64 %10, 3
  %12 = add nuw nsw i64 %11, 1
  %13 = and i64 %12, 3
  %14 = icmp ult i64 %10, 24
  br i1 %14, label %60, label %15

15:                                               ; preds = %8
  %16 = and i64 %12, 4611686018427387900
  br label %17

17:                                               ; preds = %17, %15
  %18 = phi i64 [ 0, %15 ], [ %57, %17 ]
  %19 = phi <4 x i32> [ zeroinitializer, %15 ], [ %55, %17 ]
  %20 = phi <4 x i32> [ zeroinitializer, %15 ], [ %56, %17 ]
  %21 = phi i64 [ %16, %15 ], [ %58, %17 ]
  %22 = getelementptr inbounds i32, i32* %0, i64 %18
  %23 = bitcast i32* %22 to <4 x i32>*
  %24 = load <4 x i32>, <4 x i32>* %23, align 4, !tbaa !3
  %25 = getelementptr inbounds i32, i32* %22, i64 4
  %26 = bitcast i32* %25 to <4 x i32>*
  %27 = load <4 x i32>, <4 x i32>* %26, align 4, !tbaa !3
  %28 = add <4 x i32> %24, %19
  %29 = add <4 x i32> %27, %20
  %30 = or i64 %18, 8
  %31 = getelementptr inbounds i32, i32* %0, i64 %30
  %32 = bitcast i32* %31 to <4 x i32>*
  %33 = load <4 x i32>, <4 x i32>* %32, align 4, !tbaa !3
  %34 = getelementptr inbounds i32, i32* %31, i64 4
  %35 = bitcast i32* %34 to <4 x i32>*
  %36 = load <4 x i32>, <4 x i32>* %35, align 4, !tbaa !3
  %37 = add <4 x i32> %33, %28
  %38 = add <4 x i32> %36, %29
  %39 = or i64 %18, 16
  %40 = getelementptr inbounds i32, i32* %0, i64 %39
  %41 = bitcast i32* %40 to <4 x i32>*
  %42 = load <4 x i32>, <4 x i32>* %41, align 4, !tbaa !3
  %43 = getelementptr inbounds i32, i32* %40, i64 4
  %44 = bitcast i32* %43 to <4 x i32>*
  %45 = load <4 x i32>, <4 x i32>* %44, align 4, !tbaa !3
  %46 = add <4 x i32> %42, %37
  %47 = add <4 x i32> %45, %38
  %48 = or i64 %18, 24
  %49 = getelementptr inbounds i32, i32* %0, i64 %48
  %50 = bitcast i32* %49 to <4 x i32>*
  %51 = load <4 x i32>, <4 x i32>* %50, align 4, !tbaa !3
  %52 = getelementptr inbounds i32, i32* %49, i64 4
  %53 = bitcast i32* %52 to <4 x i32>*
  %54 = load <4 x i32>, <4 x i32>* %53, align 4, !tbaa !3
  %55 = add <4 x i32> %51, %46
  %56 = add <4 x i32> %54, %47
  %57 = add nuw i64 %18, 32
  %58 = add i64 %21, -4
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %17, !llvm.loop !7

60:                                               ; preds = %17, %8
  %61 = phi <4 x i32> [ undef, %8 ], [ %55, %17 ]
  %62 = phi <4 x i32> [ undef, %8 ], [ %56, %17 ]
  %63 = phi i64 [ 0, %8 ], [ %57, %17 ]
  %64 = phi <4 x i32> [ zeroinitializer, %8 ], [ %55, %17 ]
  %65 = phi <4 x i32> [ zeroinitializer, %8 ], [ %56, %17 ]
  %66 = icmp eq i64 %13, 0
  br i1 %66, label %83, label %67

67:                                               ; preds = %60, %67
  %68 = phi i64 [ %80, %67 ], [ %63, %60 ]
  %69 = phi <4 x i32> [ %78, %67 ], [ %64, %60 ]
  %70 = phi <4 x i32> [ %79, %67 ], [ %65, %60 ]
  %71 = phi i64 [ %81, %67 ], [ %13, %60 ]
  %72 = getelementptr inbounds i32, i32* %0, i64 %68
  %73 = bitcast i32* %72 to <4 x i32>*
  %74 = load <4 x i32>, <4 x i32>* %73, align 4, !tbaa !3
  %75 = getelementptr inbounds i32, i32* %72, i64 4
  %76 = bitcast i32* %75 to <4 x i32>*
  %77 = load <4 x i32>, <4 x i32>* %76, align 4, !tbaa !3
  %78 = add <4 x i32> %74, %69
  %79 = add <4 x i32> %77, %70
  %80 = add nuw i64 %68, 8
  %81 = add i64 %71, -1
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %83, label %67, !llvm.loop !10

83:                                               ; preds = %67, %60
  %84 = phi <4 x i32> [ %61, %60 ], [ %78, %67 ]
  %85 = phi <4 x i32> [ %62, %60 ], [ %79, %67 ]
  %86 = add <4 x i32> %85, %84
  %87 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %86)
  %88 = icmp eq i64 %6, %9
  br i1 %88, label %100, label %89

89:                                               ; preds = %4, %83
  %90 = phi i64 [ 0, %4 ], [ %9, %83 ]
  %91 = phi i32 [ 0, %4 ], [ %87, %83 ]
  br label %92

92:                                               ; preds = %89, %92
  %93 = phi i64 [ %98, %92 ], [ %90, %89 ]
  %94 = phi i32 [ %97, %92 ], [ %91, %89 ]
  %95 = getelementptr inbounds i32, i32* %0, i64 %93
  %96 = load i32, i32* %95, align 4, !tbaa !3
  %97 = add nsw i32 %96, %94
  %98 = add nuw nsw i64 %93, 1
  %99 = icmp eq i64 %98, %6
  br i1 %99, label %100, label %92, !llvm.loop !12

100:                                              ; preds = %92, %83, %2
  %101 = phi i32 [ 0, %2 ], [ %87, %83 ], [ %97, %92 ]
  ret i32 %101
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable
define dso_local i64 @_Z6solveXx(i64 %0) local_unnamed_addr #5 {
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(1048640) bitcast ([262160 x i32]* @a1 to i8*), i8 0, i64 1048640, i1 false)
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(1048640) bitcast ([262160 x i32]* @a2 to i8*), i8 0, i64 1048640, i1 false)
  %2 = load i32, i32* @n2, align 4, !tbaa !3
  %3 = icmp slt i32 %2, 1
  br i1 %3, label %80, label %4

4:                                                ; preds = %1
  %5 = load i32, i32* @n1, align 4, !tbaa !3
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %4
  %8 = zext i32 %5 to i64
  br label %37

9:                                                ; preds = %56, %4
  %10 = load i32, i32* getelementptr inbounds ([262160 x i32], [262160 x i32]* @a1, i64 0, i64 0), align 16, !tbaa !3
  %11 = sext i32 %10 to i64
  %12 = insertelement <2 x i64> <i64 poison, i64 0>, i64 %11, i32 0
  br label %13

13:                                               ; preds = %82, %9
  %14 = phi i64 [ 0, %9 ], [ %102, %82 ]
  %15 = phi <2 x i64> [ %12, %9 ], [ %100, %82 ]
  %16 = phi <2 x i64> [ zeroinitializer, %9 ], [ %101, %82 ]
  %17 = or i64 %14, 1
  %18 = getelementptr inbounds [262160 x i32], [262160 x i32]* @a2, i64 0, i64 %17
  %19 = bitcast i32* %18 to <2 x i32>*
  %20 = load <2 x i32>, <2 x i32>* %19, align 4, !tbaa !3
  %21 = getelementptr inbounds i32, i32* %18, i64 2
  %22 = bitcast i32* %21 to <2 x i32>*
  %23 = load <2 x i32>, <2 x i32>* %22, align 4, !tbaa !3
  %24 = getelementptr inbounds [262160 x i32], [262160 x i32]* @a1, i64 0, i64 %17
  %25 = bitcast i32* %24 to <2 x i32>*
  %26 = load <2 x i32>, <2 x i32>* %25, align 4, !tbaa !3
  %27 = getelementptr inbounds i32, i32* %24, i64 2
  %28 = bitcast i32* %27 to <2 x i32>*
  %29 = load <2 x i32>, <2 x i32>* %28, align 4, !tbaa !3
  %30 = add nsw <2 x i32> %20, %26
  %31 = add nsw <2 x i32> %23, %29
  %32 = sext <2 x i32> %30 to <2 x i64>
  %33 = sext <2 x i32> %31 to <2 x i64>
  %34 = add <2 x i64> %15, %32
  %35 = add <2 x i64> %16, %33
  %36 = icmp eq i64 %14, 262152
  br i1 %36, label %62, label %82, !llvm.loop !14

37:                                               ; preds = %59, %7
  %38 = phi i32 [ 0, %7 ], [ %61, %59 ]
  %39 = phi i64 [ 0, %7 ], [ %57, %59 ]
  %40 = icmp slt i32 %38, 0
  br i1 %40, label %41, label %45

41:                                               ; preds = %37
  %42 = icmp sgt i32 %38, -262145
  br i1 %42, label %43, label %56

43:                                               ; preds = %41
  %44 = sub nsw i32 0, %38
  br label %49

45:                                               ; preds = %37
  %46 = icmp ne i32 %38, 0
  %47 = icmp slt i32 %38, 262145
  %48 = and i1 %46, %47
  br i1 %48, label %49, label %56

49:                                               ; preds = %45, %43
  %50 = phi i32 [ %44, %43 ], [ %38, %45 ]
  %51 = phi [262160 x i32]* [ @a1, %43 ], [ @a2, %45 ]
  %52 = zext i32 %50 to i64
  %53 = getelementptr inbounds [262160 x i32], [262160 x i32]* %51, i64 0, i64 %52
  %54 = load i32, i32* %53, align 4, !tbaa !3
  %55 = add nsw i32 %54, 1
  store i32 %55, i32* %53, align 4, !tbaa !3
  br label %56

56:                                               ; preds = %49, %45, %41
  %57 = add nuw nsw i64 %39, 1
  %58 = icmp eq i64 %57, %8
  br i1 %58, label %9, label %59, !llvm.loop !15

59:                                               ; preds = %56
  %60 = getelementptr inbounds [262160 x i32], [262160 x i32]* @a2, i64 0, i64 %57
  %61 = load i32, i32* %60, align 4, !tbaa !3
  br label %37

62:                                               ; preds = %13
  %63 = add <2 x i64> %35, %34
  %64 = call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %63)
  %65 = load i32, i32* getelementptr inbounds ([262160 x i32], [262160 x i32]* @a2, i64 0, i64 262157), align 4, !tbaa !3
  %66 = load i32, i32* getelementptr inbounds ([262160 x i32], [262160 x i32]* @a1, i64 0, i64 262157), align 4, !tbaa !3
  %67 = add nsw i32 %65, %66
  %68 = sext i32 %67 to i64
  %69 = add nsw i64 %64, %68
  %70 = load i32, i32* getelementptr inbounds ([262160 x i32], [262160 x i32]* @a2, i64 0, i64 262158), align 8, !tbaa !3
  %71 = load i32, i32* getelementptr inbounds ([262160 x i32], [262160 x i32]* @a1, i64 0, i64 262158), align 8, !tbaa !3
  %72 = add nsw i32 %70, %71
  %73 = sext i32 %72 to i64
  %74 = add nsw i64 %69, %73
  %75 = load i32, i32* getelementptr inbounds ([262160 x i32], [262160 x i32]* @a2, i64 0, i64 262159), align 4, !tbaa !3
  %76 = load i32, i32* getelementptr inbounds ([262160 x i32], [262160 x i32]* @a1, i64 0, i64 262159), align 4, !tbaa !3
  %77 = add nsw i32 %75, %76
  %78 = sext i32 %77 to i64
  %79 = add nsw i64 %74, %78
  br label %80

80:                                               ; preds = %62, %1
  %81 = phi i64 [ 0, %1 ], [ %79, %62 ]
  ret i64 %81

82:                                               ; preds = %13
  %83 = or i64 %14, 5
  %84 = getelementptr inbounds [262160 x i32], [262160 x i32]* @a2, i64 0, i64 %83
  %85 = bitcast i32* %84 to <2 x i32>*
  %86 = load <2 x i32>, <2 x i32>* %85, align 4, !tbaa !3
  %87 = getelementptr inbounds i32, i32* %84, i64 2
  %88 = bitcast i32* %87 to <2 x i32>*
  %89 = load <2 x i32>, <2 x i32>* %88, align 4, !tbaa !3
  %90 = getelementptr inbounds [262160 x i32], [262160 x i32]* @a1, i64 0, i64 %83
  %91 = bitcast i32* %90 to <2 x i32>*
  %92 = load <2 x i32>, <2 x i32>* %91, align 4, !tbaa !3
  %93 = getelementptr inbounds i32, i32* %90, i64 2
  %94 = bitcast i32* %93 to <2 x i32>*
  %95 = load <2 x i32>, <2 x i32>* %94, align 4, !tbaa !3
  %96 = add nsw <2 x i32> %86, %92
  %97 = add nsw <2 x i32> %89, %95
  %98 = sext <2 x i32> %96 to <2 x i64>
  %99 = sext <2 x i32> %97 to <2 x i64>
  %100 = add <2 x i64> %34, %98
  %101 = add <2 x i64> %35, %99
  %102 = add nuw nsw i64 %14, 8
  br label %13
}

; Function Attrs: mustprogress norecurse uwtable
define dso_local i32 @main() local_unnamed_addr #6 {
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !16
  %2 = tail call %struct._IO_FILE* @freopen(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), %struct._IO_FILE* %1)
  %3 = tail call zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext false)
  %4 = tail call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* nonnull align 4 dereferenceable(4) @n1)
  %5 = load i32, i32* @n1, align 4, !tbaa !3
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %12, label %7

7:                                                ; preds = %12, %0
  %8 = tail call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* nonnull align 4 dereferenceable(4) @n2)
  %9 = load i32, i32* @n2, align 4, !tbaa !3
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %132, label %11

11:                                               ; preds = %7
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(1048640) bitcast ([262160 x i32]* @a1 to i8*), i8 0, i64 1048640, i1 false) #11
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(1048640) bitcast ([262160 x i32]* @a2 to i8*), i8 0, i64 1048640, i1 false) #11
  br label %100

12:                                               ; preds = %0, %12
  %13 = phi i64 [ %16, %12 ], [ 0, %0 ]
  %14 = getelementptr inbounds [262160 x i32], [262160 x i32]* @a1, i64 0, i64 %13
  %15 = tail call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* nonnull align 4 dereferenceable(4) %14)
  %16 = add nuw nsw i64 %13, 1
  %17 = load i32, i32* @n1, align 4, !tbaa !3
  %18 = sext i32 %17 to i64
  %19 = icmp slt i64 %16, %18
  br i1 %19, label %12, label %7, !llvm.loop !18

20:                                               ; preds = %132
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(1048640) bitcast ([262160 x i32]* @a1 to i8*), i8 0, i64 1048640, i1 false) #11
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(1048640) bitcast ([262160 x i32]* @a2 to i8*), i8 0, i64 1048640, i1 false) #11
  %21 = icmp slt i32 %137, 1
  br i1 %21, label %100, label %22

22:                                               ; preds = %20
  %23 = load i32, i32* @n1, align 4, !tbaa !3
  %24 = icmp sgt i32 %23, 0
  br i1 %24, label %25, label %30

25:                                               ; preds = %22
  %26 = zext i32 %23 to i64
  br label %57

27:                                               ; preds = %76
  %28 = load i32, i32* getelementptr inbounds ([262160 x i32], [262160 x i32]* @a1, i64 0, i64 0), align 16, !tbaa !3
  %29 = sext i32 %28 to i64
  br label %30

30:                                               ; preds = %22, %27
  %31 = phi i64 [ %29, %27 ], [ 0, %22 ]
  %32 = insertelement <2 x i64> <i64 poison, i64 0>, i64 %31, i32 0
  br label %33

33:                                               ; preds = %140, %30
  %34 = phi i64 [ 0, %30 ], [ %160, %140 ]
  %35 = phi <2 x i64> [ %32, %30 ], [ %158, %140 ]
  %36 = phi <2 x i64> [ zeroinitializer, %30 ], [ %159, %140 ]
  %37 = or i64 %34, 1
  %38 = getelementptr inbounds [262160 x i32], [262160 x i32]* @a2, i64 0, i64 %37
  %39 = bitcast i32* %38 to <2 x i32>*
  %40 = load <2 x i32>, <2 x i32>* %39, align 4, !tbaa !3
  %41 = getelementptr inbounds i32, i32* %38, i64 2
  %42 = bitcast i32* %41 to <2 x i32>*
  %43 = load <2 x i32>, <2 x i32>* %42, align 4, !tbaa !3
  %44 = getelementptr inbounds [262160 x i32], [262160 x i32]* @a1, i64 0, i64 %37
  %45 = bitcast i32* %44 to <2 x i32>*
  %46 = load <2 x i32>, <2 x i32>* %45, align 4, !tbaa !3
  %47 = getelementptr inbounds i32, i32* %44, i64 2
  %48 = bitcast i32* %47 to <2 x i32>*
  %49 = load <2 x i32>, <2 x i32>* %48, align 4, !tbaa !3
  %50 = add nsw <2 x i32> %46, %40
  %51 = add nsw <2 x i32> %49, %43
  %52 = sext <2 x i32> %50 to <2 x i64>
  %53 = sext <2 x i32> %51 to <2 x i64>
  %54 = add <2 x i64> %35, %52
  %55 = add <2 x i64> %36, %53
  %56 = icmp eq i64 %34, 262152
  br i1 %56, label %82, label %140, !llvm.loop !19

57:                                               ; preds = %79, %25
  %58 = phi i32 [ 0, %25 ], [ %81, %79 ]
  %59 = phi i64 [ 0, %25 ], [ %77, %79 ]
  %60 = icmp slt i32 %58, 0
  br i1 %60, label %61, label %65

61:                                               ; preds = %57
  %62 = icmp sgt i32 %58, -262145
  br i1 %62, label %63, label %76

63:                                               ; preds = %61
  %64 = sub nsw i32 0, %58
  br label %69

65:                                               ; preds = %57
  %66 = icmp ne i32 %58, 0
  %67 = icmp slt i32 %58, 262145
  %68 = and i1 %66, %67
  br i1 %68, label %69, label %76

69:                                               ; preds = %65, %63
  %70 = phi i32 [ %64, %63 ], [ %58, %65 ]
  %71 = phi [262160 x i32]* [ @a1, %63 ], [ @a2, %65 ]
  %72 = zext i32 %70 to i64
  %73 = getelementptr inbounds [262160 x i32], [262160 x i32]* %71, i64 0, i64 %72
  %74 = load i32, i32* %73, align 4, !tbaa !3
  %75 = add nsw i32 %74, 1
  store i32 %75, i32* %73, align 4, !tbaa !3
  br label %76

76:                                               ; preds = %69, %65, %61
  %77 = add nuw nsw i64 %59, 1
  %78 = icmp eq i64 %77, %26
  br i1 %78, label %27, label %79, !llvm.loop !15

79:                                               ; preds = %76
  %80 = getelementptr inbounds [262160 x i32], [262160 x i32]* @a2, i64 0, i64 %77
  %81 = load i32, i32* %80, align 4, !tbaa !3
  br label %57

82:                                               ; preds = %33
  %83 = add <2 x i64> %55, %54
  %84 = call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %83)
  %85 = load i32, i32* getelementptr inbounds ([262160 x i32], [262160 x i32]* @a2, i64 0, i64 262157), align 4, !tbaa !3
  %86 = load i32, i32* getelementptr inbounds ([262160 x i32], [262160 x i32]* @a1, i64 0, i64 262157), align 4, !tbaa !3
  %87 = add nsw i32 %86, %85
  %88 = sext i32 %87 to i64
  %89 = add nsw i64 %84, %88
  %90 = load i32, i32* getelementptr inbounds ([262160 x i32], [262160 x i32]* @a2, i64 0, i64 262158), align 8, !tbaa !3
  %91 = load i32, i32* getelementptr inbounds ([262160 x i32], [262160 x i32]* @a1, i64 0, i64 262158), align 8, !tbaa !3
  %92 = add nsw i32 %91, %90
  %93 = sext i32 %92 to i64
  %94 = add nsw i64 %89, %93
  %95 = load i32, i32* getelementptr inbounds ([262160 x i32], [262160 x i32]* @a2, i64 0, i64 262159), align 4, !tbaa !3
  %96 = load i32, i32* getelementptr inbounds ([262160 x i32], [262160 x i32]* @a1, i64 0, i64 262159), align 4, !tbaa !3
  %97 = add nsw i32 %96, %95
  %98 = sext i32 %97 to i64
  %99 = add nsw i64 %94, %98
  br label %100

100:                                              ; preds = %82, %11, %20
  %101 = phi i64 [ 0, %20 ], [ 0, %11 ], [ %99, %82 ]
  %102 = tail call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo9_M_insertIxEERSoT_(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i64 %101)
  %103 = bitcast %"class.std::basic_ostream"* %102 to i8**
  %104 = load i8*, i8** %103, align 8, !tbaa !20
  %105 = getelementptr i8, i8* %104, i64 -24
  %106 = bitcast i8* %105 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = bitcast %"class.std::basic_ostream"* %102 to i8*
  %109 = add nsw i64 %107, 240
  %110 = getelementptr inbounds i8, i8* %108, i64 %109
  %111 = bitcast i8* %110 to %"class.std::ctype"**
  %112 = load %"class.std::ctype"*, %"class.std::ctype"** %111, align 8, !tbaa !22
  %113 = icmp eq %"class.std::ctype"* %112, null
  br i1 %113, label %114, label %115

114:                                              ; preds = %100
  tail call void @_ZSt16__throw_bad_castv() #12
  unreachable

115:                                              ; preds = %100
  %116 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %112, i64 0, i32 8
  %117 = load i8, i8* %116, align 8, !tbaa !25
  %118 = icmp eq i8 %117, 0
  br i1 %118, label %122, label %119

119:                                              ; preds = %115
  %120 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %112, i64 0, i32 9, i64 10
  %121 = load i8, i8* %120, align 1, !tbaa !27
  br label %128

122:                                              ; preds = %115
  tail call void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull align 8 dereferenceable(570) %112)
  %123 = bitcast %"class.std::ctype"* %112 to i8 (%"class.std::ctype"*, i8)***
  %124 = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %123, align 8, !tbaa !20
  %125 = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %124, i64 6
  %126 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %125, align 8
  %127 = tail call signext i8 %126(%"class.std::ctype"* nonnull align 8 dereferenceable(570) %112, i8 signext 10)
  br label %128

128:                                              ; preds = %119, %122
  %129 = phi i8 [ %121, %119 ], [ %127, %122 ]
  %130 = tail call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %102, i8 signext %129)
  %131 = tail call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %130)
  ret i32 0

132:                                              ; preds = %7, %132
  %133 = phi i64 [ %136, %132 ], [ 0, %7 ]
  %134 = getelementptr inbounds [262160 x i32], [262160 x i32]* @a2, i64 0, i64 %133
  %135 = tail call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* nonnull align 4 dereferenceable(4) %134)
  %136 = add nuw nsw i64 %133, 1
  %137 = load i32, i32* @n2, align 4, !tbaa !3
  %138 = sext i32 %137 to i64
  %139 = icmp slt i64 %136, %138
  br i1 %139, label %132, label %20, !llvm.loop !28

140:                                              ; preds = %33
  %141 = or i64 %34, 5
  %142 = getelementptr inbounds [262160 x i32], [262160 x i32]* @a2, i64 0, i64 %141
  %143 = bitcast i32* %142 to <2 x i32>*
  %144 = load <2 x i32>, <2 x i32>* %143, align 4, !tbaa !3
  %145 = getelementptr inbounds i32, i32* %142, i64 2
  %146 = bitcast i32* %145 to <2 x i32>*
  %147 = load <2 x i32>, <2 x i32>* %146, align 4, !tbaa !3
  %148 = getelementptr inbounds [262160 x i32], [262160 x i32]* @a1, i64 0, i64 %141
  %149 = bitcast i32* %148 to <2 x i32>*
  %150 = load <2 x i32>, <2 x i32>* %149, align 4, !tbaa !3
  %151 = getelementptr inbounds i32, i32* %148, i64 2
  %152 = bitcast i32* %151 to <2 x i32>*
  %153 = load <2 x i32>, <2 x i32>* %152, align 4, !tbaa !3
  %154 = add nsw <2 x i32> %150, %144
  %155 = add nsw <2 x i32> %153, %147
  %156 = sext <2 x i32> %154 to <2 x i64>
  %157 = sext <2 x i32> %155 to <2 x i64>
  %158 = add <2 x i64> %54, %156
  %159 = add <2 x i64> %55, %157
  %160 = add nuw nsw i64 %34, 8
  br label %33
}

declare dso_local %struct._IO_FILE* @freopen(i8*, i8*, %struct._IO_FILE*) local_unnamed_addr #0

declare dso_local zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext) local_unnamed_addr #0

declare dso_local nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16), i32* nonnull align 4 dereferenceable(4)) local_unnamed_addr #0

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo9_M_insertIxEERSoT_(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #0

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8), i8 signext) local_unnamed_addr #0

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8)) local_unnamed_addr #0

; Function Attrs: noreturn
declare dso_local void @_ZSt16__throw_bad_castv() local_unnamed_addr #7

declare dso_local void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull align 8 dereferenceable(570)) local_unnamed_addr #0

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_KthMinimum.cpp() #8 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #11
  ret void
}

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #9

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #10

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i64 @llvm.vector.reduce.add.v2i64(<2 x i64>) #10

attributes #0 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nofree nounwind }
attributes #3 = { mustprogress nofree norecurse nosync nounwind uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { mustprogress nofree nosync nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { mustprogress norecurse uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { argmemonly nofree nounwind willreturn writeonly }
attributes #10 = { nofree nosync nounwind readnone willreturn }
attributes #11 = { nounwind }
attributes #12 = { noreturn }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"int", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = distinct !{!7, !8, !9}
!8 = !{!"llvm.loop.mustprogress"}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !8, !13, !9}
!13 = !{!"llvm.loop.unroll.runtime.disable"}
!14 = distinct !{!14, !8, !9}
!15 = distinct !{!15, !8}
!16 = !{!17, !17, i64 0}
!17 = !{!"any pointer", !5, i64 0}
!18 = distinct !{!18, !8}
!19 = distinct !{!19, !8, !9}
!20 = !{!21, !21, i64 0}
!21 = !{!"vtable pointer", !6, i64 0}
!22 = !{!23, !17, i64 240}
!23 = !{!"_ZTSSt9basic_iosIcSt11char_traitsIcEE", !17, i64 216, !5, i64 224, !24, i64 225, !17, i64 232, !17, i64 240, !17, i64 248, !17, i64 256}
!24 = !{!"bool", !5, i64 0}
!25 = !{!26, !5, i64 56}
!26 = !{!"_ZTSSt5ctypeIcE", !17, i64 16, !24, i64 24, !17, i64 32, !17, i64 40, !17, i64 48, !5, i64 56, !5, i64 57, !5, i64 313, !5, i64 569}
!27 = !{!5, !5, i64 0}
!28 = distinct !{!28, !8}
