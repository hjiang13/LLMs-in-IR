; ModuleID = './StockPortfolio.cpp'
source_filename = "./StockPortfolio.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::set" = type { %"class.std::_Rb_tree" }
%"class.std::_Rb_tree" = type { %"struct.std::_Rb_tree<std::pair<long long, long long>, std::pair<long long, long long>, std::_Identity<std::pair<long long, long long>>, std::less<std::pair<long long, long long>>>::_Rb_tree_impl" }
%"struct.std::_Rb_tree<std::pair<long long, long long>, std::pair<long long, long long>, std::_Identity<std::pair<long long, long long>>, std::less<std::pair<long long, long long>>>::_Rb_tree_impl" = type { %"struct.std::_Rb_tree_key_compare", %"struct.std::_Rb_tree_header" }
%"struct.std::_Rb_tree_key_compare" = type { %"struct.std::less" }
%"struct.std::less" = type { i8 }
%"struct.std::_Rb_tree_header" = type { %"struct.std::_Rb_tree_node_base", i64 }
%"struct.std::_Rb_tree_node_base" = type { i32, %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* }
%"struct.std::_Rb_tree_node" = type { %"struct.std::_Rb_tree_node_base", %"struct.__gnu_cxx::__aligned_membuf" }
%"struct.__gnu_cxx::__aligned_membuf" = type { [16 x i8] }

$__clang_call_terminate = comdat any

$_ZNSt8_Rb_treeISt4pairIxxES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E = comdat any

@strength = dso_local global [200005 x i64] zeroinitializer, align 16
@tree = dso_local local_unnamed_addr global [600005 x i64] zeroinitializer, align 16
@lef = dso_local global [200005 x i64] zeroinitializer, align 16
@righ = dso_local global [200005 x i64] zeroinitializer, align 16
@dp = dso_local local_unnamed_addr global [200005 x i64] zeroinitializer, align 16
@.str = private unnamed_addr constant [5 x i8] c"%lld\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"%lld\0A\00", align 1

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn writeonly
define dso_local void @_Z6updatexxxxxx(i64 %0, i64 %1, i64 %2, i64 %3, i64 %4, i64 %5) local_unnamed_addr #0 {
  %7 = icmp sgt i64 %2, %3
  br i1 %7, label %8, label %10

8:                                                ; preds = %6
  %9 = icmp sgt i64 %1, %4
  br i1 %9, label %16, label %12

10:                                               ; preds = %6
  %11 = icmp slt i64 %0, %5
  br i1 %11, label %16, label %12

12:                                               ; preds = %10, %8
  %13 = icmp sgt i64 %0, 1152921504606846975
  %14 = select i1 %13, i64 %4, i64 %5
  %15 = getelementptr inbounds [600005 x i64], [600005 x i64]* @tree, i64 0, i64 %0
  store i64 %14, i64* %15, align 8, !tbaa !3
  br label %16

16:                                               ; preds = %10, %8, %12
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define dso_local i64 @_Z5queryxxxxx(i64 %0, i64 %1, i64 %2, i64 %3, i64 %4) local_unnamed_addr #2 {
  %6 = icmp sgt i64 %2, %3
  %7 = icmp sgt i64 %1, %4
  %8 = select i1 %6, i1 true, i1 %7
  br i1 %8, label %12, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds [600005 x i64], [600005 x i64]* @tree, i64 0, i64 %0
  %11 = load i64, i64* %10, align 8, !tbaa !3
  br label %12

12:                                               ; preds = %5, %9
  %13 = phi i64 [ %11, %9 ], [ 0, %5 ]
  ret i64 %13
}

; Function Attrs: norecurse nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = alloca i64, align 8
  %2 = alloca %"class.std::set", align 8
  %3 = bitcast i64* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #8
  store i64 0, i64* %1, align 8, !tbaa !3
  %4 = getelementptr inbounds %"class.std::set", %"class.std::set"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %4) #8
  %5 = getelementptr inbounds i8, i8* %4, i64 8
  %6 = bitcast i8* %5 to i32*
  store i32 0, i32* %6, align 8, !tbaa !7
  %7 = getelementptr inbounds i8, i8* %4, i64 16
  %8 = bitcast i8* %7 to %"struct.std::_Rb_tree_node_base"**
  store %"struct.std::_Rb_tree_node_base"* null, %"struct.std::_Rb_tree_node_base"** %8, align 8, !tbaa !13
  %9 = getelementptr inbounds i8, i8* %4, i64 24
  %10 = bitcast i8* %9 to i8**
  store i8* %5, i8** %10, align 8, !tbaa !14
  %11 = getelementptr inbounds i8, i8* %4, i64 32
  %12 = bitcast i8* %11 to i8**
  store i8* %5, i8** %12, align 8, !tbaa !15
  %13 = getelementptr inbounds i8, i8* %4, i64 40
  %14 = bitcast i8* %13 to i64*
  store i64 0, i64* %14, align 8, !tbaa !16
  %15 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64* nonnull %1)
  %16 = icmp eq i32 %15, 1
  %17 = load i64, i64* %1, align 8
  %18 = icmp sgt i64 %17, 0
  %19 = select i1 %16, i1 %18, i1 false
  br i1 %19, label %28, label %100

20:                                               ; preds = %92, %46, %26, %37, %72
  %21 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64* nonnull %1)
  %22 = icmp eq i32 %21, 1
  %23 = load i64, i64* %1, align 8
  %24 = icmp sgt i64 %23, 0
  %25 = select i1 %22, i1 %24, i1 false
  br i1 %25, label %35, label %100

26:                                               ; preds = %28
  %27 = icmp sgt i64 %33, 0
  br i1 %27, label %39, label %20

28:                                               ; preds = %0, %35
  %29 = phi i64 [ %36, %35 ], [ 0, %0 ]
  %30 = getelementptr inbounds [200005 x i64], [200005 x i64]* @strength, i64 0, i64 %29
  %31 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64* nonnull %30)
  %32 = add nuw nsw i64 %29, 1
  %33 = load i64, i64* %1, align 8, !tbaa !3
  %34 = icmp slt i64 %32, %33
  br i1 %34, label %35, label %26

35:                                               ; preds = %28, %20
  %36 = phi i64 [ %32, %28 ], [ 0, %20 ]
  br label %28, !llvm.loop !17

37:                                               ; preds = %39
  %38 = icmp sgt i64 %44, 0
  br i1 %38, label %55, label %20

39:                                               ; preds = %26, %39
  %40 = phi i64 [ %43, %39 ], [ 0, %26 ]
  %41 = getelementptr inbounds [200005 x i64], [200005 x i64]* @lef, i64 0, i64 %40
  %42 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64* nonnull %41)
  %43 = add nuw nsw i64 %40, 1
  %44 = load i64, i64* %1, align 8, !tbaa !3
  %45 = icmp slt i64 %43, %44
  br i1 %45, label %39, label %37, !llvm.loop !19

46:                                               ; preds = %55
  %47 = icmp slt i64 %60, 1
  %48 = load i64, i64* getelementptr inbounds ([600005 x i64], [600005 x i64]* @tree, i64 0, i64 1), align 8
  %49 = icmp sgt i64 %60, 0
  br i1 %49, label %50, label %20

50:                                               ; preds = %46
  %51 = and i64 %60, 1
  %52 = icmp eq i64 %60, 1
  br i1 %52, label %62, label %53

53:                                               ; preds = %50
  %54 = and i64 %60, -2
  br label %73

55:                                               ; preds = %37, %55
  %56 = phi i64 [ %59, %55 ], [ 0, %37 ]
  %57 = getelementptr inbounds [200005 x i64], [200005 x i64]* @righ, i64 0, i64 %56
  %58 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64* nonnull %57)
  %59 = add nuw nsw i64 %56, 1
  %60 = load i64, i64* %1, align 8, !tbaa !3
  %61 = icmp slt i64 %59, %60
  br i1 %61, label %55, label %46, !llvm.loop !20

62:                                               ; preds = %73, %50
  %63 = phi i64 [ 0, %50 ], [ %89, %73 ]
  %64 = icmp eq i64 %51, 0
  br i1 %64, label %72, label %65

65:                                               ; preds = %62
  %66 = getelementptr inbounds [200005 x i64], [200005 x i64]* @strength, i64 0, i64 %63
  %67 = load i64, i64* %66, align 8, !tbaa !3
  %68 = icmp sgt i64 %67, 1
  %69 = select i1 %68, i1 true, i1 %47
  %70 = select i1 %69, i64 0, i64 %48
  %71 = getelementptr inbounds [200005 x i64], [200005 x i64]* @dp, i64 0, i64 %63
  store i64 %70, i64* %71, align 8, !tbaa !3
  br label %72

72:                                               ; preds = %62, %65
  br i1 %49, label %92, label %20

73:                                               ; preds = %73, %53
  %74 = phi i64 [ 0, %53 ], [ %89, %73 ]
  %75 = phi i64 [ %54, %53 ], [ %90, %73 ]
  %76 = getelementptr inbounds [200005 x i64], [200005 x i64]* @strength, i64 0, i64 %74
  %77 = load i64, i64* %76, align 16, !tbaa !3
  %78 = icmp sgt i64 %77, 1
  %79 = select i1 %78, i1 true, i1 %47
  %80 = select i1 %79, i64 0, i64 %48
  %81 = getelementptr inbounds [200005 x i64], [200005 x i64]* @dp, i64 0, i64 %74
  store i64 %80, i64* %81, align 16, !tbaa !3
  %82 = or i64 %74, 1
  %83 = getelementptr inbounds [200005 x i64], [200005 x i64]* @strength, i64 0, i64 %82
  %84 = load i64, i64* %83, align 8, !tbaa !3
  %85 = icmp sgt i64 %84, 1
  %86 = select i1 %85, i1 true, i1 %47
  %87 = select i1 %86, i64 0, i64 %48
  %88 = getelementptr inbounds [200005 x i64], [200005 x i64]* @dp, i64 0, i64 %82
  store i64 %87, i64* %88, align 8, !tbaa !3
  %89 = add nuw nsw i64 %74, 2
  %90 = add i64 %75, -2
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %62, label %73, !llvm.loop !21

92:                                               ; preds = %72, %92
  %93 = phi i64 [ %97, %92 ], [ 0, %72 ]
  %94 = getelementptr inbounds [200005 x i64], [200005 x i64]* @dp, i64 0, i64 %93
  %95 = load i64, i64* %94, align 8, !tbaa !3
  %96 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i64 %95)
  %97 = add nuw nsw i64 %93, 1
  %98 = load i64, i64* %1, align 8, !tbaa !3
  %99 = icmp slt i64 %97, %98
  br i1 %99, label %92, label %20, !llvm.loop !22

100:                                              ; preds = %20, %0
  %101 = getelementptr inbounds %"class.std::set", %"class.std::set"* %2, i64 0, i32 0
  %102 = bitcast i8* %7 to %"struct.std::_Rb_tree_node"**
  %103 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %102, align 8, !tbaa !13
  invoke void @_ZNSt8_Rb_treeISt4pairIxxES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E(%"class.std::_Rb_tree"* nonnull align 8 dereferenceable(48) %101, %"struct.std::_Rb_tree_node"* %103)
          to label %107 unwind label %104

104:                                              ; preds = %100
  %105 = landingpad { i8*, i32 }
          catch i8* null
  %106 = extractvalue { i8*, i32 } %105, 0
  call void @__clang_call_terminate(i8* %106) #9
  unreachable

107:                                              ; preds = %100
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #8
  ret i32 0
}

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @__isoc99_scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #4

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #4

; Function Attrs: noinline noreturn nounwind
define linkonce_odr hidden void @__clang_call_terminate(i8* %0) local_unnamed_addr #5 comdat {
  %2 = tail call i8* @__cxa_begin_catch(i8* %0) #8
  tail call void @_ZSt9terminatev() #9
  unreachable
}

declare dso_local i8* @__cxa_begin_catch(i8*) local_unnamed_addr

declare dso_local void @_ZSt9terminatev() local_unnamed_addr

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_ZNSt8_Rb_treeISt4pairIxxES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E(%"class.std::_Rb_tree"* nonnull align 8 dereferenceable(48) %0, %"struct.std::_Rb_tree_node"* %1) local_unnamed_addr #6 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {
  %3 = icmp eq %"struct.std::_Rb_tree_node"* %1, null
  br i1 %3, label %14, label %4

4:                                                ; preds = %2, %4
  %5 = phi %"struct.std::_Rb_tree_node"* [ %11, %4 ], [ %1, %2 ]
  %6 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %5, i64 0, i32 0, i32 3
  %7 = bitcast %"struct.std::_Rb_tree_node_base"** %6 to %"struct.std::_Rb_tree_node"**
  %8 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %7, align 8, !tbaa !23
  tail call void @_ZNSt8_Rb_treeISt4pairIxxES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E(%"class.std::_Rb_tree"* nonnull align 8 dereferenceable(48) %0, %"struct.std::_Rb_tree_node"* %8)
  %9 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %5, i64 0, i32 0, i32 2
  %10 = bitcast %"struct.std::_Rb_tree_node_base"** %9 to %"struct.std::_Rb_tree_node"**
  %11 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %10, align 8, !tbaa !24
  %12 = bitcast %"struct.std::_Rb_tree_node"* %5 to i8*
  tail call void @_ZdlPv(i8* nonnull %12) #8
  %13 = icmp eq %"struct.std::_Rb_tree_node"* %11, null
  br i1 %13, label %14, label %4, !llvm.loop !25

14:                                               ; preds = %4, %2
  ret void
}

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #7

attributes #0 = { mustprogress nofree norecurse nosync nounwind uwtable willreturn writeonly "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #2 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { norecurse nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noinline noreturn nounwind }
attributes #6 = { mustprogress uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"long long", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !10, i64 0}
!8 = !{!"_ZTSSt15_Rb_tree_header", !9, i64 0, !12, i64 32}
!9 = !{!"_ZTSSt18_Rb_tree_node_base", !10, i64 0, !11, i64 8, !11, i64 16, !11, i64 24}
!10 = !{!"_ZTSSt14_Rb_tree_color", !5, i64 0}
!11 = !{!"any pointer", !5, i64 0}
!12 = !{!"long", !5, i64 0}
!13 = !{!8, !11, i64 8}
!14 = !{!8, !11, i64 16}
!15 = !{!8, !11, i64 24}
!16 = !{!8, !12, i64 32}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.mustprogress"}
!19 = distinct !{!19, !18}
!20 = distinct !{!20, !18}
!21 = distinct !{!21, !18}
!22 = distinct !{!22, !18}
!23 = !{!9, !11, i64 24}
!24 = !{!9, !11, i64 16}
!25 = distinct !{!25, !18}
