; ModuleID = './MatrixLand.cpp'
source_filename = "./MatrixLand.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@n = dso_local local_unnamed_addr global i32 0, align 4
@m = dso_local local_unnamed_addr global i32 0, align 4
@maxl = dso_local local_unnamed_addr global i32 0, align 4
@now = dso_local local_unnamed_addr global i32 0, align 4
@pre = dso_local local_unnamed_addr global i32 0, align 4
@f = dso_local local_unnamed_addr global [2 x [4000005 x i32]] zeroinitializer, align 16
@v = dso_local local_unnamed_addr global [4000005 x i32] zeroinitializer, align 16
@g = dso_local local_unnamed_addr global [4000005 x i32] zeroinitializer, align 16
@h = dso_local local_unnamed_addr global [4000005 x i32] zeroinitializer, align 16
@sum = dso_local local_unnamed_addr global [4000005 x i32] zeroinitializer, align 16
@.str = private unnamed_addr constant [29 x i8] c"../input_files/MatrixLand\\00\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@stdin = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@_ZSt4cout = external dso_local global %"class.std::basic_ostream", align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_MatrixLand.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: mustprogress norecurse uwtable
define dso_local i32 @main() local_unnamed_addr #3 {
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !3
  %2 = tail call %struct._IO_FILE* @freopen(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), %struct._IO_FILE* %1)
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !3
  %4 = tail call i32 @getc(%struct._IO_FILE* %3)
  %5 = icmp sgt i32 %4, 57
  br i1 %5, label %6, label %10

6:                                                ; preds = %0, %6
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !3
  %8 = tail call i32 @getc(%struct._IO_FILE* %7)
  %9 = icmp sgt i32 %8, 57
  br i1 %9, label %6, label %10, !llvm.loop !7

10:                                               ; preds = %6, %0
  %11 = phi i32 [ %4, %0 ], [ %8, %6 ]
  br label %12

12:                                               ; preds = %10, %12
  %13 = phi i32 [ %17, %12 ], [ 0, %10 ]
  %14 = phi i32 [ %19, %12 ], [ %11, %10 ]
  %15 = mul nsw i32 %13, 10
  %16 = add nsw i32 %14, -48
  %17 = add nsw i32 %16, %15
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !3
  %19 = tail call i32 @getc(%struct._IO_FILE* %18)
  %20 = icmp slt i32 %19, 58
  br i1 %20, label %12, label %21, !llvm.loop !9

21:                                               ; preds = %12
  store i32 %17, i32* @n, align 4, !tbaa !10
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !3
  %23 = tail call i32 @getc(%struct._IO_FILE* %22)
  %24 = icmp sgt i32 %23, 57
  br i1 %24, label %25, label %29

25:                                               ; preds = %21, %25
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !3
  %27 = tail call i32 @getc(%struct._IO_FILE* %26)
  %28 = icmp sgt i32 %27, 57
  br i1 %28, label %25, label %29, !llvm.loop !12

29:                                               ; preds = %25, %21
  %30 = phi i32 [ %23, %21 ], [ %27, %25 ]
  br label %31

31:                                               ; preds = %29, %31
  %32 = phi i32 [ %36, %31 ], [ 0, %29 ]
  %33 = phi i32 [ %38, %31 ], [ %30, %29 ]
  %34 = mul nsw i32 %32, 10
  %35 = add nsw i32 %33, -48
  %36 = add nsw i32 %35, %34
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !3
  %38 = tail call i32 @getc(%struct._IO_FILE* %37)
  %39 = icmp slt i32 %38, 58
  br i1 %39, label %31, label %40, !llvm.loop !13

40:                                               ; preds = %31
  store i32 %36, i32* @m, align 4, !tbaa !10
  store i32 0, i32* @now, align 4, !tbaa !10
  store i32 1, i32* @pre, align 4, !tbaa !10
  %41 = load i32, i32* @n, align 4, !tbaa !10
  %42 = icmp slt i32 %41, 1
  br i1 %42, label %278, label %120

43:                                               ; preds = %140
  %44 = icmp sgt i32 %149, 0
  br i1 %44, label %45, label %235

45:                                               ; preds = %43
  %46 = zext i32 %149 to i64
  %47 = icmp ult i32 %149, 4
  br i1 %47, label %118, label %48

48:                                               ; preds = %45
  %49 = and i64 %46, 4294967292
  %50 = add nsw i64 %49, -4
  %51 = lshr exact i64 %50, 2
  %52 = add nuw nsw i64 %51, 1
  %53 = and i64 %52, 1
  %54 = icmp eq i64 %50, 0
  br i1 %54, label %96, label %55

55:                                               ; preds = %48
  %56 = and i64 %52, 9223372036854775806
  br label %57

57:                                               ; preds = %57, %55
  %58 = phi i64 [ 0, %55 ], [ %93, %57 ]
  %59 = phi i64 [ %56, %55 ], [ %94, %57 ]
  %60 = getelementptr inbounds [4000005 x i32], [4000005 x i32]* @sum, i64 0, i64 %58
  %61 = getelementptr inbounds [4000005 x i32], [4000005 x i32]* @v, i64 0, i64 %58
  %62 = bitcast i32* %61 to <4 x i32>*
  %63 = load <4 x i32>, <4 x i32>* %62, align 16, !tbaa !10
  %64 = getelementptr inbounds [4000005 x i32], [4000005 x i32]* @h, i64 0, i64 %58
  %65 = getelementptr inbounds [4000005 x i32], [4000005 x i32]* @g, i64 0, i64 %58
  %66 = bitcast i32* %64 to <4 x i32>*
  %67 = load <4 x i32>, <4 x i32>* %66, align 16, !tbaa !10
  %68 = bitcast i32* %65 to <4 x i32>*
  %69 = load <4 x i32>, <4 x i32>* %68, align 16, !tbaa !10
  %70 = mul <4 x i32> %63, <i32 5, i32 5, i32 5, i32 5>
  %71 = add <4 x i32> %69, %70
  %72 = add <4 x i32> %67, %70
  %73 = bitcast i32* %64 to <4 x i32>*
  store <4 x i32> %72, <4 x i32>* %73, align 16, !tbaa !10
  %74 = bitcast i32* %65 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %74, align 16, !tbaa !10
  %75 = bitcast i32* %60 to <4 x i32>*
  store <4 x i32> %70, <4 x i32>* %75, align 16, !tbaa !10
  %76 = or i64 %58, 4
  %77 = getelementptr inbounds [4000005 x i32], [4000005 x i32]* @sum, i64 0, i64 %76
  %78 = getelementptr inbounds [4000005 x i32], [4000005 x i32]* @v, i64 0, i64 %76
  %79 = bitcast i32* %78 to <4 x i32>*
  %80 = load <4 x i32>, <4 x i32>* %79, align 16, !tbaa !10
  %81 = getelementptr inbounds [4000005 x i32], [4000005 x i32]* @h, i64 0, i64 %76
  %82 = getelementptr inbounds [4000005 x i32], [4000005 x i32]* @g, i64 0, i64 %76
  %83 = bitcast i32* %81 to <4 x i32>*
  %84 = load <4 x i32>, <4 x i32>* %83, align 16, !tbaa !10
  %85 = bitcast i32* %82 to <4 x i32>*
  %86 = load <4 x i32>, <4 x i32>* %85, align 16, !tbaa !10
  %87 = mul <4 x i32> %80, <i32 5, i32 5, i32 5, i32 5>
  %88 = add <4 x i32> %86, %87
  %89 = add <4 x i32> %84, %87
  %90 = bitcast i32* %81 to <4 x i32>*
  store <4 x i32> %89, <4 x i32>* %90, align 16, !tbaa !10
  %91 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %88, <4 x i32>* %91, align 16, !tbaa !10
  %92 = bitcast i32* %77 to <4 x i32>*
  store <4 x i32> %87, <4 x i32>* %92, align 16, !tbaa !10
  %93 = add nuw i64 %58, 8
  %94 = add i64 %59, -2
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %96, label %57, !llvm.loop !14

96:                                               ; preds = %57, %48
  %97 = phi i64 [ 0, %48 ], [ %93, %57 ]
  %98 = icmp eq i64 %53, 0
  br i1 %98, label %116, label %99

99:                                               ; preds = %96
  %100 = getelementptr inbounds [4000005 x i32], [4000005 x i32]* @sum, i64 0, i64 %97
  %101 = getelementptr inbounds [4000005 x i32], [4000005 x i32]* @v, i64 0, i64 %97
  %102 = bitcast i32* %101 to <4 x i32>*
  %103 = load <4 x i32>, <4 x i32>* %102, align 16, !tbaa !10
  %104 = getelementptr inbounds [4000005 x i32], [4000005 x i32]* @h, i64 0, i64 %97
  %105 = getelementptr inbounds [4000005 x i32], [4000005 x i32]* @g, i64 0, i64 %97
  %106 = bitcast i32* %104 to <4 x i32>*
  %107 = load <4 x i32>, <4 x i32>* %106, align 16, !tbaa !10
  %108 = bitcast i32* %105 to <4 x i32>*
  %109 = load <4 x i32>, <4 x i32>* %108, align 16, !tbaa !10
  %110 = mul <4 x i32> %103, <i32 5, i32 5, i32 5, i32 5>
  %111 = add <4 x i32> %109, %110
  %112 = add <4 x i32> %107, %110
  %113 = bitcast i32* %104 to <4 x i32>*
  store <4 x i32> %112, <4 x i32>* %113, align 16, !tbaa !10
  %114 = bitcast i32* %105 to <4 x i32>*
  store <4 x i32> %111, <4 x i32>* %114, align 16, !tbaa !10
  %115 = bitcast i32* %100 to <4 x i32>*
  store <4 x i32> %110, <4 x i32>* %115, align 16, !tbaa !10
  br label %116

116:                                              ; preds = %96, %99
  %117 = icmp eq i64 %49, %46
  br i1 %117, label %151, label %118

118:                                              ; preds = %45, %116
  %119 = phi i64 [ 0, %45 ], [ %49, %116 ]
  br label %221

120:                                              ; preds = %40, %140
  %121 = phi i32 [ %148, %140 ], [ 0, %40 ]
  %122 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !3
  %123 = tail call i32 @getc(%struct._IO_FILE* %122)
  %124 = icmp sgt i32 %123, 57
  br i1 %124, label %125, label %129

125:                                              ; preds = %120, %125
  %126 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !3
  %127 = tail call i32 @getc(%struct._IO_FILE* %126)
  %128 = icmp sgt i32 %127, 57
  br i1 %128, label %125, label %129, !llvm.loop !16

129:                                              ; preds = %125, %120
  %130 = phi i32 [ %123, %120 ], [ %127, %125 ]
  br label %131

131:                                              ; preds = %129, %131
  %132 = phi i32 [ %136, %131 ], [ 0, %129 ]
  %133 = phi i32 [ %138, %131 ], [ %130, %129 ]
  %134 = mul nsw i32 %132, 10
  %135 = add nsw i32 %133, -48
  %136 = add nsw i32 %135, %134
  %137 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !3
  %138 = tail call i32 @getc(%struct._IO_FILE* %137)
  %139 = icmp slt i32 %138, 58
  br i1 %139, label %131, label %140, !llvm.loop !17

140:                                              ; preds = %131
  %141 = load i32, i32* @now, align 4, !tbaa !10
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds [4000005 x i32], [4000005 x i32]* @v, i64 0, i64 %142
  store i32 %136, i32* %143, align 4, !tbaa !10
  %144 = add nsw i32 %141, 1
  %145 = load i32, i32* @m, align 4, !tbaa !10
  %146 = icmp slt i32 %144, %145
  %147 = select i1 %146, i32 %144, i32 0
  store i32 %147, i32* @now, align 4
  %148 = add nuw nsw i32 %121, 1
  %149 = load i32, i32* @n, align 4, !tbaa !10
  %150 = icmp slt i32 %148, %149
  br i1 %150, label %120, label %43, !llvm.loop !18

151:                                              ; preds = %221, %116
  store i32 -1000000007, i32* @maxl, align 4, !tbaa !10
  br i1 %44, label %152, label %237

152:                                              ; preds = %151
  %153 = zext i32 %149 to i64
  %154 = icmp ult i32 %149, 8
  br i1 %154, label %218, label %155

155:                                              ; preds = %152
  %156 = and i64 %46, 4294967288
  %157 = add nsw i64 %156, -8
  %158 = lshr exact i64 %157, 3
  %159 = add nuw nsw i64 %158, 1
  %160 = and i64 %159, 1
  %161 = icmp eq i64 %157, 0
  br i1 %161, label %193, label %162

162:                                              ; preds = %155
  %163 = and i64 %159, 4611686018427387902
  br label %164

164:                                              ; preds = %164, %162
  %165 = phi i64 [ 0, %162 ], [ %190, %164 ]
  %166 = phi <4 x i32> [ <i32 -1000000007, i32 -1000000007, i32 -1000000007, i32 -1000000007>, %162 ], [ %188, %164 ]
  %167 = phi <4 x i32> [ <i32 -1000000007, i32 -1000000007, i32 -1000000007, i32 -1000000007>, %162 ], [ %189, %164 ]
  %168 = phi i64 [ %163, %162 ], [ %191, %164 ]
  %169 = getelementptr inbounds [4000005 x i32], [4000005 x i32]* @sum, i64 0, i64 %165
  %170 = bitcast i32* %169 to <4 x i32>*
  %171 = load <4 x i32>, <4 x i32>* %170, align 16
  %172 = getelementptr inbounds i32, i32* %169, i64 4
  %173 = bitcast i32* %172 to <4 x i32>*
  %174 = load <4 x i32>, <4 x i32>* %173, align 16
  %175 = icmp slt <4 x i32> %166, %171
  %176 = icmp slt <4 x i32> %167, %174
  %177 = select <4 x i1> %175, <4 x i32> %171, <4 x i32> %166
  %178 = select <4 x i1> %176, <4 x i32> %174, <4 x i32> %167
  %179 = or i64 %165, 8
  %180 = getelementptr inbounds [4000005 x i32], [4000005 x i32]* @sum, i64 0, i64 %179
  %181 = bitcast i32* %180 to <4 x i32>*
  %182 = load <4 x i32>, <4 x i32>* %181, align 16
  %183 = getelementptr inbounds i32, i32* %180, i64 4
  %184 = bitcast i32* %183 to <4 x i32>*
  %185 = load <4 x i32>, <4 x i32>* %184, align 16
  %186 = icmp slt <4 x i32> %177, %182
  %187 = icmp slt <4 x i32> %178, %185
  %188 = select <4 x i1> %186, <4 x i32> %182, <4 x i32> %177
  %189 = select <4 x i1> %187, <4 x i32> %185, <4 x i32> %178
  %190 = add nuw i64 %165, 16
  %191 = add i64 %168, -2
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %193, label %164, !llvm.loop !19

193:                                              ; preds = %164, %155
  %194 = phi <4 x i32> [ undef, %155 ], [ %188, %164 ]
  %195 = phi <4 x i32> [ undef, %155 ], [ %189, %164 ]
  %196 = phi i64 [ 0, %155 ], [ %190, %164 ]
  %197 = phi <4 x i32> [ <i32 -1000000007, i32 -1000000007, i32 -1000000007, i32 -1000000007>, %155 ], [ %188, %164 ]
  %198 = phi <4 x i32> [ <i32 -1000000007, i32 -1000000007, i32 -1000000007, i32 -1000000007>, %155 ], [ %189, %164 ]
  %199 = icmp eq i64 %160, 0
  br i1 %199, label %211, label %200

200:                                              ; preds = %193
  %201 = getelementptr inbounds [4000005 x i32], [4000005 x i32]* @sum, i64 0, i64 %196
  %202 = bitcast i32* %201 to <4 x i32>*
  %203 = load <4 x i32>, <4 x i32>* %202, align 16
  %204 = getelementptr inbounds i32, i32* %201, i64 4
  %205 = bitcast i32* %204 to <4 x i32>*
  %206 = load <4 x i32>, <4 x i32>* %205, align 16
  %207 = icmp slt <4 x i32> %198, %206
  %208 = select <4 x i1> %207, <4 x i32> %206, <4 x i32> %198
  %209 = icmp slt <4 x i32> %197, %203
  %210 = select <4 x i1> %209, <4 x i32> %203, <4 x i32> %197
  br label %211

211:                                              ; preds = %193, %200
  %212 = phi <4 x i32> [ %194, %193 ], [ %210, %200 ]
  %213 = phi <4 x i32> [ %195, %193 ], [ %208, %200 ]
  %214 = icmp sgt <4 x i32> %212, %213
  %215 = select <4 x i1> %214, <4 x i32> %212, <4 x i32> %213
  %216 = call i32 @llvm.vector.reduce.smax.v4i32(<4 x i32> %215)
  %217 = icmp eq i64 %156, %46
  br i1 %217, label %235, label %218

218:                                              ; preds = %152, %211
  %219 = phi i64 [ 0, %152 ], [ %156, %211 ]
  %220 = phi i32 [ -1000000007, %152 ], [ %216, %211 ]
  br label %269

221:                                              ; preds = %118, %221
  %222 = phi i64 [ %233, %221 ], [ %119, %118 ]
  %223 = getelementptr inbounds [4000005 x i32], [4000005 x i32]* @sum, i64 0, i64 %222
  %224 = getelementptr inbounds [4000005 x i32], [4000005 x i32]* @v, i64 0, i64 %222
  %225 = load i32, i32* %224, align 4, !tbaa !10
  %226 = getelementptr inbounds [4000005 x i32], [4000005 x i32]* @h, i64 0, i64 %222
  %227 = getelementptr inbounds [4000005 x i32], [4000005 x i32]* @g, i64 0, i64 %222
  %228 = load i32, i32* %226, align 4, !tbaa !10
  %229 = load i32, i32* %227, align 4, !tbaa !10
  %230 = mul i32 %225, 5
  %231 = add i32 %229, %230
  %232 = add i32 %228, %230
  store i32 %232, i32* %226, align 4, !tbaa !10
  store i32 %231, i32* %227, align 4, !tbaa !10
  store i32 %230, i32* %223, align 4, !tbaa !10
  %233 = add nuw nsw i64 %222, 1
  %234 = icmp eq i64 %233, %46
  br i1 %234, label %151, label %221, !llvm.loop !20

235:                                              ; preds = %269, %211, %43
  %236 = phi i32 [ -1000000007, %43 ], [ %216, %211 ], [ %275, %269 ]
  store i32 %236, i32* @maxl, align 4
  br label %237

237:                                              ; preds = %235, %151
  %238 = phi i32 [ -1000000007, %151 ], [ %236, %235 ]
  %239 = tail call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 %238)
  %240 = bitcast %"class.std::basic_ostream"* %239 to i8**
  %241 = load i8*, i8** %240, align 8, !tbaa !22
  %242 = getelementptr i8, i8* %241, i64 -24
  %243 = bitcast i8* %242 to i64*
  %244 = load i64, i64* %243, align 8
  %245 = bitcast %"class.std::basic_ostream"* %239 to i8*
  %246 = add nsw i64 %244, 240
  %247 = getelementptr inbounds i8, i8* %245, i64 %246
  %248 = bitcast i8* %247 to %"class.std::ctype"**
  %249 = load %"class.std::ctype"*, %"class.std::ctype"** %248, align 8, !tbaa !24
  %250 = icmp eq %"class.std::ctype"* %249, null
  br i1 %250, label %251, label %252

251:                                              ; preds = %237
  tail call void @_ZSt16__throw_bad_castv() #8
  unreachable

252:                                              ; preds = %237
  %253 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %249, i64 0, i32 8
  %254 = load i8, i8* %253, align 8, !tbaa !27
  %255 = icmp eq i8 %254, 0
  br i1 %255, label %259, label %256

256:                                              ; preds = %252
  %257 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %249, i64 0, i32 9, i64 10
  %258 = load i8, i8* %257, align 1, !tbaa !29
  br label %265

259:                                              ; preds = %252
  tail call void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull align 8 dereferenceable(570) %249)
  %260 = bitcast %"class.std::ctype"* %249 to i8 (%"class.std::ctype"*, i8)***
  %261 = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %260, align 8, !tbaa !22
  %262 = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %261, i64 6
  %263 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %262, align 8
  %264 = tail call signext i8 %263(%"class.std::ctype"* nonnull align 8 dereferenceable(570) %249, i8 signext 10)
  br label %265

265:                                              ; preds = %256, %259
  %266 = phi i8 [ %258, %256 ], [ %264, %259 ]
  %267 = tail call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %239, i8 signext %266)
  %268 = tail call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %267)
  br label %278

269:                                              ; preds = %218, %269
  %270 = phi i64 [ %276, %269 ], [ %219, %218 ]
  %271 = phi i32 [ %275, %269 ], [ %220, %218 ]
  %272 = getelementptr inbounds [4000005 x i32], [4000005 x i32]* @sum, i64 0, i64 %270
  %273 = load i32, i32* %272, align 4
  %274 = icmp slt i32 %271, %273
  %275 = select i1 %274, i32 %273, i32 %271
  %276 = add nuw nsw i64 %270, 1
  %277 = icmp eq i64 %276, %153
  br i1 %277, label %235, label %269, !llvm.loop !30

278:                                              ; preds = %40, %265
  ret i32 0
}

declare dso_local %struct._IO_FILE* @freopen(i8*, i8*, %struct._IO_FILE*) local_unnamed_addr #0

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8), i32) local_unnamed_addr #0

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @getc(%struct._IO_FILE* nocapture noundef) local_unnamed_addr #4

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8), i8 signext) local_unnamed_addr #0

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8)) local_unnamed_addr #0

; Function Attrs: noreturn
declare dso_local void @_ZSt16__throw_bad_castv() local_unnamed_addr #5

declare dso_local void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull align 8 dereferenceable(570)) local_unnamed_addr #0

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_MatrixLand.cpp() #6 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #9
  ret void
}

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i32 @llvm.vector.reduce.smax.v4i32(<4 x i32>) #7

attributes #0 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nofree nounwind }
attributes #3 = { mustprogress norecurse uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nofree nosync nounwind readnone willreturn }
attributes #8 = { noreturn }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.mustprogress"}
!9 = distinct !{!9, !8}
!10 = !{!11, !11, i64 0}
!11 = !{!"int", !5, i64 0}
!12 = distinct !{!12, !8}
!13 = distinct !{!13, !8}
!14 = distinct !{!14, !8, !15}
!15 = !{!"llvm.loop.isvectorized", i32 1}
!16 = distinct !{!16, !8}
!17 = distinct !{!17, !8}
!18 = distinct !{!18, !8}
!19 = distinct !{!19, !8, !15}
!20 = distinct !{!20, !8, !21, !15}
!21 = !{!"llvm.loop.unroll.runtime.disable"}
!22 = !{!23, !23, i64 0}
!23 = !{!"vtable pointer", !6, i64 0}
!24 = !{!25, !4, i64 240}
!25 = !{!"_ZTSSt9basic_iosIcSt11char_traitsIcEE", !4, i64 216, !5, i64 224, !26, i64 225, !4, i64 232, !4, i64 240, !4, i64 248, !4, i64 256}
!26 = !{!"bool", !5, i64 0}
!27 = !{!28, !5, i64 56}
!28 = !{!"_ZTSSt5ctypeIcE", !4, i64 16, !26, i64 24, !4, i64 32, !4, i64 40, !4, i64 48, !5, i64 56, !5, i64 57, !5, i64 313, !5, i64 569}
!29 = !{!5, !5, i64 0}
!30 = distinct !{!30, !8, !21, !15}
