; ModuleID = './FactorialArray.cpp'
source_filename = "./FactorialArray.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque

@_ZN3fwt1tE = dso_local local_unnamed_addr global [100001 x i32] zeroinitializer, align 16
@.str = private unnamed_addr constant [33 x i8] c"../input_files/FactorialArray/00\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@stdin = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.2 = private unnamed_addr constant [6 x i8] c"%d %d\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: mustprogress norecurse uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca [100000 x i32], align 16
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast [100000 x i32]* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 400000, i8* nonnull %7) #5
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(400000) %7, i8 0, i64 400000, i1 false)
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !3
  %11 = tail call %struct._IO_FILE* @freopen(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), %struct._IO_FILE* %10)
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %2, i32* nonnull %3)
  %13 = load i32, i32* %2, align 4, !tbaa !7
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %21, label %15

15:                                               ; preds = %67, %0
  %16 = bitcast i32* %4 to i8*
  %17 = bitcast i32* %5 to i8*
  %18 = bitcast i32* %6 to i8*
  %19 = load i32, i32* %3, align 4, !tbaa !7
  %20 = icmp sgt i32 %19, 0
  br i1 %20, label %73, label %72

21:                                               ; preds = %0, %67
  %22 = phi i64 [ %68, %67 ], [ 0, %0 ]
  %23 = sub nsw i64 100000, %22
  %24 = getelementptr inbounds [100000 x i32], [100000 x i32]* %1, i64 0, i64 %22
  %25 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i32* nonnull %24)
  %26 = load i32, i32* %24, align 4, !tbaa !7
  %27 = icmp ult i64 %22, 100000
  br i1 %27, label %28, label %67

28:                                               ; preds = %21
  %29 = icmp ult i64 %23, 8
  br i1 %29, label %57, label %30

30:                                               ; preds = %28
  %31 = and i64 %23, -8
  %32 = add i64 %22, %31
  %33 = insertelement <4 x i32> poison, i32 %26, i32 0
  %34 = shufflevector <4 x i32> %33, <4 x i32> poison, <4 x i32> zeroinitializer
  %35 = insertelement <4 x i32> poison, i32 %26, i32 0
  %36 = shufflevector <4 x i32> %35, <4 x i32> poison, <4 x i32> zeroinitializer
  br label %37

37:                                               ; preds = %37, %30
  %38 = phi i64 [ 0, %30 ], [ %53, %37 ]
  %39 = add i64 %22, %38
  %40 = add nuw nsw i64 %39, 1
  %41 = getelementptr inbounds [100001 x i32], [100001 x i32]* @_ZN3fwt1tE, i64 0, i64 %40
  %42 = bitcast i32* %41 to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 4, !tbaa !7
  %44 = getelementptr inbounds i32, i32* %41, i64 4
  %45 = bitcast i32* %44 to <4 x i32>*
  %46 = load <4 x i32>, <4 x i32>* %45, align 4, !tbaa !7
  %47 = add nsw <4 x i32> %43, %34
  %48 = add nsw <4 x i32> %46, %36
  %49 = srem <4 x i32> %47, <i32 1000000000, i32 1000000000, i32 1000000000, i32 1000000000>
  %50 = srem <4 x i32> %48, <i32 1000000000, i32 1000000000, i32 1000000000, i32 1000000000>
  %51 = bitcast i32* %41 to <4 x i32>*
  store <4 x i32> %49, <4 x i32>* %51, align 4, !tbaa !7
  %52 = bitcast i32* %44 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %52, align 4, !tbaa !7
  %53 = add nuw i64 %38, 8
  %54 = icmp eq i64 %53, %31
  br i1 %54, label %55, label %37, !llvm.loop !9

55:                                               ; preds = %37
  %56 = icmp eq i64 %23, %31
  br i1 %56, label %67, label %57

57:                                               ; preds = %28, %55
  %58 = phi i64 [ %22, %28 ], [ %32, %55 ]
  br label %59

59:                                               ; preds = %57, %59
  %60 = phi i64 [ %61, %59 ], [ %58, %57 ]
  %61 = add nuw nsw i64 %60, 1
  %62 = getelementptr inbounds [100001 x i32], [100001 x i32]* @_ZN3fwt1tE, i64 0, i64 %61
  %63 = load i32, i32* %62, align 4, !tbaa !7
  %64 = add nsw i32 %63, %26
  %65 = srem i32 %64, 1000000000
  store i32 %65, i32* %62, align 4, !tbaa !7
  %66 = icmp eq i64 %61, 100000
  br i1 %66, label %67, label %59, !llvm.loop !12

67:                                               ; preds = %59, %55, %21
  %68 = add nuw nsw i64 %22, 1
  %69 = load i32, i32* %2, align 4, !tbaa !7
  %70 = sext i32 %69 to i64
  %71 = icmp slt i64 %68, %70
  br i1 %71, label %21, label %15, !llvm.loop !14

72:                                               ; preds = %145, %15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 400000, i8* nonnull %7) #5
  ret i32 0

73:                                               ; preds = %15, %145
  %74 = phi i32 [ %146, %145 ], [ 0, %15 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #5
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #5
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #5
  %75 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %76 = load i32, i32* %4, align 4, !tbaa !7
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %78, label %123

78:                                               ; preds = %73
  %79 = load i32, i32* %5, align 4, !tbaa !7
  %80 = load i32, i32* %6, align 4, !tbaa !7
  %81 = icmp slt i32 %79, 100000
  br i1 %81, label %82, label %145

82:                                               ; preds = %78
  %83 = sext i32 %79 to i64
  %84 = sub nsw i64 100000, %83
  %85 = icmp ult i64 %84, 8
  br i1 %85, label %113, label %86

86:                                               ; preds = %82
  %87 = and i64 %84, -8
  %88 = add nsw i64 %87, %83
  %89 = insertelement <4 x i32> poison, i32 %80, i32 0
  %90 = shufflevector <4 x i32> %89, <4 x i32> poison, <4 x i32> zeroinitializer
  %91 = insertelement <4 x i32> poison, i32 %80, i32 0
  %92 = shufflevector <4 x i32> %91, <4 x i32> poison, <4 x i32> zeroinitializer
  br label %93

93:                                               ; preds = %93, %86
  %94 = phi i64 [ 0, %86 ], [ %109, %93 ]
  %95 = add i64 %94, %83
  %96 = add nsw i64 %95, 1
  %97 = getelementptr inbounds [100001 x i32], [100001 x i32]* @_ZN3fwt1tE, i64 0, i64 %96
  %98 = bitcast i32* %97 to <4 x i32>*
  %99 = load <4 x i32>, <4 x i32>* %98, align 4, !tbaa !7
  %100 = getelementptr inbounds i32, i32* %97, i64 4
  %101 = bitcast i32* %100 to <4 x i32>*
  %102 = load <4 x i32>, <4 x i32>* %101, align 4, !tbaa !7
  %103 = add nsw <4 x i32> %99, %90
  %104 = add nsw <4 x i32> %102, %92
  %105 = srem <4 x i32> %103, <i32 1000000000, i32 1000000000, i32 1000000000, i32 1000000000>
  %106 = srem <4 x i32> %104, <i32 1000000000, i32 1000000000, i32 1000000000, i32 1000000000>
  %107 = bitcast i32* %97 to <4 x i32>*
  store <4 x i32> %105, <4 x i32>* %107, align 4, !tbaa !7
  %108 = bitcast i32* %100 to <4 x i32>*
  store <4 x i32> %106, <4 x i32>* %108, align 4, !tbaa !7
  %109 = add nuw i64 %94, 8
  %110 = icmp eq i64 %109, %87
  br i1 %110, label %111, label %93, !llvm.loop !15

111:                                              ; preds = %93
  %112 = icmp eq i64 %84, %87
  br i1 %112, label %145, label %113

113:                                              ; preds = %82, %111
  %114 = phi i64 [ %83, %82 ], [ %88, %111 ]
  br label %115

115:                                              ; preds = %113, %115
  %116 = phi i64 [ %117, %115 ], [ %114, %113 ]
  %117 = add nsw i64 %116, 1
  %118 = getelementptr inbounds [100001 x i32], [100001 x i32]* @_ZN3fwt1tE, i64 0, i64 %117
  %119 = load i32, i32* %118, align 4, !tbaa !7
  %120 = add nsw i32 %119, %80
  %121 = srem i32 %120, 1000000000
  store i32 %121, i32* %118, align 4, !tbaa !7
  %122 = icmp eq i64 %117, 100000
  br i1 %122, label %145, label %115, !llvm.loop !16

123:                                              ; preds = %73
  %124 = load i32, i32* %6, align 4, !tbaa !7
  %125 = icmp sgt i32 %124, -1
  br i1 %125, label %126, label %130

126:                                              ; preds = %123
  %127 = zext i32 %124 to i64
  %128 = getelementptr inbounds [100001 x i32], [100001 x i32]* @_ZN3fwt1tE, i64 0, i64 %127
  %129 = load i32, i32* %128, align 4, !tbaa !7
  br label %130

130:                                              ; preds = %123, %126
  %131 = phi i32 [ %129, %126 ], [ 0, %123 ]
  %132 = load i32, i32* %5, align 4, !tbaa !7
  %133 = icmp sgt i32 %132, 0
  br i1 %133, label %134, label %139

134:                                              ; preds = %130
  %135 = add nsw i32 %132, -1
  %136 = zext i32 %135 to i64
  %137 = getelementptr inbounds [100001 x i32], [100001 x i32]* @_ZN3fwt1tE, i64 0, i64 %136
  %138 = load i32, i32* %137, align 4, !tbaa !7
  br label %139

139:                                              ; preds = %130, %134
  %140 = phi i32 [ %138, %134 ], [ 0, %130 ]
  %141 = add i32 %131, 1000000000
  %142 = sub i32 %141, %140
  %143 = srem i32 %142, 1000000000
  %144 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), i32 %143)
  br label %145

145:                                              ; preds = %115, %111, %78, %139
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #5
  %146 = add nuw nsw i32 %74, 1
  %147 = load i32, i32* %3, align 4, !tbaa !7
  %148 = icmp slt i32 %146, %147
  br i1 %148, label %73, label %72, !llvm.loop !17
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare dso_local %struct._IO_FILE* @freopen(i8*, i8*, %struct._IO_FILE*) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @__isoc99_scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #4

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #4

attributes #0 = { mustprogress norecurse uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #2 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #3 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !8, i64 0}
!8 = !{!"int", !5, i64 0}
!9 = distinct !{!9, !10, !11}
!10 = !{!"llvm.loop.mustprogress"}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !10, !13, !11}
!13 = !{!"llvm.loop.unroll.runtime.disable"}
!14 = distinct !{!14, !10}
!15 = distinct !{!15, !10, !11}
!16 = distinct !{!16, !10, !13, !11}
!17 = distinct !{!17, !10}
