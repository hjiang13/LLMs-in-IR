; ModuleID = './WalkingRobots.cpp'
source_filename = "./WalkingRobots.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char>::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char>::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZSt3cin = external dso_local global %"class.std::basic_istream", align 8
@_ZSt4cout = external dso_local global %"class.std::basic_ostream", align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_WalkingRobots.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define dso_local i32 @_Z17howManyCollisionsRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%"class.std::__cxx11::basic_string"* nocapture nonnull readonly align 8 dereferenceable(32) %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  %3 = load i64, i64* %2, align 8, !tbaa !3
  %4 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i64 %3, 0
  br i1 %6, label %166, label %7

7:                                                ; preds = %1
  %8 = icmp ult i64 %3, 8
  br i1 %8, label %77, label %9

9:                                                ; preds = %7
  %10 = and i64 %3, -8
  %11 = add i64 %10, -8
  %12 = lshr exact i64 %11, 3
  %13 = add nuw nsw i64 %12, 1
  %14 = and i64 %13, 1
  %15 = icmp eq i64 %11, 0
  br i1 %15, label %51, label %16

16:                                               ; preds = %9
  %17 = and i64 %13, 4611686018427387902
  br label %18

18:                                               ; preds = %18, %16
  %19 = phi i64 [ 0, %16 ], [ %48, %18 ]
  %20 = phi <4 x i32> [ zeroinitializer, %16 ], [ %46, %18 ]
  %21 = phi <4 x i32> [ zeroinitializer, %16 ], [ %47, %18 ]
  %22 = phi i64 [ %17, %16 ], [ %49, %18 ]
  %23 = getelementptr inbounds i8, i8* %5, i64 %19
  %24 = bitcast i8* %23 to <4 x i8>*
  %25 = load <4 x i8>, <4 x i8>* %24, align 1, !tbaa !10
  %26 = getelementptr inbounds i8, i8* %23, i64 4
  %27 = bitcast i8* %26 to <4 x i8>*
  %28 = load <4 x i8>, <4 x i8>* %27, align 1, !tbaa !10
  %29 = icmp eq <4 x i8> %25, <i8 108, i8 108, i8 108, i8 108>
  %30 = icmp eq <4 x i8> %28, <i8 108, i8 108, i8 108, i8 108>
  %31 = sext <4 x i1> %29 to <4 x i32>
  %32 = sext <4 x i1> %30 to <4 x i32>
  %33 = add <4 x i32> %20, %31
  %34 = add <4 x i32> %21, %32
  %35 = or i64 %19, 8
  %36 = getelementptr inbounds i8, i8* %5, i64 %35
  %37 = bitcast i8* %36 to <4 x i8>*
  %38 = load <4 x i8>, <4 x i8>* %37, align 1, !tbaa !10
  %39 = getelementptr inbounds i8, i8* %36, i64 4
  %40 = bitcast i8* %39 to <4 x i8>*
  %41 = load <4 x i8>, <4 x i8>* %40, align 1, !tbaa !10
  %42 = icmp eq <4 x i8> %38, <i8 108, i8 108, i8 108, i8 108>
  %43 = icmp eq <4 x i8> %41, <i8 108, i8 108, i8 108, i8 108>
  %44 = sext <4 x i1> %42 to <4 x i32>
  %45 = sext <4 x i1> %43 to <4 x i32>
  %46 = add <4 x i32> %33, %44
  %47 = add <4 x i32> %34, %45
  %48 = add nuw i64 %19, 16
  %49 = add i64 %22, -2
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %51, label %18, !llvm.loop !11

51:                                               ; preds = %18, %9
  %52 = phi <4 x i32> [ undef, %9 ], [ %46, %18 ]
  %53 = phi <4 x i32> [ undef, %9 ], [ %47, %18 ]
  %54 = phi i64 [ 0, %9 ], [ %48, %18 ]
  %55 = phi <4 x i32> [ zeroinitializer, %9 ], [ %46, %18 ]
  %56 = phi <4 x i32> [ zeroinitializer, %9 ], [ %47, %18 ]
  %57 = icmp eq i64 %14, 0
  br i1 %57, label %71, label %58

58:                                               ; preds = %51
  %59 = getelementptr inbounds i8, i8* %5, i64 %54
  %60 = getelementptr inbounds i8, i8* %59, i64 4
  %61 = bitcast i8* %60 to <4 x i8>*
  %62 = load <4 x i8>, <4 x i8>* %61, align 1, !tbaa !10
  %63 = icmp eq <4 x i8> %62, <i8 108, i8 108, i8 108, i8 108>
  %64 = sext <4 x i1> %63 to <4 x i32>
  %65 = add <4 x i32> %56, %64
  %66 = bitcast i8* %59 to <4 x i8>*
  %67 = load <4 x i8>, <4 x i8>* %66, align 1, !tbaa !10
  %68 = icmp eq <4 x i8> %67, <i8 108, i8 108, i8 108, i8 108>
  %69 = sext <4 x i1> %68 to <4 x i32>
  %70 = add <4 x i32> %55, %69
  br label %71

71:                                               ; preds = %51, %58
  %72 = phi <4 x i32> [ %52, %51 ], [ %70, %58 ]
  %73 = phi <4 x i32> [ %53, %51 ], [ %65, %58 ]
  %74 = add <4 x i32> %73, %72
  %75 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %74)
  %76 = icmp eq i64 %3, %10
  br i1 %76, label %80, label %77

77:                                               ; preds = %7, %71
  %78 = phi i64 [ 0, %7 ], [ %10, %71 ]
  %79 = phi i32 [ 0, %7 ], [ %75, %71 ]
  br label %156

80:                                               ; preds = %156, %71
  %81 = phi i32 [ %75, %71 ], [ %163, %156 ]
  br i1 %6, label %166, label %82

82:                                               ; preds = %80
  %83 = icmp ult i64 %3, 8
  br i1 %83, label %153, label %84

84:                                               ; preds = %82
  %85 = and i64 %3, -8
  %86 = insertelement <4 x i32> <i32 poison, i32 0, i32 0, i32 0>, i32 %81, i32 0
  %87 = add i64 %85, -8
  %88 = lshr exact i64 %87, 3
  %89 = add nuw nsw i64 %88, 1
  %90 = and i64 %89, 1
  %91 = icmp eq i64 %87, 0
  br i1 %91, label %127, label %92

92:                                               ; preds = %84
  %93 = and i64 %89, 4611686018427387902
  br label %94

94:                                               ; preds = %94, %92
  %95 = phi i64 [ 0, %92 ], [ %124, %94 ]
  %96 = phi <4 x i32> [ %86, %92 ], [ %122, %94 ]
  %97 = phi <4 x i32> [ zeroinitializer, %92 ], [ %123, %94 ]
  %98 = phi i64 [ %93, %92 ], [ %125, %94 ]
  %99 = getelementptr inbounds i8, i8* %5, i64 %95
  %100 = bitcast i8* %99 to <4 x i8>*
  %101 = load <4 x i8>, <4 x i8>* %100, align 1, !tbaa !10
  %102 = getelementptr inbounds i8, i8* %99, i64 4
  %103 = bitcast i8* %102 to <4 x i8>*
  %104 = load <4 x i8>, <4 x i8>* %103, align 1, !tbaa !10
  %105 = icmp eq <4 x i8> %101, <i8 114, i8 114, i8 114, i8 114>
  %106 = icmp eq <4 x i8> %104, <i8 114, i8 114, i8 114, i8 114>
  %107 = zext <4 x i1> %105 to <4 x i32>
  %108 = zext <4 x i1> %106 to <4 x i32>
  %109 = add <4 x i32> %96, %107
  %110 = add <4 x i32> %97, %108
  %111 = or i64 %95, 8
  %112 = getelementptr inbounds i8, i8* %5, i64 %111
  %113 = bitcast i8* %112 to <4 x i8>*
  %114 = load <4 x i8>, <4 x i8>* %113, align 1, !tbaa !10
  %115 = getelementptr inbounds i8, i8* %112, i64 4
  %116 = bitcast i8* %115 to <4 x i8>*
  %117 = load <4 x i8>, <4 x i8>* %116, align 1, !tbaa !10
  %118 = icmp eq <4 x i8> %114, <i8 114, i8 114, i8 114, i8 114>
  %119 = icmp eq <4 x i8> %117, <i8 114, i8 114, i8 114, i8 114>
  %120 = zext <4 x i1> %118 to <4 x i32>
  %121 = zext <4 x i1> %119 to <4 x i32>
  %122 = add <4 x i32> %109, %120
  %123 = add <4 x i32> %110, %121
  %124 = add nuw i64 %95, 16
  %125 = add i64 %98, -2
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %127, label %94, !llvm.loop !14

127:                                              ; preds = %94, %84
  %128 = phi <4 x i32> [ undef, %84 ], [ %122, %94 ]
  %129 = phi <4 x i32> [ undef, %84 ], [ %123, %94 ]
  %130 = phi i64 [ 0, %84 ], [ %124, %94 ]
  %131 = phi <4 x i32> [ %86, %84 ], [ %122, %94 ]
  %132 = phi <4 x i32> [ zeroinitializer, %84 ], [ %123, %94 ]
  %133 = icmp eq i64 %90, 0
  br i1 %133, label %147, label %134

134:                                              ; preds = %127
  %135 = getelementptr inbounds i8, i8* %5, i64 %130
  %136 = getelementptr inbounds i8, i8* %135, i64 4
  %137 = bitcast i8* %136 to <4 x i8>*
  %138 = load <4 x i8>, <4 x i8>* %137, align 1, !tbaa !10
  %139 = icmp eq <4 x i8> %138, <i8 114, i8 114, i8 114, i8 114>
  %140 = zext <4 x i1> %139 to <4 x i32>
  %141 = add <4 x i32> %132, %140
  %142 = bitcast i8* %135 to <4 x i8>*
  %143 = load <4 x i8>, <4 x i8>* %142, align 1, !tbaa !10
  %144 = icmp eq <4 x i8> %143, <i8 114, i8 114, i8 114, i8 114>
  %145 = zext <4 x i1> %144 to <4 x i32>
  %146 = add <4 x i32> %131, %145
  br label %147

147:                                              ; preds = %127, %134
  %148 = phi <4 x i32> [ %128, %127 ], [ %146, %134 ]
  %149 = phi <4 x i32> [ %129, %127 ], [ %141, %134 ]
  %150 = add <4 x i32> %149, %148
  %151 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %150)
  %152 = icmp eq i64 %3, %85
  br i1 %152, label %166, label %153

153:                                              ; preds = %82, %147
  %154 = phi i64 [ 0, %82 ], [ %85, %147 ]
  %155 = phi i32 [ %81, %82 ], [ %151, %147 ]
  br label %168

156:                                              ; preds = %77, %156
  %157 = phi i64 [ %164, %156 ], [ %78, %77 ]
  %158 = phi i32 [ %163, %156 ], [ %79, %77 ]
  %159 = getelementptr inbounds i8, i8* %5, i64 %157
  %160 = load i8, i8* %159, align 1, !tbaa !10
  %161 = icmp eq i8 %160, 108
  %162 = sext i1 %161 to i32
  %163 = add nsw i32 %158, %162
  %164 = add nuw i64 %157, 1
  %165 = icmp eq i64 %164, %3
  br i1 %165, label %80, label %156, !llvm.loop !15

166:                                              ; preds = %168, %147, %1, %80
  %167 = phi i32 [ %81, %80 ], [ 0, %1 ], [ %151, %147 ], [ %175, %168 ]
  ret i32 %167

168:                                              ; preds = %153, %168
  %169 = phi i64 [ %176, %168 ], [ %154, %153 ]
  %170 = phi i32 [ %175, %168 ], [ %155, %153 ]
  %171 = getelementptr inbounds i8, i8* %5, i64 %169
  %172 = load i8, i8* %171, align 1, !tbaa !10
  %173 = icmp eq i8 %172, 114
  %174 = zext i1 %173 to i32
  %175 = add nsw i32 %170, %174
  %176 = add nuw i64 %169, 1
  %177 = icmp eq i64 %176, %3
  br i1 %177, label %166, label %168, !llvm.loop !17
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: norecurse uwtable
define dso_local i32 @main() local_unnamed_addr #5 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = alloca %"class.std::__cxx11::basic_string", align 8
  %2 = bitcast %"class.std::__cxx11::basic_string"* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %2) #10
  %3 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 2
  %4 = bitcast %"class.std::__cxx11::basic_string"* %1 to %union.anon**
  store %union.anon* %3, %union.anon** %4, align 8, !tbaa !18
  %5 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 1
  store i64 0, i64* %5, align 8, !tbaa !3
  %6 = bitcast %union.anon* %3 to i8*
  store i8 0, i8* %6, align 8, !tbaa !10
  %7 = invoke nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EE(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %1)
          to label %8 unwind label %217

8:                                                ; preds = %0
  %9 = load i64, i64* %5, align 8, !tbaa !3
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %221, label %11

11:                                               ; preds = %8
  %12 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = icmp ult i64 %9, 8
  br i1 %14, label %83, label %15

15:                                               ; preds = %11
  %16 = and i64 %9, -8
  %17 = add i64 %16, -8
  %18 = lshr exact i64 %17, 3
  %19 = add nuw nsw i64 %18, 1
  %20 = and i64 %19, 1
  %21 = icmp eq i64 %17, 0
  br i1 %21, label %57, label %22

22:                                               ; preds = %15
  %23 = and i64 %19, 4611686018427387902
  br label %24

24:                                               ; preds = %24, %22
  %25 = phi i64 [ 0, %22 ], [ %54, %24 ]
  %26 = phi <4 x i32> [ zeroinitializer, %22 ], [ %52, %24 ]
  %27 = phi <4 x i32> [ zeroinitializer, %22 ], [ %53, %24 ]
  %28 = phi i64 [ %23, %22 ], [ %55, %24 ]
  %29 = getelementptr inbounds i8, i8* %13, i64 %25
  %30 = bitcast i8* %29 to <4 x i8>*
  %31 = load <4 x i8>, <4 x i8>* %30, align 1, !tbaa !10
  %32 = getelementptr inbounds i8, i8* %29, i64 4
  %33 = bitcast i8* %32 to <4 x i8>*
  %34 = load <4 x i8>, <4 x i8>* %33, align 1, !tbaa !10
  %35 = icmp eq <4 x i8> %31, <i8 108, i8 108, i8 108, i8 108>
  %36 = icmp eq <4 x i8> %34, <i8 108, i8 108, i8 108, i8 108>
  %37 = sext <4 x i1> %35 to <4 x i32>
  %38 = sext <4 x i1> %36 to <4 x i32>
  %39 = add <4 x i32> %26, %37
  %40 = add <4 x i32> %27, %38
  %41 = or i64 %25, 8
  %42 = getelementptr inbounds i8, i8* %13, i64 %41
  %43 = bitcast i8* %42 to <4 x i8>*
  %44 = load <4 x i8>, <4 x i8>* %43, align 1, !tbaa !10
  %45 = getelementptr inbounds i8, i8* %42, i64 4
  %46 = bitcast i8* %45 to <4 x i8>*
  %47 = load <4 x i8>, <4 x i8>* %46, align 1, !tbaa !10
  %48 = icmp eq <4 x i8> %44, <i8 108, i8 108, i8 108, i8 108>
  %49 = icmp eq <4 x i8> %47, <i8 108, i8 108, i8 108, i8 108>
  %50 = sext <4 x i1> %48 to <4 x i32>
  %51 = sext <4 x i1> %49 to <4 x i32>
  %52 = add <4 x i32> %39, %50
  %53 = add <4 x i32> %40, %51
  %54 = add nuw i64 %25, 16
  %55 = add i64 %28, -2
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %24, !llvm.loop !19

57:                                               ; preds = %24, %15
  %58 = phi <4 x i32> [ undef, %15 ], [ %52, %24 ]
  %59 = phi <4 x i32> [ undef, %15 ], [ %53, %24 ]
  %60 = phi i64 [ 0, %15 ], [ %54, %24 ]
  %61 = phi <4 x i32> [ zeroinitializer, %15 ], [ %52, %24 ]
  %62 = phi <4 x i32> [ zeroinitializer, %15 ], [ %53, %24 ]
  %63 = icmp eq i64 %20, 0
  br i1 %63, label %77, label %64

64:                                               ; preds = %57
  %65 = getelementptr inbounds i8, i8* %13, i64 %60
  %66 = getelementptr inbounds i8, i8* %65, i64 4
  %67 = bitcast i8* %66 to <4 x i8>*
  %68 = load <4 x i8>, <4 x i8>* %67, align 1, !tbaa !10
  %69 = icmp eq <4 x i8> %68, <i8 108, i8 108, i8 108, i8 108>
  %70 = sext <4 x i1> %69 to <4 x i32>
  %71 = add <4 x i32> %62, %70
  %72 = bitcast i8* %65 to <4 x i8>*
  %73 = load <4 x i8>, <4 x i8>* %72, align 1, !tbaa !10
  %74 = icmp eq <4 x i8> %73, <i8 108, i8 108, i8 108, i8 108>
  %75 = sext <4 x i1> %74 to <4 x i32>
  %76 = add <4 x i32> %61, %75
  br label %77

77:                                               ; preds = %57, %64
  %78 = phi <4 x i32> [ %58, %57 ], [ %76, %64 ]
  %79 = phi <4 x i32> [ %59, %57 ], [ %71, %64 ]
  %80 = add <4 x i32> %79, %78
  %81 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %80)
  %82 = icmp eq i64 %9, %16
  br i1 %82, label %96, label %83

83:                                               ; preds = %11, %77
  %84 = phi i64 [ 0, %11 ], [ %16, %77 ]
  %85 = phi i32 [ 0, %11 ], [ %81, %77 ]
  br label %86

86:                                               ; preds = %83, %86
  %87 = phi i64 [ %94, %86 ], [ %84, %83 ]
  %88 = phi i32 [ %93, %86 ], [ %85, %83 ]
  %89 = getelementptr inbounds i8, i8* %13, i64 %87
  %90 = load i8, i8* %89, align 1, !tbaa !10
  %91 = icmp eq i8 %90, 108
  %92 = sext i1 %91 to i32
  %93 = add nsw i32 %88, %92
  %94 = add nuw i64 %87, 1
  %95 = icmp eq i64 %94, %9
  br i1 %95, label %96, label %86, !llvm.loop !20

96:                                               ; preds = %86, %77
  %97 = phi i32 [ %81, %77 ], [ %93, %86 ]
  %98 = icmp ult i64 %9, 8
  br i1 %98, label %168, label %99

99:                                               ; preds = %96
  %100 = and i64 %9, -8
  %101 = insertelement <4 x i32> <i32 poison, i32 0, i32 0, i32 0>, i32 %97, i32 0
  %102 = add i64 %100, -8
  %103 = lshr exact i64 %102, 3
  %104 = add nuw nsw i64 %103, 1
  %105 = and i64 %104, 1
  %106 = icmp eq i64 %102, 0
  br i1 %106, label %142, label %107

107:                                              ; preds = %99
  %108 = and i64 %104, 4611686018427387902
  br label %109

109:                                              ; preds = %109, %107
  %110 = phi i64 [ 0, %107 ], [ %139, %109 ]
  %111 = phi <4 x i32> [ %101, %107 ], [ %137, %109 ]
  %112 = phi <4 x i32> [ zeroinitializer, %107 ], [ %138, %109 ]
  %113 = phi i64 [ %108, %107 ], [ %140, %109 ]
  %114 = getelementptr inbounds i8, i8* %13, i64 %110
  %115 = bitcast i8* %114 to <4 x i8>*
  %116 = load <4 x i8>, <4 x i8>* %115, align 1, !tbaa !10
  %117 = getelementptr inbounds i8, i8* %114, i64 4
  %118 = bitcast i8* %117 to <4 x i8>*
  %119 = load <4 x i8>, <4 x i8>* %118, align 1, !tbaa !10
  %120 = icmp eq <4 x i8> %116, <i8 114, i8 114, i8 114, i8 114>
  %121 = icmp eq <4 x i8> %119, <i8 114, i8 114, i8 114, i8 114>
  %122 = zext <4 x i1> %120 to <4 x i32>
  %123 = zext <4 x i1> %121 to <4 x i32>
  %124 = add <4 x i32> %111, %122
  %125 = add <4 x i32> %112, %123
  %126 = or i64 %110, 8
  %127 = getelementptr inbounds i8, i8* %13, i64 %126
  %128 = bitcast i8* %127 to <4 x i8>*
  %129 = load <4 x i8>, <4 x i8>* %128, align 1, !tbaa !10
  %130 = getelementptr inbounds i8, i8* %127, i64 4
  %131 = bitcast i8* %130 to <4 x i8>*
  %132 = load <4 x i8>, <4 x i8>* %131, align 1, !tbaa !10
  %133 = icmp eq <4 x i8> %129, <i8 114, i8 114, i8 114, i8 114>
  %134 = icmp eq <4 x i8> %132, <i8 114, i8 114, i8 114, i8 114>
  %135 = zext <4 x i1> %133 to <4 x i32>
  %136 = zext <4 x i1> %134 to <4 x i32>
  %137 = add <4 x i32> %124, %135
  %138 = add <4 x i32> %125, %136
  %139 = add nuw i64 %110, 16
  %140 = add i64 %113, -2
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %142, label %109, !llvm.loop !21

142:                                              ; preds = %109, %99
  %143 = phi <4 x i32> [ undef, %99 ], [ %137, %109 ]
  %144 = phi <4 x i32> [ undef, %99 ], [ %138, %109 ]
  %145 = phi i64 [ 0, %99 ], [ %139, %109 ]
  %146 = phi <4 x i32> [ %101, %99 ], [ %137, %109 ]
  %147 = phi <4 x i32> [ zeroinitializer, %99 ], [ %138, %109 ]
  %148 = icmp eq i64 %105, 0
  br i1 %148, label %162, label %149

149:                                              ; preds = %142
  %150 = getelementptr inbounds i8, i8* %13, i64 %145
  %151 = getelementptr inbounds i8, i8* %150, i64 4
  %152 = bitcast i8* %151 to <4 x i8>*
  %153 = load <4 x i8>, <4 x i8>* %152, align 1, !tbaa !10
  %154 = icmp eq <4 x i8> %153, <i8 114, i8 114, i8 114, i8 114>
  %155 = zext <4 x i1> %154 to <4 x i32>
  %156 = add <4 x i32> %147, %155
  %157 = bitcast i8* %150 to <4 x i8>*
  %158 = load <4 x i8>, <4 x i8>* %157, align 1, !tbaa !10
  %159 = icmp eq <4 x i8> %158, <i8 114, i8 114, i8 114, i8 114>
  %160 = zext <4 x i1> %159 to <4 x i32>
  %161 = add <4 x i32> %146, %160
  br label %162

162:                                              ; preds = %142, %149
  %163 = phi <4 x i32> [ %143, %142 ], [ %161, %149 ]
  %164 = phi <4 x i32> [ %144, %142 ], [ %156, %149 ]
  %165 = add <4 x i32> %164, %163
  %166 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %165)
  %167 = icmp eq i64 %9, %100
  br i1 %167, label %181, label %168

168:                                              ; preds = %96, %162
  %169 = phi i64 [ 0, %96 ], [ %100, %162 ]
  %170 = phi i32 [ %97, %96 ], [ %166, %162 ]
  br label %171

171:                                              ; preds = %168, %171
  %172 = phi i64 [ %179, %171 ], [ %169, %168 ]
  %173 = phi i32 [ %178, %171 ], [ %170, %168 ]
  %174 = getelementptr inbounds i8, i8* %13, i64 %172
  %175 = load i8, i8* %174, align 1, !tbaa !10
  %176 = icmp eq i8 %175, 114
  %177 = zext i1 %176 to i32
  %178 = add nsw i32 %173, %177
  %179 = add nuw i64 %172, 1
  %180 = icmp eq i64 %179, %9
  br i1 %180, label %181, label %171, !llvm.loop !22

181:                                              ; preds = %171, %162
  %182 = phi i32 [ %166, %162 ], [ %178, %171 ]
  %183 = invoke nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 %182)
          to label %184 unwind label %219

184:                                              ; preds = %181
  %185 = bitcast %"class.std::basic_ostream"* %183 to i8**
  %186 = load i8*, i8** %185, align 8, !tbaa !23
  %187 = getelementptr i8, i8* %186, i64 -24
  %188 = bitcast i8* %187 to i64*
  %189 = load i64, i64* %188, align 8
  %190 = bitcast %"class.std::basic_ostream"* %183 to i8*
  %191 = add nsw i64 %189, 240
  %192 = getelementptr inbounds i8, i8* %190, i64 %191
  %193 = bitcast i8* %192 to %"class.std::ctype"**
  %194 = load %"class.std::ctype"*, %"class.std::ctype"** %193, align 8, !tbaa !25
  %195 = icmp eq %"class.std::ctype"* %194, null
  br i1 %195, label %196, label %198

196:                                              ; preds = %184
  invoke void @_ZSt16__throw_bad_castv() #11
          to label %197 unwind label %219

197:                                              ; preds = %196
  unreachable

198:                                              ; preds = %184
  %199 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %194, i64 0, i32 8
  %200 = load i8, i8* %199, align 8, !tbaa !28
  %201 = icmp eq i8 %200, 0
  br i1 %201, label %205, label %202

202:                                              ; preds = %198
  %203 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %194, i64 0, i32 9, i64 10
  %204 = load i8, i8* %203, align 1, !tbaa !10
  br label %212

205:                                              ; preds = %198
  invoke void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull align 8 dereferenceable(570) %194)
          to label %206 unwind label %219

206:                                              ; preds = %205
  %207 = bitcast %"class.std::ctype"* %194 to i8 (%"class.std::ctype"*, i8)***
  %208 = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %207, align 8, !tbaa !23
  %209 = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %208, i64 6
  %210 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %209, align 8
  %211 = invoke signext i8 %210(%"class.std::ctype"* nonnull align 8 dereferenceable(570) %194, i8 signext 10)
          to label %212 unwind label %219

212:                                              ; preds = %206, %202
  %213 = phi i8 [ %204, %202 ], [ %211, %206 ]
  %214 = invoke nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %183, i8 signext %213)
          to label %215 unwind label %219

215:                                              ; preds = %212
  %216 = invoke nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %214)
          to label %221 unwind label %219

217:                                              ; preds = %0
  %218 = landingpad { i8*, i32 }
          cleanup
  br label %227

219:                                              ; preds = %215, %212, %206, %205, %196, %181
  %220 = landingpad { i8*, i32 }
          cleanup
  br label %227

221:                                              ; preds = %215, %8
  %222 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %223 = load i8*, i8** %222, align 8, !tbaa !30
  %224 = icmp eq i8* %223, %6
  br i1 %224, label %226, label %225

225:                                              ; preds = %221
  call void @_ZdlPv(i8* %223) #10
  br label %226

226:                                              ; preds = %221, %225
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %2) #10
  ret i32 0

227:                                              ; preds = %219, %217
  %228 = phi { i8*, i32 } [ %220, %219 ], [ %218, %217 ]
  %229 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %230 = load i8*, i8** %229, align 8, !tbaa !30
  %231 = icmp eq i8* %230, %6
  br i1 %231, label %233, label %232

232:                                              ; preds = %227
  call void @_ZdlPv(i8* %230) #10
  br label %233

233:                                              ; preds = %227, %232
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %2) #10
  resume { i8*, i32 } %228
}

declare dso_local nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EE(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16), %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32)) local_unnamed_addr #0

declare dso_local i32 @__gxx_personality_v0(...)

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8), i32) local_unnamed_addr #0

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #6

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8), i8 signext) local_unnamed_addr #0

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8)) local_unnamed_addr #0

; Function Attrs: noreturn
declare dso_local void @_ZSt16__throw_bad_castv() local_unnamed_addr #7

declare dso_local void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull align 8 dereferenceable(570)) local_unnamed_addr #0

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_WalkingRobots.cpp() #8 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #10
  ret void
}

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #9

attributes #0 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nofree nounwind }
attributes #3 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #5 = { norecurse uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { nofree nosync nounwind readnone willreturn }
attributes #10 = { nounwind }
attributes #11 = { noreturn }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !9, i64 8}
!4 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !5, i64 0, !9, i64 8, !7, i64 16}
!5 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !6, i64 0}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C++ TBAA"}
!9 = !{!"long", !7, i64 0}
!10 = !{!7, !7, i64 0}
!11 = distinct !{!11, !12, !13}
!12 = !{!"llvm.loop.mustprogress"}
!13 = !{!"llvm.loop.isvectorized", i32 1}
!14 = distinct !{!14, !12, !13}
!15 = distinct !{!15, !12, !16, !13}
!16 = !{!"llvm.loop.unroll.runtime.disable"}
!17 = distinct !{!17, !12, !16, !13}
!18 = !{!5, !6, i64 0}
!19 = distinct !{!19, !12, !13}
!20 = distinct !{!20, !12, !16, !13}
!21 = distinct !{!21, !12, !13}
!22 = distinct !{!22, !12, !16, !13}
!23 = !{!24, !24, i64 0}
!24 = !{!"vtable pointer", !8, i64 0}
!25 = !{!26, !6, i64 240}
!26 = !{!"_ZTSSt9basic_iosIcSt11char_traitsIcEE", !6, i64 216, !7, i64 224, !27, i64 225, !6, i64 232, !6, i64 240, !6, i64 248, !6, i64 256}
!27 = !{!"bool", !7, i64 0}
!28 = !{!29, !7, i64 56}
!29 = !{!"_ZTSSt5ctypeIcE", !6, i64 16, !27, i64 24, !6, i64 32, !6, i64 40, !6, i64 48, !7, i64 56, !7, i64 57, !7, i64 313, !7, i64 569}
!30 = !{!4, !6, i64 0}
