; ModuleID = './MaximizeProfit.cpp'
source_filename = "./MaximizeProfit.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }
%"class.std::length_error" = type { %"class.std::logic_error" }
%"class.std::logic_error" = type { %"class.std::exception", %"struct.std::__cow_string" }
%"class.std::exception" = type { i32 (...)** }
%"struct.std::__cow_string" = type { %union.anon }
%union.anon = type { i8* }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZSt3cin = external dso_local global %"class.std::basic_istream", align 8
@.str = private unnamed_addr constant [44 x i8] c"cannot create vector larger than max_size()\00", align 1
@_ZTISt12length_error = external dso_local constant i8*
@_ZSt4cout = external dso_local global %"class.std::basic_ostream", align 8
@.str.1 = private unnamed_addr constant [49 x i8] c"cannot create std::vector larger than max_size()\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_MaximizeProfit.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: mustprogress nofree nosync nounwind readonly uwtable willreturn
define dso_local i32 @_Z14maximizeProfitRSt6vectorIiSaIiEES2_ii(%"class.std::vector"* nocapture nonnull readonly align 8 dereferenceable(24) %0, %"class.std::vector"* nocapture nonnull readonly align 8 dereferenceable(24) %1, i32 %2, i32 %3) local_unnamed_addr #3 {
  %5 = mul nsw i32 %3, %2
  %6 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8, !tbaa !3
  %8 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i32*, i32** %8, align 8, !tbaa !3
  %10 = icmp eq i32* %7, %9
  %11 = add i32 %3, 14
  %12 = icmp ult i32 %11, 15
  %13 = select i1 %10, i1 true, i1 %12
  br i1 %13, label %135, label %14

14:                                               ; preds = %4
  %15 = add nuw nsw i32 %3, 7
  %16 = sdiv i32 %15, 8
  %17 = call i32 @llvm.umax.i32(i32 %16, i32 1)
  %18 = sext i32 %17 to i64
  %19 = icmp ult i32 %17, 8
  br i1 %19, label %119, label %20

20:                                               ; preds = %14
  %21 = and i64 %18, -8
  %22 = insertelement <4 x i32> poison, i32 %5, i32 0
  %23 = shufflevector <4 x i32> %22, <4 x i32> poison, <4 x i32> zeroinitializer
  %24 = insertelement <4 x i32> poison, i32 %2, i32 0
  %25 = shufflevector <4 x i32> %24, <4 x i32> poison, <4 x i32> zeroinitializer
  %26 = insertelement <4 x i32> poison, i32 %2, i32 0
  %27 = shufflevector <4 x i32> %26, <4 x i32> poison, <4 x i32> zeroinitializer
  %28 = add nsw i64 %21, -8
  %29 = lshr exact i64 %28, 3
  %30 = add nuw nsw i64 %29, 1
  %31 = and i64 %30, 1
  %32 = icmp eq i64 %28, 0
  br i1 %32, label %84, label %33

33:                                               ; preds = %20
  %34 = and i64 %30, 4611686018427387902
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %81, %35 ]
  %37 = phi <4 x i32> [ %23, %33 ], [ %79, %35 ]
  %38 = phi <4 x i32> [ %23, %33 ], [ %80, %35 ]
  %39 = phi i64 [ %34, %33 ], [ %82, %35 ]
  %40 = getelementptr inbounds i32, i32* %7, i64 %36
  %41 = bitcast i32* %40 to <4 x i32>*
  %42 = load <4 x i32>, <4 x i32>* %41, align 4, !tbaa !8
  %43 = getelementptr inbounds i32, i32* %40, i64 4
  %44 = bitcast i32* %43 to <4 x i32>*
  %45 = load <4 x i32>, <4 x i32>* %44, align 4, !tbaa !8
  %46 = mul nsw <4 x i32> %42, %25
  %47 = mul nsw <4 x i32> %45, %27
  %48 = getelementptr inbounds i32, i32* %9, i64 %36
  %49 = bitcast i32* %48 to <4 x i32>*
  %50 = load <4 x i32>, <4 x i32>* %49, align 4, !tbaa !8
  %51 = getelementptr inbounds i32, i32* %48, i64 4
  %52 = bitcast i32* %51 to <4 x i32>*
  %53 = load <4 x i32>, <4 x i32>* %52, align 4, !tbaa !8
  %54 = mul nsw <4 x i32> %46, %50
  %55 = mul nsw <4 x i32> %47, %53
  %56 = icmp slt <4 x i32> %37, %54
  %57 = icmp slt <4 x i32> %38, %55
  %58 = select <4 x i1> %56, <4 x i32> %54, <4 x i32> %37
  %59 = select <4 x i1> %57, <4 x i32> %55, <4 x i32> %38
  %60 = or i64 %36, 8
  %61 = getelementptr inbounds i32, i32* %7, i64 %60
  %62 = bitcast i32* %61 to <4 x i32>*
  %63 = load <4 x i32>, <4 x i32>* %62, align 4, !tbaa !8
  %64 = getelementptr inbounds i32, i32* %61, i64 4
  %65 = bitcast i32* %64 to <4 x i32>*
  %66 = load <4 x i32>, <4 x i32>* %65, align 4, !tbaa !8
  %67 = mul nsw <4 x i32> %63, %25
  %68 = mul nsw <4 x i32> %66, %27
  %69 = getelementptr inbounds i32, i32* %9, i64 %60
  %70 = bitcast i32* %69 to <4 x i32>*
  %71 = load <4 x i32>, <4 x i32>* %70, align 4, !tbaa !8
  %72 = getelementptr inbounds i32, i32* %69, i64 4
  %73 = bitcast i32* %72 to <4 x i32>*
  %74 = load <4 x i32>, <4 x i32>* %73, align 4, !tbaa !8
  %75 = mul nsw <4 x i32> %67, %71
  %76 = mul nsw <4 x i32> %68, %74
  %77 = icmp slt <4 x i32> %58, %75
  %78 = icmp slt <4 x i32> %59, %76
  %79 = select <4 x i1> %77, <4 x i32> %75, <4 x i32> %58
  %80 = select <4 x i1> %78, <4 x i32> %76, <4 x i32> %59
  %81 = add nuw i64 %36, 16
  %82 = add i64 %39, -2
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %84, label %35, !llvm.loop !10

84:                                               ; preds = %35, %20
  %85 = phi <4 x i32> [ undef, %20 ], [ %79, %35 ]
  %86 = phi <4 x i32> [ undef, %20 ], [ %80, %35 ]
  %87 = phi i64 [ 0, %20 ], [ %81, %35 ]
  %88 = phi <4 x i32> [ %23, %20 ], [ %79, %35 ]
  %89 = phi <4 x i32> [ %23, %20 ], [ %80, %35 ]
  %90 = icmp eq i64 %31, 0
  br i1 %90, label %112, label %91

91:                                               ; preds = %84
  %92 = getelementptr inbounds i32, i32* %7, i64 %87
  %93 = bitcast i32* %92 to <4 x i32>*
  %94 = load <4 x i32>, <4 x i32>* %93, align 4, !tbaa !8
  %95 = getelementptr inbounds i32, i32* %92, i64 4
  %96 = bitcast i32* %95 to <4 x i32>*
  %97 = load <4 x i32>, <4 x i32>* %96, align 4, !tbaa !8
  %98 = mul nsw <4 x i32> %94, %25
  %99 = mul nsw <4 x i32> %97, %27
  %100 = getelementptr inbounds i32, i32* %9, i64 %87
  %101 = bitcast i32* %100 to <4 x i32>*
  %102 = load <4 x i32>, <4 x i32>* %101, align 4, !tbaa !8
  %103 = getelementptr inbounds i32, i32* %100, i64 4
  %104 = bitcast i32* %103 to <4 x i32>*
  %105 = load <4 x i32>, <4 x i32>* %104, align 4, !tbaa !8
  %106 = mul nsw <4 x i32> %98, %102
  %107 = mul nsw <4 x i32> %99, %105
  %108 = icmp slt <4 x i32> %89, %107
  %109 = select <4 x i1> %108, <4 x i32> %107, <4 x i32> %89
  %110 = icmp slt <4 x i32> %88, %106
  %111 = select <4 x i1> %110, <4 x i32> %106, <4 x i32> %88
  br label %112

112:                                              ; preds = %84, %91
  %113 = phi <4 x i32> [ %85, %84 ], [ %111, %91 ]
  %114 = phi <4 x i32> [ %86, %84 ], [ %109, %91 ]
  %115 = icmp sgt <4 x i32> %113, %114
  %116 = select <4 x i1> %115, <4 x i32> %113, <4 x i32> %114
  %117 = call i32 @llvm.vector.reduce.smax.v4i32(<4 x i32> %116)
  %118 = icmp eq i64 %21, %18
  br i1 %118, label %135, label %119

119:                                              ; preds = %14, %112
  %120 = phi i64 [ 0, %14 ], [ %21, %112 ]
  %121 = phi i32 [ %5, %14 ], [ %117, %112 ]
  br label %122

122:                                              ; preds = %119, %122
  %123 = phi i64 [ %133, %122 ], [ %120, %119 ]
  %124 = phi i32 [ %132, %122 ], [ %121, %119 ]
  %125 = getelementptr inbounds i32, i32* %7, i64 %123
  %126 = load i32, i32* %125, align 4, !tbaa !8
  %127 = mul nsw i32 %126, %2
  %128 = getelementptr inbounds i32, i32* %9, i64 %123
  %129 = load i32, i32* %128, align 4, !tbaa !8
  %130 = mul nsw i32 %127, %129
  %131 = icmp slt i32 %124, %130
  %132 = select i1 %131, i32 %130, i32 %124
  %133 = add nuw i64 %123, 1
  %134 = icmp eq i64 %133, %18
  br i1 %134, label %135, label %122, !llvm.loop !13

135:                                              ; preds = %122, %112, %4
  %136 = phi i32 [ %5, %4 ], [ %117, %112 ], [ %132, %122 ]
  ret i32 %136
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: norecurse uwtable
define dso_local i32 @main() local_unnamed_addr #5 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #13
  %4 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #13
  %5 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* nonnull align 4 dereferenceable(4) %1)
  %6 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %5, i32* nonnull align 4 dereferenceable(4) %2)
  %7 = load i32, i32* %1, align 4, !tbaa !8
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %9, label %15

9:                                                ; preds = %0
  %10 = call i8* @__cxa_allocate_exception(i64 16) #13
  %11 = bitcast i8* %10 to %"class.std::length_error"*
  invoke void @_ZNSt12length_errorC1EPKc(%"class.std::length_error"* nonnull align 8 dereferenceable(16) %11, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0))
          to label %12 unwind label %13

12:                                               ; preds = %9
  call void @__cxa_throw(i8* %10, i8* bitcast (i8** @_ZTISt12length_error to i8*), i8* bitcast (void (%"class.std::length_error"*)* @_ZNSt12length_errorD1Ev to i8*)) #14
  unreachable

13:                                               ; preds = %9
  %14 = landingpad { i8*, i32 }
          cleanup
  call void @__cxa_free_exception(i8* %10) #13
  br label %254

15:                                               ; preds = %0
  %16 = icmp eq i32 %7, 0
  br i1 %16, label %191, label %17

17:                                               ; preds = %15
  %18 = zext i32 %7 to i64
  %19 = shl nuw nsw i64 %18, 2
  %20 = call noalias nonnull i8* @_Znwm(i64 %19) #15
  %21 = bitcast i8* %20 to i32*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %20, i8 0, i64 %19, i1 false)
  %22 = load i32, i32* %1, align 4, !tbaa !8
  %23 = sext i32 %22 to i64
  %24 = icmp slt i32 %22, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %17
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.1, i64 0, i64 0)) #14
          to label %26 unwind label %38

26:                                               ; preds = %25
  unreachable

27:                                               ; preds = %17
  %28 = icmp eq i32 %22, 0
  br i1 %28, label %191, label %29

29:                                               ; preds = %27
  %30 = shl nuw nsw i64 %23, 2
  %31 = invoke noalias nonnull i8* @_Znwm(i64 %30) #15
          to label %32 unwind label %38

32:                                               ; preds = %29
  %33 = bitcast i8* %31 to i32*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %31, i8 0, i64 %30, i1 false)
  %34 = load i32, i32* %1, align 4, !tbaa !8
  %35 = icmp sgt i32 %34, 0
  br i1 %35, label %40, label %51

36:                                               ; preds = %44
  %37 = icmp sgt i32 %46, 0
  br i1 %37, label %180, label %51

38:                                               ; preds = %25, %29
  %39 = landingpad { i8*, i32 }
          cleanup
  br label %250

40:                                               ; preds = %32, %44
  %41 = phi i64 [ %45, %44 ], [ 0, %32 ]
  %42 = getelementptr inbounds i32, i32* %21, i64 %41
  %43 = invoke nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* nonnull align 4 dereferenceable(4) %42)
          to label %44 unwind label %49

44:                                               ; preds = %40
  %45 = add nuw nsw i64 %41, 1
  %46 = load i32, i32* %1, align 4, !tbaa !8
  %47 = sext i32 %46 to i64
  %48 = icmp slt i64 %45, %47
  br i1 %48, label %40, label %36, !llvm.loop !15

49:                                               ; preds = %40
  %50 = landingpad { i8*, i32 }
          cleanup
  br label %241

51:                                               ; preds = %184, %32, %36
  %52 = phi i32 [ %46, %36 ], [ %34, %32 ], [ %186, %184 ]
  %53 = load i32, i32* %2, align 4, !tbaa !8
  %54 = mul nsw i32 %53, %52
  %55 = icmp eq i8* %20, %31
  %56 = add i32 %52, 14
  %57 = icmp ult i32 %56, 15
  %58 = select i1 %55, i1 true, i1 %57
  br i1 %58, label %191, label %59

59:                                               ; preds = %51
  %60 = add nuw nsw i32 %52, 7
  %61 = sdiv i32 %60, 8
  %62 = call i32 @llvm.umax.i32(i32 %61, i32 1) #13
  %63 = sext i32 %62 to i64
  %64 = icmp ult i32 %62, 8
  br i1 %64, label %164, label %65

65:                                               ; preds = %59
  %66 = and i64 %63, -8
  %67 = insertelement <4 x i32> poison, i32 %54, i32 0
  %68 = shufflevector <4 x i32> %67, <4 x i32> poison, <4 x i32> zeroinitializer
  %69 = insertelement <4 x i32> poison, i32 %53, i32 0
  %70 = shufflevector <4 x i32> %69, <4 x i32> poison, <4 x i32> zeroinitializer
  %71 = insertelement <4 x i32> poison, i32 %53, i32 0
  %72 = shufflevector <4 x i32> %71, <4 x i32> poison, <4 x i32> zeroinitializer
  %73 = add nsw i64 %66, -8
  %74 = lshr exact i64 %73, 3
  %75 = add nuw nsw i64 %74, 1
  %76 = and i64 %75, 1
  %77 = icmp eq i64 %73, 0
  br i1 %77, label %129, label %78

78:                                               ; preds = %65
  %79 = and i64 %75, 4611686018427387902
  br label %80

80:                                               ; preds = %80, %78
  %81 = phi i64 [ 0, %78 ], [ %126, %80 ]
  %82 = phi <4 x i32> [ %68, %78 ], [ %124, %80 ]
  %83 = phi <4 x i32> [ %68, %78 ], [ %125, %80 ]
  %84 = phi i64 [ %79, %78 ], [ %127, %80 ]
  %85 = getelementptr inbounds i32, i32* %21, i64 %81
  %86 = bitcast i32* %85 to <4 x i32>*
  %87 = load <4 x i32>, <4 x i32>* %86, align 4, !tbaa !8
  %88 = getelementptr inbounds i32, i32* %85, i64 4
  %89 = bitcast i32* %88 to <4 x i32>*
  %90 = load <4 x i32>, <4 x i32>* %89, align 4, !tbaa !8
  %91 = mul nsw <4 x i32> %87, %70
  %92 = mul nsw <4 x i32> %90, %72
  %93 = getelementptr inbounds i32, i32* %33, i64 %81
  %94 = bitcast i32* %93 to <4 x i32>*
  %95 = load <4 x i32>, <4 x i32>* %94, align 4, !tbaa !8
  %96 = getelementptr inbounds i32, i32* %93, i64 4
  %97 = bitcast i32* %96 to <4 x i32>*
  %98 = load <4 x i32>, <4 x i32>* %97, align 4, !tbaa !8
  %99 = mul nsw <4 x i32> %91, %95
  %100 = mul nsw <4 x i32> %92, %98
  %101 = icmp slt <4 x i32> %82, %99
  %102 = icmp slt <4 x i32> %83, %100
  %103 = select <4 x i1> %101, <4 x i32> %99, <4 x i32> %82
  %104 = select <4 x i1> %102, <4 x i32> %100, <4 x i32> %83
  %105 = or i64 %81, 8
  %106 = getelementptr inbounds i32, i32* %21, i64 %105
  %107 = bitcast i32* %106 to <4 x i32>*
  %108 = load <4 x i32>, <4 x i32>* %107, align 4, !tbaa !8
  %109 = getelementptr inbounds i32, i32* %106, i64 4
  %110 = bitcast i32* %109 to <4 x i32>*
  %111 = load <4 x i32>, <4 x i32>* %110, align 4, !tbaa !8
  %112 = mul nsw <4 x i32> %108, %70
  %113 = mul nsw <4 x i32> %111, %72
  %114 = getelementptr inbounds i32, i32* %33, i64 %105
  %115 = bitcast i32* %114 to <4 x i32>*
  %116 = load <4 x i32>, <4 x i32>* %115, align 4, !tbaa !8
  %117 = getelementptr inbounds i32, i32* %114, i64 4
  %118 = bitcast i32* %117 to <4 x i32>*
  %119 = load <4 x i32>, <4 x i32>* %118, align 4, !tbaa !8
  %120 = mul nsw <4 x i32> %112, %116
  %121 = mul nsw <4 x i32> %113, %119
  %122 = icmp slt <4 x i32> %103, %120
  %123 = icmp slt <4 x i32> %104, %121
  %124 = select <4 x i1> %122, <4 x i32> %120, <4 x i32> %103
  %125 = select <4 x i1> %123, <4 x i32> %121, <4 x i32> %104
  %126 = add nuw i64 %81, 16
  %127 = add i64 %84, -2
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %129, label %80, !llvm.loop !16

129:                                              ; preds = %80, %65
  %130 = phi <4 x i32> [ undef, %65 ], [ %124, %80 ]
  %131 = phi <4 x i32> [ undef, %65 ], [ %125, %80 ]
  %132 = phi i64 [ 0, %65 ], [ %126, %80 ]
  %133 = phi <4 x i32> [ %68, %65 ], [ %124, %80 ]
  %134 = phi <4 x i32> [ %68, %65 ], [ %125, %80 ]
  %135 = icmp eq i64 %76, 0
  br i1 %135, label %157, label %136

136:                                              ; preds = %129
  %137 = getelementptr inbounds i32, i32* %21, i64 %132
  %138 = bitcast i32* %137 to <4 x i32>*
  %139 = load <4 x i32>, <4 x i32>* %138, align 4, !tbaa !8
  %140 = getelementptr inbounds i32, i32* %137, i64 4
  %141 = bitcast i32* %140 to <4 x i32>*
  %142 = load <4 x i32>, <4 x i32>* %141, align 4, !tbaa !8
  %143 = mul nsw <4 x i32> %139, %70
  %144 = mul nsw <4 x i32> %142, %72
  %145 = getelementptr inbounds i32, i32* %33, i64 %132
  %146 = bitcast i32* %145 to <4 x i32>*
  %147 = load <4 x i32>, <4 x i32>* %146, align 4, !tbaa !8
  %148 = getelementptr inbounds i32, i32* %145, i64 4
  %149 = bitcast i32* %148 to <4 x i32>*
  %150 = load <4 x i32>, <4 x i32>* %149, align 4, !tbaa !8
  %151 = mul nsw <4 x i32> %143, %147
  %152 = mul nsw <4 x i32> %144, %150
  %153 = icmp slt <4 x i32> %134, %152
  %154 = select <4 x i1> %153, <4 x i32> %152, <4 x i32> %134
  %155 = icmp slt <4 x i32> %133, %151
  %156 = select <4 x i1> %155, <4 x i32> %151, <4 x i32> %133
  br label %157

157:                                              ; preds = %129, %136
  %158 = phi <4 x i32> [ %130, %129 ], [ %156, %136 ]
  %159 = phi <4 x i32> [ %131, %129 ], [ %154, %136 ]
  %160 = icmp sgt <4 x i32> %158, %159
  %161 = select <4 x i1> %160, <4 x i32> %158, <4 x i32> %159
  %162 = call i32 @llvm.vector.reduce.smax.v4i32(<4 x i32> %161)
  %163 = icmp eq i64 %66, %63
  br i1 %163, label %191, label %164

164:                                              ; preds = %59, %157
  %165 = phi i64 [ 0, %59 ], [ %66, %157 ]
  %166 = phi i32 [ %54, %59 ], [ %162, %157 ]
  br label %167

167:                                              ; preds = %164, %167
  %168 = phi i64 [ %178, %167 ], [ %165, %164 ]
  %169 = phi i32 [ %177, %167 ], [ %166, %164 ]
  %170 = getelementptr inbounds i32, i32* %21, i64 %168
  %171 = load i32, i32* %170, align 4, !tbaa !8
  %172 = mul nsw i32 %171, %53
  %173 = getelementptr inbounds i32, i32* %33, i64 %168
  %174 = load i32, i32* %173, align 4, !tbaa !8
  %175 = mul nsw i32 %172, %174
  %176 = icmp slt i32 %169, %175
  %177 = select i1 %176, i32 %175, i32 %169
  %178 = add nuw i64 %168, 1
  %179 = icmp eq i64 %178, %63
  br i1 %179, label %191, label %167, !llvm.loop !17

180:                                              ; preds = %36, %184
  %181 = phi i64 [ %185, %184 ], [ 0, %36 ]
  %182 = getelementptr inbounds i32, i32* %33, i64 %181
  %183 = invoke nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* nonnull align 4 dereferenceable(4) %182)
          to label %184 unwind label %189

184:                                              ; preds = %180
  %185 = add nuw nsw i64 %181, 1
  %186 = load i32, i32* %1, align 4, !tbaa !8
  %187 = sext i32 %186 to i64
  %188 = icmp slt i64 %185, %187
  br i1 %188, label %180, label %51, !llvm.loop !18

189:                                              ; preds = %180
  %190 = landingpad { i8*, i32 }
          cleanup
  br label %241

191:                                              ; preds = %167, %157, %27, %15, %51
  %192 = phi i32* [ %33, %51 ], [ null, %15 ], [ null, %27 ], [ %33, %157 ], [ %33, %167 ]
  %193 = phi i32* [ %21, %51 ], [ null, %15 ], [ %21, %27 ], [ %21, %157 ], [ %21, %167 ]
  %194 = phi i32 [ %54, %51 ], [ 0, %15 ], [ 0, %27 ], [ %162, %157 ], [ %177, %167 ]
  %195 = invoke nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 %194)
          to label %196 unwind label %238

196:                                              ; preds = %191
  %197 = bitcast %"class.std::basic_ostream"* %195 to i8**
  %198 = load i8*, i8** %197, align 8, !tbaa !19
  %199 = getelementptr i8, i8* %198, i64 -24
  %200 = bitcast i8* %199 to i64*
  %201 = load i64, i64* %200, align 8
  %202 = bitcast %"class.std::basic_ostream"* %195 to i8*
  %203 = add nsw i64 %201, 240
  %204 = getelementptr inbounds i8, i8* %202, i64 %203
  %205 = bitcast i8* %204 to %"class.std::ctype"**
  %206 = load %"class.std::ctype"*, %"class.std::ctype"** %205, align 8, !tbaa !21
  %207 = icmp eq %"class.std::ctype"* %206, null
  br i1 %207, label %208, label %210

208:                                              ; preds = %196
  invoke void @_ZSt16__throw_bad_castv() #14
          to label %209 unwind label %238

209:                                              ; preds = %208
  unreachable

210:                                              ; preds = %196
  %211 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %206, i64 0, i32 8
  %212 = load i8, i8* %211, align 8, !tbaa !24
  %213 = icmp eq i8 %212, 0
  br i1 %213, label %217, label %214

214:                                              ; preds = %210
  %215 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %206, i64 0, i32 9, i64 10
  %216 = load i8, i8* %215, align 1, !tbaa !26
  br label %224

217:                                              ; preds = %210
  invoke void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull align 8 dereferenceable(570) %206)
          to label %218 unwind label %238

218:                                              ; preds = %217
  %219 = bitcast %"class.std::ctype"* %206 to i8 (%"class.std::ctype"*, i8)***
  %220 = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %219, align 8, !tbaa !19
  %221 = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %220, i64 6
  %222 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %221, align 8
  %223 = invoke signext i8 %222(%"class.std::ctype"* nonnull align 8 dereferenceable(570) %206, i8 signext 10)
          to label %224 unwind label %238

224:                                              ; preds = %218, %214
  %225 = phi i8 [ %216, %214 ], [ %223, %218 ]
  %226 = invoke nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %195, i8 signext %225)
          to label %227 unwind label %238

227:                                              ; preds = %224
  %228 = invoke nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %226)
          to label %229 unwind label %238

229:                                              ; preds = %227
  %230 = icmp eq i32* %192, null
  br i1 %230, label %233, label %231

231:                                              ; preds = %229
  %232 = bitcast i32* %192 to i8*
  call void @_ZdlPv(i8* nonnull %232) #13
  br label %233

233:                                              ; preds = %229, %231
  %234 = icmp eq i32* %193, null
  br i1 %234, label %237, label %235

235:                                              ; preds = %233
  %236 = bitcast i32* %193 to i8*
  call void @_ZdlPv(i8* nonnull %236) #13
  br label %237

237:                                              ; preds = %233, %235
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #13
  ret i32 0

238:                                              ; preds = %191, %208, %217, %218, %224, %227
  %239 = landingpad { i8*, i32 }
          cleanup
  %240 = icmp eq i32* %192, null
  br i1 %240, label %246, label %241

241:                                              ; preds = %189, %49, %238
  %242 = phi { i8*, i32 } [ %239, %238 ], [ %190, %189 ], [ %50, %49 ]
  %243 = phi i32* [ %193, %238 ], [ %21, %189 ], [ %21, %49 ]
  %244 = phi i32* [ %192, %238 ], [ %33, %189 ], [ %33, %49 ]
  %245 = bitcast i32* %244 to i8*
  call void @_ZdlPv(i8* nonnull %245) #13
  br label %246

246:                                              ; preds = %241, %238
  %247 = phi i32* [ %193, %238 ], [ %243, %241 ]
  %248 = phi { i8*, i32 } [ %239, %238 ], [ %242, %241 ]
  %249 = icmp eq i32* %247, null
  br i1 %249, label %254, label %250

250:                                              ; preds = %38, %246
  %251 = phi { i8*, i32 } [ %39, %38 ], [ %248, %246 ]
  %252 = phi i32* [ %21, %38 ], [ %247, %246 ]
  %253 = bitcast i32* %252 to i8*
  call void @_ZdlPv(i8* nonnull %253) #13
  br label %254

254:                                              ; preds = %246, %250, %13
  %255 = phi { i8*, i32 } [ %14, %13 ], [ %248, %246 ], [ %251, %250 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #13
  resume { i8*, i32 } %255
}

declare dso_local nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16), i32* nonnull align 4 dereferenceable(4)) local_unnamed_addr #0

declare dso_local i8* @__cxa_allocate_exception(i64) local_unnamed_addr

declare dso_local void @_ZNSt12length_errorC1EPKc(%"class.std::length_error"* nonnull align 8 dereferenceable(16), i8*) unnamed_addr #0

declare dso_local i32 @__gxx_personality_v0(...)

declare dso_local void @__cxa_free_exception(i8*) local_unnamed_addr

; Function Attrs: nounwind
declare dso_local void @_ZNSt12length_errorD1Ev(%"class.std::length_error"* nonnull align 8 dereferenceable(16)) unnamed_addr #1

declare dso_local void @__cxa_throw(i8*, i8*, i8*) local_unnamed_addr

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8), i32) local_unnamed_addr #0

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #6

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #8

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8), i8 signext) local_unnamed_addr #0

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8)) local_unnamed_addr #0

; Function Attrs: noreturn
declare dso_local void @_ZSt16__throw_bad_castv() local_unnamed_addr #6

declare dso_local void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull align 8 dereferenceable(570)) local_unnamed_addr #0

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_MaximizeProfit.cpp() #9 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #13
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.umax.i32(i32, i32) #10

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #11

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i32 @llvm.vector.reduce.smax.v4i32(<4 x i32>) #12

attributes #0 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nofree nounwind }
attributes #3 = { mustprogress nofree nosync nounwind readonly uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #5 = { norecurse uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #10 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #11 = { argmemonly nofree nounwind willreturn writeonly }
attributes #12 = { nofree nosync nounwind readnone willreturn }
attributes #13 = { nounwind }
attributes #14 = { noreturn }
attributes #15 = { allocsize(0) }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 0}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!9, !9, i64 0}
!9 = !{!"int", !6, i64 0}
!10 = distinct !{!10, !11, !12}
!11 = !{!"llvm.loop.mustprogress"}
!12 = !{!"llvm.loop.isvectorized", i32 1}
!13 = distinct !{!13, !11, !14, !12}
!14 = !{!"llvm.loop.unroll.runtime.disable"}
!15 = distinct !{!15, !11}
!16 = distinct !{!16, !11, !12}
!17 = distinct !{!17, !11, !14, !12}
!18 = distinct !{!18, !11}
!19 = !{!20, !20, i64 0}
!20 = !{!"vtable pointer", !7, i64 0}
!21 = !{!22, !5, i64 240}
!22 = !{!"_ZTSSt9basic_iosIcSt11char_traitsIcEE", !5, i64 216, !6, i64 224, !23, i64 225, !5, i64 232, !5, i64 240, !5, i64 248, !5, i64 256}
!23 = !{!"bool", !6, i64 0}
!24 = !{!25, !6, i64 56}
!25 = !{!"_ZTSSt5ctypeIcE", !5, i64 16, !23, i64 24, !5, i64 32, !5, i64 40, !5, i64 48, !6, i64 56, !6, i64 57, !6, i64 313, !6, i64 569}
!26 = !{!6, !6, i64 0}
