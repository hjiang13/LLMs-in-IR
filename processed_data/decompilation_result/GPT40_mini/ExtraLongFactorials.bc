; ModuleID = './ExtraLongFactorials.cpp'
source_filename = "./ExtraLongFactorials.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@str = private unnamed_addr constant [14 x i8] c"Invalid input\00", align 1

; Function Attrs: mustprogress nofree nounwind uwtable
define dso_local void @_Z4facti(i32 %0) local_unnamed_addr #0 {
  %2 = alloca [200 x i32], align 16
  %3 = bitcast [200 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 800, i8* nonnull %3) #6
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(800) %3, i8 0, i64 800, i1 false)
  %4 = getelementptr inbounds [200 x i32], [200 x i32]* %2, i64 0, i64 0
  store i32 1, i32* %4, align 16, !tbaa !3
  %5 = icmp slt i32 %0, 1
  br i1 %5, label %6, label %7

6:                                                ; preds = %9, %1
  br label %23

7:                                                ; preds = %1, %9
  %8 = phi i32 [ %10, %9 ], [ 1, %1 ]
  br label %12

9:                                                ; preds = %12
  %10 = add nuw i32 %8, 1
  %11 = icmp eq i32 %8, %0
  br i1 %11, label %6, label %7, !llvm.loop !7

12:                                               ; preds = %7, %12
  %13 = phi i64 [ 0, %7 ], [ %21, %12 ]
  %14 = phi i32 [ 0, %7 ], [ %20, %12 ]
  %15 = getelementptr inbounds [200 x i32], [200 x i32]* %2, i64 0, i64 %13
  %16 = load i32, i32* %15, align 4, !tbaa !3
  %17 = mul nsw i32 %16, %8
  %18 = add nsw i32 %17, %14
  %19 = srem i32 %18, 10
  store i32 %19, i32* %15, align 4, !tbaa !3
  %20 = sdiv i32 %18, 10
  %21 = add nuw nsw i64 %13, 1
  %22 = icmp eq i64 %21, 200
  br i1 %22, label %9, label %12, !llvm.loop !9

23:                                               ; preds = %67, %6
  %24 = phi i32 [ 199, %6 ], [ %68, %67 ]
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds [200 x i32], [200 x i32]* %2, i64 0, i64 %25
  %27 = load i32, i32* %26, align 4, !tbaa !3
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %35

29:                                               ; preds = %23
  %30 = add nsw i32 %24, -1
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds [200 x i32], [200 x i32]* %2, i64 0, i64 %31
  %33 = load i32, i32* %32, align 4, !tbaa !3
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %49, label %35

35:                                               ; preds = %61, %55, %49, %29, %23
  %36 = phi i32 [ %24, %23 ], [ %30, %29 ], [ %50, %49 ], [ %56, %55 ], [ %62, %61 ]
  %37 = icmp sgt i32 %36, -1
  br i1 %37, label %38, label %40

38:                                               ; preds = %35
  %39 = zext i32 %36 to i64
  br label %42

40:                                               ; preds = %67, %42, %35
  %41 = tail call i32 @putchar(i32 10)
  call void @llvm.lifetime.end.p0i8(i64 800, i8* nonnull %3) #6
  ret void

42:                                               ; preds = %38, %42
  %43 = phi i64 [ %39, %38 ], [ %48, %42 ]
  %44 = getelementptr inbounds [200 x i32], [200 x i32]* %2, i64 0, i64 %43
  %45 = load i32, i32* %44, align 4, !tbaa !3
  %46 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %45)
  %47 = icmp sgt i64 %43, 0
  %48 = add nsw i64 %43, -1
  br i1 %47, label %42, label %40, !llvm.loop !10

49:                                               ; preds = %29
  %50 = add nsw i32 %24, -2
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds [200 x i32], [200 x i32]* %2, i64 0, i64 %51
  %53 = load i32, i32* %52, align 4, !tbaa !3
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %35

55:                                               ; preds = %49
  %56 = add nsw i32 %24, -3
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds [200 x i32], [200 x i32]* %2, i64 0, i64 %57
  %59 = load i32, i32* %58, align 4, !tbaa !3
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %35

61:                                               ; preds = %55
  %62 = add nsw i32 %24, -4
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds [200 x i32], [200 x i32]* %2, i64 0, i64 %63
  %65 = load i32, i32* %64, align 4, !tbaa !3
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %35

67:                                               ; preds = %61
  %68 = add nsw i32 %24, -5
  %69 = icmp eq i32 %62, 0
  br i1 %69, label %40, label %23, !llvm.loop !11
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #3

; Function Attrs: mustprogress nofree norecurse nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #4 {
  %1 = alloca [200 x i32], align 16
  %2 = alloca i32, align 4
  %3 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #6
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* nonnull %2)
  %5 = load i32, i32* %2, align 4, !tbaa !3
  %6 = icmp slt i32 %5, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %0
  %8 = call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([14 x i8], [14 x i8]* @str, i64 0, i64 0))
  br label %60

9:                                                ; preds = %0
  %10 = bitcast [200 x i32]* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 800, i8* nonnull %10) #6
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(800) %10, i8 0, i64 800, i1 false) #6
  %11 = getelementptr inbounds [200 x i32], [200 x i32]* %1, i64 0, i64 0
  store i32 1, i32* %11, align 16, !tbaa !3
  %12 = icmp eq i32 %5, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %16, %9
  br label %30

14:                                               ; preds = %9, %16
  %15 = phi i32 [ %17, %16 ], [ 1, %9 ]
  br label %19

16:                                               ; preds = %19
  %17 = add nuw i32 %15, 1
  %18 = icmp eq i32 %15, %5
  br i1 %18, label %13, label %14, !llvm.loop !7

19:                                               ; preds = %19, %14
  %20 = phi i64 [ 0, %14 ], [ %28, %19 ]
  %21 = phi i32 [ 0, %14 ], [ %27, %19 ]
  %22 = getelementptr inbounds [200 x i32], [200 x i32]* %1, i64 0, i64 %20
  %23 = load i32, i32* %22, align 4, !tbaa !3
  %24 = mul nsw i32 %23, %15
  %25 = add nsw i32 %24, %21
  %26 = srem i32 %25, 10
  store i32 %26, i32* %22, align 4, !tbaa !3
  %27 = sdiv i32 %25, 10
  %28 = add nuw nsw i64 %20, 1
  %29 = icmp eq i64 %28, 200
  br i1 %29, label %16, label %19, !llvm.loop !9

30:                                               ; preds = %80, %13
  %31 = phi i32 [ 199, %13 ], [ %81, %80 ]
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds [200 x i32], [200 x i32]* %1, i64 0, i64 %32
  %34 = load i32, i32* %33, align 4, !tbaa !3
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %42

36:                                               ; preds = %30
  %37 = add nsw i32 %31, -1
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds [200 x i32], [200 x i32]* %1, i64 0, i64 %38
  %40 = load i32, i32* %39, align 4, !tbaa !3
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %62, label %42

42:                                               ; preds = %74, %68, %62, %36, %30
  %43 = phi i32 [ %31, %30 ], [ %37, %36 ], [ %63, %62 ], [ %69, %68 ], [ %75, %74 ]
  %44 = phi i32 [ %34, %30 ], [ %40, %36 ], [ %66, %62 ], [ %72, %68 ], [ %78, %74 ]
  %45 = icmp sgt i32 %43, -1
  br i1 %45, label %46, label %58

46:                                               ; preds = %42
  %47 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %44) #6
  %48 = icmp eq i32 %43, 0
  br i1 %48, label %58, label %49, !llvm.loop !10

49:                                               ; preds = %46
  %50 = zext i32 %43 to i64
  br label %51

51:                                               ; preds = %49, %51
  %52 = phi i64 [ %50, %49 ], [ %53, %51 ]
  %53 = add nsw i64 %52, -1
  %54 = getelementptr inbounds [200 x i32], [200 x i32]* %1, i64 0, i64 %53
  %55 = load i32, i32* %54, align 4, !tbaa !3
  %56 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %55) #6
  %57 = icmp sgt i64 %52, 1
  br i1 %57, label %51, label %58, !llvm.loop !10

58:                                               ; preds = %80, %51, %46, %42
  %59 = call i32 @putchar(i32 10) #6
  call void @llvm.lifetime.end.p0i8(i64 800, i8* nonnull %10) #6
  br label %60

60:                                               ; preds = %58, %7
  %61 = phi i32 [ 1, %7 ], [ 0, %58 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #6
  ret i32 %61

62:                                               ; preds = %36
  %63 = add nsw i32 %31, -2
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds [200 x i32], [200 x i32]* %1, i64 0, i64 %64
  %66 = load i32, i32* %65, align 4, !tbaa !3
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %42

68:                                               ; preds = %62
  %69 = add nsw i32 %31, -3
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds [200 x i32], [200 x i32]* %1, i64 0, i64 %70
  %72 = load i32, i32* %71, align 4, !tbaa !3
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %42

74:                                               ; preds = %68
  %75 = add nsw i32 %31, -4
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds [200 x i32], [200 x i32]* %1, i64 0, i64 %76
  %78 = load i32, i32* %77, align 4, !tbaa !3
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %42

80:                                               ; preds = %74
  %81 = add nsw i32 %31, -5
  %82 = icmp eq i32 %75, 0
  br i1 %82, label %58, label %30, !llvm.loop !11
}

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @__isoc99_scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i32 @puts(i8* nocapture noundef readonly) local_unnamed_addr #5

attributes #0 = { mustprogress nofree nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #2 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #3 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { mustprogress nofree norecurse nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nofree nounwind }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"int", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.mustprogress"}
!9 = distinct !{!9, !8}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !8}
