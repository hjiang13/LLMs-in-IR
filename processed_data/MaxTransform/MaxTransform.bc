; ModuleID = '../../Benchmarks/MaxTransform/MaxTransform.cpp'
source_filename = "../../Benchmarks/MaxTransform/MaxTransform.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@used = dso_local local_unnamed_addr global [1100000 x i32] zeroinitializer, align 16
@fa = dso_local local_unnamed_addr global [1100000 x i32] zeroinitializer, align 16
@sum = dso_local local_unnamed_addr global [1100000 x i32] zeroinitializer, align 16
@f = dso_local local_unnamed_addr global [1100000 x i32] zeroinitializer, align 16
@now = dso_local local_unnamed_addr global i32 0, align 4
@ans = dso_local local_unnamed_addr global i32 0, align 4
@T = dso_local local_unnamed_addr global i32 0, align 4
@cc = dso_local local_unnamed_addr global i32 0, align 4
@V = dso_local global [1100000 x %"class.std::vector"] zeroinitializer, align 16
@n = dso_local global i32 0, align 4
@a = dso_local global [1100000 x i32] zeroinitializer, align 16
@.str = private unnamed_addr constant [28 x i8] c"../input_files/MaxTransform\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@stdin = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.3 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.5 = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_MaxTransform.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal void @__cxx_global_array_dtor(i8* nocapture readnone %0) #3 section ".text.startup" personality i32 (...)* @__gxx_personality_v0 {
  br label %2

2:                                                ; preds = %10, %1
  %3 = phi %"class.std::vector"* [ getelementptr inbounds ([1100000 x %"class.std::vector"], [1100000 x %"class.std::vector"]* @V, i64 1, i64 0), %1 ], [ %4, %10 ]
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %3, i64 -1
  %5 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i32*, i32** %5, align 8, !tbaa !3
  %7 = icmp eq i32* %6, null
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %9 = bitcast i32* %6 to i8*
  tail call void @_ZdlPv(i8* nonnull %9) #13
  br label %10

10:                                               ; preds = %2, %8
  %11 = icmp eq %"class.std::vector"* %4, getelementptr inbounds ([1100000 x %"class.std::vector"], [1100000 x %"class.std::vector"]* @V, i64 0, i64 0)
  br i1 %11, label %12, label %2

12:                                               ; preds = %10
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable
define dso_local i32 @_Z2gfi(i32 %0) local_unnamed_addr #4 {
  %2 = sext i32 %0 to i64
  %3 = getelementptr inbounds [1100000 x i32], [1100000 x i32]* @fa, i64 0, i64 %2
  %4 = load i32, i32* %3, align 4, !tbaa !8
  %5 = icmp eq i32 %4, %0
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = tail call i32 @_Z2gfi(i32 %4)
  store i32 %7, i32* %3, align 4, !tbaa !8
  br label %8

8:                                                ; preds = %6, %1
  %9 = phi i32 [ %7, %6 ], [ %0, %1 ]
  ret i32 %9
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable
define dso_local void @_Z5mergeii(i32 %0, i32 %1) local_unnamed_addr #4 {
  %3 = tail call i32 @_Z2gfi(i32 %0)
  %4 = tail call i32 @_Z2gfi(i32 %1)
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds [1100000 x i32], [1100000 x i32]* @sum, i64 0, i64 %5
  %7 = load i32, i32* %6, align 4, !tbaa !8
  %8 = sext i32 %3 to i64
  %9 = getelementptr inbounds [1100000 x i32], [1100000 x i32]* @sum, i64 0, i64 %8
  %10 = load i32, i32* %9, align 4, !tbaa !8
  %11 = add nsw i32 %10, %7
  store i32 %11, i32* %9, align 4, !tbaa !8
  %12 = getelementptr inbounds [1100000 x i32], [1100000 x i32]* @fa, i64 0, i64 %5
  store i32 %3, i32* %12, align 4, !tbaa !8
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable
define dso_local void @_Z3addi(i32 %0) local_unnamed_addr #4 {
  %2 = sext i32 %0 to i64
  %3 = getelementptr inbounds [1100000 x i32], [1100000 x i32]* @used, i64 0, i64 %2
  store i32 1, i32* %3, align 4, !tbaa !8
  %4 = getelementptr inbounds [1100000 x i32], [1100000 x i32]* @sum, i64 0, i64 %2
  store i32 1, i32* %4, align 4, !tbaa !8
  %5 = add nsw i32 %0, -1
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds [1100000 x i32], [1100000 x i32]* @used, i64 0, i64 %6
  %8 = load i32, i32* %7, align 4, !tbaa !8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %32, label %10

10:                                               ; preds = %1
  %11 = load i32, i32* @now, align 4, !tbaa !8
  %12 = tail call i32 @_Z2gfi(i32 %5)
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds [1100000 x i32], [1100000 x i32]* @sum, i64 0, i64 %13
  %15 = load i32, i32* %14, align 4, !tbaa !8
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds [1100000 x i32], [1100000 x i32]* @f, i64 0, i64 %16
  %18 = load i32, i32* %17, align 4, !tbaa !8
  %19 = add i32 %11, 1000000007
  %20 = sub i32 %19, %18
  %21 = srem i32 %20, 1000000007
  store i32 %21, i32* @now, align 4, !tbaa !8
  %22 = tail call i32 @_Z2gfi(i32 %0) #13
  %23 = tail call i32 @_Z2gfi(i32 %5) #13
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds [1100000 x i32], [1100000 x i32]* @sum, i64 0, i64 %24
  %26 = load i32, i32* %25, align 4, !tbaa !8
  %27 = sext i32 %22 to i64
  %28 = getelementptr inbounds [1100000 x i32], [1100000 x i32]* @sum, i64 0, i64 %27
  %29 = load i32, i32* %28, align 4, !tbaa !8
  %30 = add nsw i32 %29, %26
  store i32 %30, i32* %28, align 4, !tbaa !8
  %31 = getelementptr inbounds [1100000 x i32], [1100000 x i32]* @fa, i64 0, i64 %24
  store i32 %22, i32* %31, align 4, !tbaa !8
  br label %32

32:                                               ; preds = %10, %1
  %33 = add nsw i32 %0, 1
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds [1100000 x i32], [1100000 x i32]* @used, i64 0, i64 %34
  %36 = load i32, i32* %35, align 4, !tbaa !8
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %60, label %38

38:                                               ; preds = %32
  %39 = load i32, i32* @now, align 4, !tbaa !8
  %40 = tail call i32 @_Z2gfi(i32 %33)
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds [1100000 x i32], [1100000 x i32]* @sum, i64 0, i64 %41
  %43 = load i32, i32* %42, align 4, !tbaa !8
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [1100000 x i32], [1100000 x i32]* @f, i64 0, i64 %44
  %46 = load i32, i32* %45, align 4, !tbaa !8
  %47 = add i32 %39, 1000000007
  %48 = sub i32 %47, %46
  %49 = srem i32 %48, 1000000007
  store i32 %49, i32* @now, align 4, !tbaa !8
  %50 = tail call i32 @_Z2gfi(i32 %0) #13
  %51 = tail call i32 @_Z2gfi(i32 %33) #13
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [1100000 x i32], [1100000 x i32]* @sum, i64 0, i64 %52
  %54 = load i32, i32* %53, align 4, !tbaa !8
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds [1100000 x i32], [1100000 x i32]* @sum, i64 0, i64 %55
  %57 = load i32, i32* %56, align 4, !tbaa !8
  %58 = add nsw i32 %57, %54
  store i32 %58, i32* %56, align 4, !tbaa !8
  %59 = getelementptr inbounds [1100000 x i32], [1100000 x i32]* @fa, i64 0, i64 %52
  store i32 %50, i32* %59, align 4, !tbaa !8
  br label %60

60:                                               ; preds = %38, %32
  %61 = load i32, i32* @now, align 4, !tbaa !8
  %62 = tail call i32 @_Z2gfi(i32 %0)
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds [1100000 x i32], [1100000 x i32]* @sum, i64 0, i64 %63
  %65 = load i32, i32* %64, align 4, !tbaa !8
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds [1100000 x i32], [1100000 x i32]* @f, i64 0, i64 %66
  %68 = load i32, i32* %67, align 4, !tbaa !8
  %69 = add nsw i32 %68, %61
  %70 = srem i32 %69, 1000000007
  store i32 %70, i32* @now, align 4, !tbaa !8
  %71 = tail call i32 @_Z2gfi(i32 1)
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds [1100000 x i32], [1100000 x i32]* @sum, i64 0, i64 %72
  %74 = load i32, i32* %73, align 4, !tbaa !8
  %75 = load i32, i32* @n, align 4, !tbaa !8
  %76 = tail call i32 @_Z2gfi(i32 %75)
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds [1100000 x i32], [1100000 x i32]* @sum, i64 0, i64 %77
  %79 = load i32, i32* %78, align 4, !tbaa !8
  %80 = add nsw i32 %74, -1
  %81 = icmp sgt i32 %74, %79
  %82 = select i1 %81, i32 %79, i32 %80
  %83 = icmp slt i32 %82, 1
  %84 = load i32, i32* @now, align 4, !tbaa !8
  br i1 %83, label %115, label %85

85:                                               ; preds = %60
  %86 = sext i32 %84 to i64
  %87 = zext i32 %82 to i64
  %88 = sext i32 %74 to i64
  %89 = add i32 %79, 1
  %90 = sext i32 %89 to i64
  %91 = mul nsw i64 %90, %88
  %92 = mul i64 %91, %87
  %93 = add nsw i64 %92, %86
  %94 = srem i64 %93, 1000000007
  %95 = add nuw nsw i32 %82, 1
  %96 = zext i32 %95 to i64
  %97 = mul nuw nsw i64 %96, %87
  %98 = lshr i64 %97, 1
  %99 = urem i64 %98, 1000000007
  %100 = add i32 %89, %74
  %101 = sext i32 %100 to i64
  %102 = mul nsw i64 %99, %101
  %103 = sub nsw i64 %94, %102
  %104 = srem i64 %103, 1000000007
  %105 = shl nuw nsw i32 %82, 1
  %106 = or i32 %105, 1
  %107 = sext i32 %106 to i64
  %108 = mul nsw i64 %97, %107
  %109 = sdiv i64 %108, 6
  %110 = add nsw i64 %104, %109
  %111 = srem i64 %110, 1000000007
  %112 = trunc i64 %111 to i32
  %113 = add nsw i32 %112, 1000000007
  %114 = urem i32 %113, 1000000007
  br label %115

115:                                              ; preds = %60, %85
  %116 = phi i32 [ %114, %85 ], [ %84, %60 ]
  store i32 %116, i32* @cc, align 4, !tbaa !8
  ret void
}

; Function Attrs: norecurse uwtable
define dso_local i32 @main() local_unnamed_addr #5 personality i32 (...)* @__gxx_personality_v0 {
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !10
  %2 = tail call %struct._IO_FILE* @freopen(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), %struct._IO_FILE* %1)
  %3 = tail call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i32* nonnull @n)
  %4 = load i32, i32* @n, align 4, !tbaa !8
  %5 = icmp slt i32 %4, 1
  br i1 %5, label %6, label %23

6:                                                ; preds = %75, %0
  %7 = phi i32 [ %4, %0 ], [ %80, %75 ]
  %8 = phi i32 [ 0, %0 ], [ %78, %75 ]
  %9 = sext i32 %7 to i64
  %10 = add i32 %7, 1
  %11 = sext i32 %10 to i64
  %12 = mul nsw i64 %9, %11
  %13 = sdiv i64 %12, 2
  %14 = srem i64 %13, 1000000007
  %15 = add nsw i64 %14, 1
  %16 = mul nsw i64 %15, %14
  %17 = sdiv i64 %16, 2
  %18 = srem i64 %17, 1000000007
  %19 = trunc i64 %18 to i32
  store i32 %19, i32* @T, align 4, !tbaa !8
  %20 = icmp slt i32 %7, 1
  br i1 %20, label %170, label %21

21:                                               ; preds = %6
  %22 = zext i32 %10 to i64
  br label %155

23:                                               ; preds = %0, %75
  %24 = phi i64 [ %79, %75 ], [ 1, %0 ]
  %25 = phi i32 [ %78, %75 ], [ 0, %0 ]
  %26 = getelementptr inbounds [1100000 x i32], [1100000 x i32]* @a, i64 0, i64 %24
  %27 = tail call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i32* nonnull %26)
  %28 = load i32, i32* %26, align 4, !tbaa !8
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds [1100000 x %"class.std::vector"], [1100000 x %"class.std::vector"]* @V, i64 0, i64 %29, i32 0, i32 0, i32 0, i32 1
  %31 = load i32*, i32** %30, align 8, !tbaa !11
  %32 = getelementptr inbounds [1100000 x %"class.std::vector"], [1100000 x %"class.std::vector"]* @V, i64 0, i64 %29, i32 0, i32 0, i32 0, i32 2
  %33 = load i32*, i32** %32, align 8, !tbaa !12
  %34 = icmp eq i32* %31, %33
  br i1 %34, label %38, label %35

35:                                               ; preds = %23
  %36 = trunc i64 %24 to i32
  store i32 %36, i32* %31, align 4, !tbaa !8
  %37 = getelementptr inbounds i32, i32* %31, i64 1
  store i32* %37, i32** %30, align 8, !tbaa !11
  br label %75

38:                                               ; preds = %23
  %39 = getelementptr inbounds [1100000 x %"class.std::vector"], [1100000 x %"class.std::vector"]* @V, i64 0, i64 %29, i32 0, i32 0, i32 0, i32 0
  %40 = load i32*, i32** %39, align 8, !tbaa !3
  %41 = ptrtoint i32* %31 to i64
  %42 = ptrtoint i32* %40 to i64
  %43 = sub i64 %41, %42
  %44 = ashr exact i64 %43, 2
  %45 = icmp eq i64 %43, 9223372036854775804
  br i1 %45, label %46, label %47

46:                                               ; preds = %38
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0)) #14
  unreachable

47:                                               ; preds = %38
  %48 = icmp eq i64 %43, 0
  %49 = select i1 %48, i64 1, i64 %44
  %50 = add nsw i64 %49, %44
  %51 = icmp ult i64 %50, %44
  %52 = icmp ugt i64 %50, 2305843009213693951
  %53 = or i1 %51, %52
  %54 = select i1 %53, i64 2305843009213693951, i64 %50
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %47
  %57 = shl nuw nsw i64 %54, 2
  %58 = tail call noalias nonnull i8* @_Znwm(i64 %57) #15
  %59 = bitcast i8* %58 to i32*
  br label %60

60:                                               ; preds = %56, %47
  %61 = phi i32* [ %59, %56 ], [ null, %47 ]
  %62 = getelementptr inbounds i32, i32* %61, i64 %44
  %63 = trunc i64 %24 to i32
  store i32 %63, i32* %62, align 4, !tbaa !8
  %64 = icmp sgt i64 %43, 0
  br i1 %64, label %65, label %68

65:                                               ; preds = %60
  %66 = bitcast i32* %61 to i8*
  %67 = bitcast i32* %40 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %66, i8* align 4 %67, i64 %43, i1 false) #13
  br label %68

68:                                               ; preds = %60, %65
  %69 = getelementptr inbounds i32, i32* %62, i64 1
  %70 = icmp eq i32* %40, null
  br i1 %70, label %73, label %71

71:                                               ; preds = %68
  %72 = bitcast i32* %40 to i8*
  tail call void @_ZdlPv(i8* nonnull %72) #13
  br label %73

73:                                               ; preds = %68, %71
  store i32* %61, i32** %39, align 8, !tbaa !3
  store i32* %69, i32** %30, align 8, !tbaa !11
  %74 = getelementptr inbounds i32, i32* %61, i64 %54
  store i32* %74, i32** %32, align 8, !tbaa !12
  br label %75

75:                                               ; preds = %35, %73
  %76 = load i32, i32* %26, align 4, !tbaa !8
  %77 = icmp slt i32 %25, %76
  %78 = select i1 %77, i32 %76, i32 %25
  %79 = add nuw nsw i64 %24, 1
  %80 = load i32, i32* @n, align 4, !tbaa !8
  %81 = sext i32 %80 to i64
  %82 = icmp slt i64 %24, %81
  br i1 %82, label %23, label %6, !llvm.loop !13

83:                                               ; preds = %155
  br i1 %20, label %170, label %84

84:                                               ; preds = %83
  %85 = zext i32 %10 to i64
  %86 = add nsw i64 %22, -1
  %87 = icmp ult i64 %86, 8
  br i1 %87, label %153, label %88

88:                                               ; preds = %84
  %89 = and i64 %86, -8
  %90 = or i64 %89, 1
  %91 = add nsw i64 %89, -8
  %92 = lshr exact i64 %91, 3
  %93 = add nuw nsw i64 %92, 1
  %94 = and i64 %93, 3
  %95 = icmp ult i64 %91, 24
  br i1 %95, label %133, label %96

96:                                               ; preds = %88
  %97 = and i64 %93, 4611686018427387900
  br label %98

98:                                               ; preds = %98, %96
  %99 = phi i64 [ 0, %96 ], [ %129, %98 ]
  %100 = phi <4 x i32> [ <i32 1, i32 2, i32 3, i32 4>, %96 ], [ %130, %98 ]
  %101 = phi i64 [ %97, %96 ], [ %131, %98 ]
  %102 = or i64 %99, 1
  %103 = getelementptr inbounds [1100000 x i32], [1100000 x i32]* @fa, i64 0, i64 %102
  %104 = add <4 x i32> %100, <i32 4, i32 4, i32 4, i32 4>
  %105 = bitcast i32* %103 to <4 x i32>*
  store <4 x i32> %100, <4 x i32>* %105, align 4, !tbaa !8
  %106 = getelementptr inbounds i32, i32* %103, i64 4
  %107 = bitcast i32* %106 to <4 x i32>*
  store <4 x i32> %104, <4 x i32>* %107, align 4, !tbaa !8
  %108 = add <4 x i32> %100, <i32 8, i32 8, i32 8, i32 8>
  %109 = or i64 %99, 9
  %110 = getelementptr inbounds [1100000 x i32], [1100000 x i32]* @fa, i64 0, i64 %109
  %111 = add <4 x i32> %100, <i32 12, i32 12, i32 12, i32 12>
  %112 = bitcast i32* %110 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %112, align 4, !tbaa !8
  %113 = getelementptr inbounds i32, i32* %110, i64 4
  %114 = bitcast i32* %113 to <4 x i32>*
  store <4 x i32> %111, <4 x i32>* %114, align 4, !tbaa !8
  %115 = add <4 x i32> %100, <i32 16, i32 16, i32 16, i32 16>
  %116 = or i64 %99, 17
  %117 = getelementptr inbounds [1100000 x i32], [1100000 x i32]* @fa, i64 0, i64 %116
  %118 = add <4 x i32> %100, <i32 20, i32 20, i32 20, i32 20>
  %119 = bitcast i32* %117 to <4 x i32>*
  store <4 x i32> %115, <4 x i32>* %119, align 4, !tbaa !8
  %120 = getelementptr inbounds i32, i32* %117, i64 4
  %121 = bitcast i32* %120 to <4 x i32>*
  store <4 x i32> %118, <4 x i32>* %121, align 4, !tbaa !8
  %122 = add <4 x i32> %100, <i32 24, i32 24, i32 24, i32 24>
  %123 = or i64 %99, 25
  %124 = getelementptr inbounds [1100000 x i32], [1100000 x i32]* @fa, i64 0, i64 %123
  %125 = add <4 x i32> %100, <i32 28, i32 28, i32 28, i32 28>
  %126 = bitcast i32* %124 to <4 x i32>*
  store <4 x i32> %122, <4 x i32>* %126, align 4, !tbaa !8
  %127 = getelementptr inbounds i32, i32* %124, i64 4
  %128 = bitcast i32* %127 to <4 x i32>*
  store <4 x i32> %125, <4 x i32>* %128, align 4, !tbaa !8
  %129 = add nuw i64 %99, 32
  %130 = add <4 x i32> %100, <i32 32, i32 32, i32 32, i32 32>
  %131 = add i64 %101, -4
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %133, label %98, !llvm.loop !15

133:                                              ; preds = %98, %88
  %134 = phi i64 [ 0, %88 ], [ %129, %98 ]
  %135 = phi <4 x i32> [ <i32 1, i32 2, i32 3, i32 4>, %88 ], [ %130, %98 ]
  %136 = icmp eq i64 %94, 0
  br i1 %136, label %151, label %137

137:                                              ; preds = %133, %137
  %138 = phi i64 [ %147, %137 ], [ %134, %133 ]
  %139 = phi <4 x i32> [ %148, %137 ], [ %135, %133 ]
  %140 = phi i64 [ %149, %137 ], [ %94, %133 ]
  %141 = or i64 %138, 1
  %142 = getelementptr inbounds [1100000 x i32], [1100000 x i32]* @fa, i64 0, i64 %141
  %143 = add <4 x i32> %139, <i32 4, i32 4, i32 4, i32 4>
  %144 = bitcast i32* %142 to <4 x i32>*
  store <4 x i32> %139, <4 x i32>* %144, align 4, !tbaa !8
  %145 = getelementptr inbounds i32, i32* %142, i64 4
  %146 = bitcast i32* %145 to <4 x i32>*
  store <4 x i32> %143, <4 x i32>* %146, align 4, !tbaa !8
  %147 = add nuw i64 %138, 8
  %148 = add <4 x i32> %139, <i32 8, i32 8, i32 8, i32 8>
  %149 = add i64 %140, -1
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %151, label %137, !llvm.loop !17

151:                                              ; preds = %137, %133
  %152 = icmp eq i64 %86, %89
  br i1 %152, label %170, label %153

153:                                              ; preds = %84, %151
  %154 = phi i64 [ 1, %84 ], [ %90, %151 ]
  br label %176

155:                                              ; preds = %21, %155
  %156 = phi i64 [ 1, %21 ], [ %157, %155 ]
  %157 = add nuw nsw i64 %156, 1
  %158 = mul nuw nsw i64 %157, %156
  %159 = shl nuw nsw i64 %156, 1
  %160 = or i64 %159, 1
  %161 = mul nsw i64 %158, %160
  %162 = udiv i64 %161, 6
  %163 = lshr i64 %158, 1
  %164 = add nuw nsw i64 %162, %163
  %165 = lshr i64 %164, 1
  %166 = urem i64 %165, 1000000007
  %167 = trunc i64 %166 to i32
  %168 = getelementptr inbounds [1100000 x i32], [1100000 x i32]* @f, i64 0, i64 %156
  store i32 %167, i32* %168, align 4, !tbaa !8
  %169 = icmp eq i64 %157, %22
  br i1 %169, label %83, label %155, !llvm.loop !19

170:                                              ; preds = %176, %151, %6, %83
  store i32 0, i32* @now, align 4, !tbaa !8
  %171 = icmp sgt i32 %8, 0
  br i1 %171, label %174, label %172

172:                                              ; preds = %170
  %173 = load i32, i32* @ans, align 4, !tbaa !8
  br label %195

174:                                              ; preds = %170
  %175 = zext i32 %8 to i64
  br label %182

176:                                              ; preds = %153, %176
  %177 = phi i64 [ %180, %176 ], [ %154, %153 ]
  %178 = getelementptr inbounds [1100000 x i32], [1100000 x i32]* @fa, i64 0, i64 %177
  %179 = trunc i64 %177 to i32
  store i32 %179, i32* %178, align 4, !tbaa !8
  %180 = add nuw nsw i64 %177, 1
  %181 = icmp eq i64 %180, %85
  br i1 %181, label %170, label %176, !llvm.loop !20

182:                                              ; preds = %174, %202
  %183 = phi i32 [ %19, %174 ], [ %203, %202 ]
  %184 = phi i64 [ 0, %174 ], [ %209, %202 ]
  %185 = getelementptr inbounds [1100000 x %"class.std::vector"], [1100000 x %"class.std::vector"]* @V, i64 0, i64 %184, i32 0, i32 0, i32 0, i32 1
  %186 = getelementptr inbounds [1100000 x %"class.std::vector"], [1100000 x %"class.std::vector"]* @V, i64 0, i64 %184, i32 0, i32 0, i32 0, i32 0
  %187 = load i32*, i32** %185, align 8, !tbaa !11
  %188 = load i32*, i32** %186, align 8, !tbaa !3
  %189 = ptrtoint i32* %187 to i64
  %190 = ptrtoint i32* %188 to i64
  %191 = sub i64 %189, %190
  %192 = lshr exact i64 %191, 2
  %193 = trunc i64 %192 to i32
  %194 = icmp sgt i32 %193, 0
  br i1 %194, label %211, label %202

195:                                              ; preds = %202, %172
  %196 = phi i32 [ %173, %172 ], [ %208, %202 ]
  %197 = add nsw i32 %196, 1000000007
  %198 = srem i32 %197, 1000000007
  store i32 %198, i32* @ans, align 4, !tbaa !8
  %199 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i32 %198)
  ret i32 0

200:                                              ; preds = %211
  %201 = load i32, i32* @T, align 4, !tbaa !8
  br label %202

202:                                              ; preds = %200, %182
  %203 = phi i32 [ %201, %200 ], [ %183, %182 ]
  %204 = load i32, i32* @ans, align 4, !tbaa !8
  %205 = add nsw i32 %203, %204
  %206 = load i32, i32* @cc, align 4, !tbaa !8
  %207 = sub i32 %205, %206
  %208 = srem i32 %207, 1000000007
  store i32 %208, i32* @ans, align 4, !tbaa !8
  %209 = add nuw nsw i64 %184, 1
  %210 = icmp eq i64 %209, %175
  br i1 %210, label %195, label %182, !llvm.loop !22

211:                                              ; preds = %182, %211
  %212 = phi i64 [ %216, %211 ], [ 0, %182 ]
  %213 = phi i32* [ %218, %211 ], [ %188, %182 ]
  %214 = getelementptr inbounds i32, i32* %213, i64 %212
  %215 = load i32, i32* %214, align 4, !tbaa !8
  tail call void @_Z3addi(i32 %215)
  %216 = add nuw nsw i64 %212, 1
  %217 = load i32*, i32** %185, align 8, !tbaa !11
  %218 = load i32*, i32** %186, align 8, !tbaa !3
  %219 = ptrtoint i32* %217 to i64
  %220 = ptrtoint i32* %218 to i64
  %221 = sub i64 %219, %220
  %222 = shl i64 %221, 30
  %223 = ashr i64 %222, 32
  %224 = icmp slt i64 %216, %223
  br i1 %224, label %211, label %200, !llvm.loop !23
}

declare dso_local %struct._IO_FILE* @freopen(i8*, i8*, %struct._IO_FILE*) local_unnamed_addr #0

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @__isoc99_scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #6

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #8

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #9

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #10

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_MaxTransform.cpp() #11 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #13
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(26400000) bitcast ([1100000 x %"class.std::vector"]* @V to i8*), i8 0, i64 26400000, i1 false) #13
  %2 = tail call i32 @__cxa_atexit(void (i8*)* nonnull @__cxx_global_array_dtor, i8* null, i8* nonnull @__dso_handle) #13
  ret void
}

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #12

attributes #0 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nofree nounwind }
attributes #3 = { nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { mustprogress nofree nosync nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { norecurse uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #10 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #11 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #12 = { argmemonly nofree nounwind willreturn writeonly }
attributes #13 = { nounwind }
attributes #14 = { noreturn }
attributes #15 = { allocsize(0) }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 0}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!9, !9, i64 0}
!9 = !{!"int", !6, i64 0}
!10 = !{!5, !5, i64 0}
!11 = !{!4, !5, i64 8}
!12 = !{!4, !5, i64 16}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.mustprogress"}
!15 = distinct !{!15, !14, !16}
!16 = !{!"llvm.loop.isvectorized", i32 1}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.unroll.disable"}
!19 = distinct !{!19, !14}
!20 = distinct !{!20, !14, !21, !16}
!21 = !{!"llvm.loop.unroll.runtime.disable"}
!22 = distinct !{!22, !14}
!23 = distinct !{!23, !14}
