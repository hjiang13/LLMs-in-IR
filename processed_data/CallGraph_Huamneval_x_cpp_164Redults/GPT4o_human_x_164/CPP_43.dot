Based on the provided Intermediate Representation (IR) code, we can analyze the function calls and construct a call graph in DOT format. The given IR code contains one defined function (`_Z17pairs_sum_to_zeroSt6vectorIiSaIiEE`) and one declared function (`@llvm.umax.i64`).

Here is the call graph in DOT format:

```dot
digraph CallGraph {
    // Nodes
    _Z17pairs_sum_to_zeroSt6vectorIiSaIiEE [label="_Z17pairs_sum_to_zeroSt6vectorIiSaIiEE"];
    llvm_umax_i64 [label="@llvm.umax.i64"];

    // Edges
    _Z17pairs_sum_to_zeroSt6vectorIiSaIiEE -> llvm_umax_i64;
}
```

### Explanation:
- **Nodes**: Each function is represented as a node. The `label` attribute is used to provide a user-friendly name for each function.
- **Edges**: The edge from `_Z17pairs_sum_to_zeroSt6vectorIiSaIiEE` to `llvm_umax_i64` indicates that the first function calls the second function.