To create the call graph from the given IR code, we will analyze the function definitions and their respective calls. In this code, we have a single function defined, which is `_Z14minSubArraySumSt6vectorIxSaIxEE`. However, since there are no calls to other functions in the provided IR code, the call graph will only include this single node without any edges.

Here is the output in DOT format:

```
digraph CallGraph {
    // Nodes
    "minSubArraySum(vector<long long, allocator<long long>>)" [label="minSubArraySum(vector<long long, allocator<long long>>)" shape="box"];
    
    // Edges
    // No function calls in the provided IR code, so no edges.
}
```

### Explanation:
- **Node:** Represents the function `minSubArraySum` which is defined in the IR code.
- **Edges:** There are no edges because the function does not call any other functions within its body as per the provided code snippet. 

If there were additional functions or calls in the code, we would list them as nodes and create edges between function calls accordingly.