Based on the provided Intermediate Representation (IR) code, we can extract the functions and their call relationships to create a call graph in DOT format. Here, we identify the functions and the edges connecting them based on the calls made within the functions.

### Call Graph in DOT Format

```dot
digraph CallGraph {
    // Nodes
    node [shape=box];
    sum_squares [label="_Z11sum_squaresSt6vectorIiSaIiEE"];
    llvm_umax [label="llvm.umax.i64"];

    // Edges
    sum_squares -> llvm_umax;
}
```

### Explanation

- **Nodes:**
  - `sum_squares`: Corresponds to the function `_Z11sum_squaresSt6vectorIiSaIiEE`, which is defined in the IR code.
  - `llvm_umax`: Corresponds to the external function `@llvm.umax.i64`, which is declared and called within the `sum_squares` function.

- **Edges:**
  - An edge from `sum_squares` to `llvm_umax` indicates that `sum_squares` calls the `llvm.umax.i64` function.

This representation provides a clear visual structure of the function call relationships defined in the given IR code.