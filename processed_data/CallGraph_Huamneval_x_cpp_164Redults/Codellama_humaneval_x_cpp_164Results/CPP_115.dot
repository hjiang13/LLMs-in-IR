Based on the provided Intermediate Representation (IR) code, we can analyze the function calls and create a call graph in the DOT format. The graph will include nodes for each function and edges representing calls between them.

Here's the call graph in DOT format:

```dot
digraph CallGraph {
    // Nodes
    "max_fill" [label="_Z8max_fillSt6vectorIS_IiSaIiEESaIS1_EEi"];
    "llvm.umax.i64" [label="llvm.umax.i64"];
    "llvm.vector.reduce.add.v4i32" [label="llvm.vector.reduce.add.v4i32"];

    // Edges
    "max_fill" -> "llvm.umax.i64";
    "max_fill" -> "llvm.vector.reduce.add.v4i32";
}
```

### Explanation:
1. **Nodes**: Each function in the IR code has been represented as a node. The `max_fill` function corresponds to the main function defined as `_Z8max_fillSt6vectorIS_IiSaIiEESaIS1_EEi`. The other two functions are declared but not defined in the provided code: `llvm.umax.i64` and `llvm.vector.reduce.add.v4i32`.

2. **Edges**: Arrows (`->`) indicate function calls. The `max_fill` function calls both `llvm.umax.i64` and `llvm.vector.reduce.add.v4i32`, which are evident from the `call` instructions in the IR code.

This representation gives a clear overview of the relationships between the functions in the given IR code.