After analyzing the provided IR code, I extracted the call graph and represented it in the dot file format. Here is the output:

```
digraph call_graph {
    node[shape=box, style=filled];

    label="Call Graph";

    node[label="_Z11rolling_maxSt6vectorIiSaIiEE"];
    node[label="_ZSt20__throw_length_errorPKc"];
    node[label="_Znwm"];
    node[label="_ZdlPv"];
    node[label="llvm.memmove.p0i8.p0i8.i64"];
    node[label="llvm.memset.p0i8.i64"];

    _Z11rolling_maxSt6vectorIiSaIiEE -> _ZSt20__throw_length_errorPKc[label="invoke"];
    _Z11rolling_maxSt6vectorIiSaIiEE -> _Znwm[label="invoke"];
    _Z11rolling_maxSt6vectorIiSaIiEE -> _ZdlPv[label="invoke"];
    _Z11rolling_maxSt6vectorIiSaIiEE -> llvm.memmove.p0i8.p0i8.i64[label="call"];
    _Z11rolling_maxSt6vectorIiSaIiEE -> llvm.memset.p0i8.i64[label="call"];
}
```

In this call graph, each node represents a function, and the edges represent the calls between functions. The labels on the edges indicate the type of call (invoke or call).

Note that I did not include the basic block content in the graph, as per your request.