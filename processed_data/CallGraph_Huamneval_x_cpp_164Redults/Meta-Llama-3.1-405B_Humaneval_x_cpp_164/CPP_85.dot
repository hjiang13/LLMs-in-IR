After analyzing the provided IR code, I extracted the call graph and represented it in the dot file format. Here is the result:

```
digraph call_graph {
    node[shape=box];
    edge[dir=back];

    label="Call Graph";

    "_Z3addSt6vectorIiSaIiEE"[label="add"];
    "llvm.vector.reduce.add.v4i32"[label="llvm.vector.reduce.add.v4i32"];

    "_Z3addSt6vectorIiSaIiEE" -> "llvm.vector.reduce.add.v4i32"[label=""];
}
```

This call graph shows that there is only one function call from the `add` function to the `llvm.vector.reduce.add.v4i32` function.

Note that the `add` function is the main function in this IR code, and it calls the `llvm.vector.reduce.add.v4i32` function, which is a built-in LLVM function for reducing a vector of integers.

Also, the basic blocks within the `add` function are not represented in this call graph, as per your request. If you would like to include them, please let me know, and I can provide an updated graph.