assert_statement,final_result,comment
"assert (encode(""TEST"") == ""tgst"");",pass,"To analyze the assertion, let's break down the `encode` function step by step.

1. The function takes a string message as input and initializes an empty string `out` to store the encoded message.

2. It iterates over each character in the input message.

3. For each character, it checks if the character is in lowercase (ASCII value between 97 and 122) or uppercase (ASCII value between 65 and 90). If it's lowercase, it converts it to uppercase by subtracting 32 from the ASCII value, and if it's uppercase, it converts it to lowercase by adding 32 to the ASCII value.

4. After swapping the case, it checks if the character is a vowel by searching for it in the `vowels` string. If it's a vowel, it increments the ASCII value by 2 to replace it with the letter that appears 2 places ahead of it in the English alphabet.

5. The modified character is then appended to the `out` string.

Now, let's apply this process to the input ""TEST"":

- 'T' (ASCII value 84) is uppercase, so it's converted to lowercase 't' (ASCII value 116).
- 't' is not a vowel, so it remains 't'.
- 'E' (ASCII value 69) is uppercase, so it's converted to lowercase 'e' (ASCII value 101).
- 'e' is a vowel, so it's replaced with 'g' (ASCII value 103, which is 2 more than 101).
- 'S' (ASCII value 83) is uppercase, so it's converted to lowercase 's' (ASCII value 115).
- 's' is not a vowel, so it remains 's'.
- 'T' (ASCII value 84) is uppercase, so it's converted to lowercase 't' (ASCII value 116).
- 't' is not a vowel, so it remains 't'.

The encoded message is ""tgst"".

### final result
                - **assertion result**: **pass**"
"assert (encode(""Mudasir"") == ""mWDCSKR"");",pass,"To analyze the assertion statement, let's go through the function step by step with the input ""Mudasir"".

1. The function iterates over each character in the string ""Mudasir"".

2. For the character 'M', it checks if it's a lowercase letter (between 97 and 122 in ASCII). Since 'M' is an uppercase letter (between 65 and 90 in ASCII), it converts it to lowercase by adding 32 to its ASCII value. So, 'M' becomes 'm'. Since 'm' is not a vowel, it simply adds 'm' to the output string.

3. For the character 'u', it checks if it's a lowercase letter. Since 'u' is a lowercase letter, it converts it to uppercase by subtracting 32 from its ASCII value. So, 'u' becomes 'U'. Then, it checks if 'U' is a vowel. Since 'U' is a vowel, it increments the ASCII value of 'U' by 2. So, 'U' becomes 'W'. It adds 'W' to the output string.

4. For the character 'd', it converts it to uppercase 'D'. Since 'D' is not a vowel, it simply adds 'D' to the output string.

5. For the character 'a', it converts it to uppercase 'A'. Then, it checks if 'A' is a vowel. Since 'A' is a vowel, it increments the ASCII value of 'A' by 2. So, 'A' becomes 'C'. It adds 'C' to the output string.

6. For the character 's', it converts it to uppercase 'S'. Since 'S' is not a vowel, it simply adds 'S' to the output string.

7. For the character 'i', it converts it to uppercase 'I'. Then, it checks if 'I' is a vowel. Since 'I' is a vowel, it increments the ASCII value of 'I' by 2. So, 'I' becomes 'K'. It adds 'K' to the output string.

8. For the character 'r', it converts it to uppercase 'R'. Since 'R' is not a vowel, it simply adds 'R' to the output string.

After processing all characters, the output string becomes ""mWDCSKR"".

### final result
                - **assertion result**: **pass**"
"assert (encode(""YES"") == ""ygs"");",pass,"To analyze the assertion, let's break down the `encode` function step by step:

1. The function iterates over each character in the input message.
2. For each character, it checks if the character is in lowercase (ASCII value between 97 and 122). If so, it converts it to uppercase by subtracting 32 from the ASCII value.
3. If the character is in uppercase (ASCII value between 65 and 90), it converts it to lowercase by adding 32 to the ASCII value.
4. It then checks if the character (after case conversion) is a vowel by searching for it in the `vowels` string. If it finds a match, it increments the character's ASCII value by 2.
5. The modified character is then appended to the output string.

Now, let's apply this process to the input ""YES"":

1. 'Y' (ASCII value 89) is converted to lowercase 'y' (ASCII value 121) because it's in uppercase.
2. 'y' is not a vowel in the original sense but 'Y' was, however, the conversion has taken place already so 'y' is treated as a consonant here and not incremented.
3. 'E' (ASCII value 69) is converted to lowercase 'e' (ASCII value 101) because it's in uppercase. 'e' is a vowel, so its ASCII value is incremented by 2, resulting in 'g' (ASCII value 103).
4. 'S' (ASCII value 83) is converted to lowercase 's' (ASCII value 115) because it's in uppercase.

The resulting encoded string is ""ygs"".

### final result
                - **assertion result**: **pass**"
"assert (encode(""This is a message"") == ""tHKS KS C MGSSCGG"");",pass,"To analyze the assertion, let's break down the `encode` function and apply it to the input ""This is a message"".

1. The function iterates over each character in the input string.
2. For each character, it swaps the case by checking the ASCII value. If the character is lowercase (ASCII value between 97 and 122), it subtracts 32 to convert it to uppercase. If the character is uppercase (ASCII value between 65 and 90), it adds 32 to convert it to lowercase.
3. After swapping the case, it checks if the character is a vowel by searching for it in the `vowels` string. If it finds the character in the `vowels` string, it adds 2 to the ASCII value of the character to replace it with the letter that appears 2 places ahead of it in the English alphabet.
4. The modified character is then appended to the `out` string.

Now, let's apply this process to the input ""This is a message"":

- 'T' (ASCII 84) is uppercase, so it becomes 't' (ASCII 116) after swapping case. 't' is not a vowel, so it remains 't'.
- 'h' (ASCII 104) is lowercase, so it becomes 'H' (ASCII 72) after swapping case. 'H' is not a vowel, so it remains 'H'.
- 'i' (ASCII 105) is lowercase, so it becomes 'I' (ASCII 73) after swapping case. 'I' is a vowel, so it becomes 'K' (ASCII 75) after adding 2.
- 's' (ASCII 115) is lowercase, so it becomes 'S' (ASCII 83) after swapping case. 'S' is not a vowel, so it remains 'S'.
- ' ' (space) is not modified.
- 'i' (ASCII 105) is lowercase, so it becomes 'I' (ASCII 73) after swapping case. 'I' is a vowel, so it becomes 'K' (ASCII 75) after adding 2.
- 's' (ASCII 115) is lowercase, so it becomes 'S' (ASCII 83) after swapping case. 'S' is not a vowel, so it remains 'S'.
- ' ' (space) is not modified.
- 'a' (ASCII 97) is lowercase, so it becomes 'A' (ASCII 65) after swapping case. 'A' is a vowel, so it becomes 'C' (ASCII 67) after adding 2.
- ' ' (space) is not modified.
- 'm' (ASCII 109) is lowercase, so it becomes 'M' (ASCII 77) after swapping case. 'M' is not a vowel, so it remains 'M'.
- 'e' (ASCII 101) is lowercase, so it becomes 'E' (ASCII 69) after swapping case. 'E' is a vowel, so it becomes 'G' (ASCII 71) after adding 2.
- 's' (ASCII 115) is lowercase, so it becomes 'S' (ASCII 83) after swapping case. 'S' is not a vowel, so it remains 'S'.
- 's' (ASCII 115) is lowercase, so it becomes 'S' (ASCII 83) after swapping case. 'S' is not a vowel, so it remains 'S'.
- 'a' (ASCII 97) is lowercase, so it becomes 'A' (ASCII 65) after swapping case. 'A' is a vowel, so it becomes 'C' (ASCII 67) after adding 2.
- 'g' (ASCII 103) is lowercase, so it becomes 'G' (ASCII 71) after swapping case. 'G' is not a vowel, so it remains 'G'.
- 'e' (ASCII 101) is lowercase, so it becomes 'E' (ASCII 69) after swapping case. 'E' is a vowel, so it becomes 'G' (ASCII 71) after adding 2.

The resulting string is ""tHKS KS C MGSSCGG"".

### final result
                - **assertion result**: **pass**"
"assert (encode(""I DoNt KnOw WhAt tO WrItE"") == ""k dQnT kNqW wHcT Tq wRkTg"");",pass,"To analyze the given assertion, let's break down the `encode` function and apply it step by step to the input string ""I DoNt KnOw WhAt tO WrItE"".

1. The function iterates over each character in the input string.
2. For each character, it checks if the character is in lowercase or uppercase and swaps its case. This is done by subtracting 32 from the ASCII value of the character if it's lowercase (since the ASCII values of 'a' to 'z' are 97 to 122, and those of 'A' to 'Z' are 65 to 90) or adding 32 if it's uppercase.
3. After swapping the case, the function checks if the character is a vowel by searching for it in the string ""aeiouAEIOU"". If the character is found, it adds 2 to the ASCII value of the character to replace it with the letter that appears 2 places ahead of it in the English alphabet.
4. The modified character is then appended to the output string `out`.

Now, let's apply this process to the input string ""I DoNt KnOw WhAt tO WrItE"":

- 'I' (105) is uppercase, so it becomes lowercase 'i' (105), then 'i' is a vowel, so it becomes 'k' (107) after adding 2.
- ' ' (space) remains unchanged.
- 'D' (68) is uppercase, so it becomes lowercase 'd' (100), then 'd' is not a vowel, so it remains 'd' (100).
- 'o' (111) is lowercase, so it becomes uppercase 'O' (79), then 'O' is a vowel, so it becomes 'Q' (81) after adding 2.
- 'N' (78) is uppercase, so it becomes lowercase 'n' (110), then 'n' is not a vowel, so it remains 'n' (110).
- 't' (116) is lowercase, so it becomes uppercase 'T' (84), then 'T' is not a vowel, so it remains 'T' (84).
- ' ' (space) remains unchanged.
- 'K' (75) is uppercase, so it becomes lowercase 'k' (107), then 'k' is not a vowel, so it remains 'k' (107).
- 'n' (110) is lowercase, so it becomes uppercase 'N' (78), then 'N' is not a vowel, so it remains 'N' (78).
- 'O' (79) is uppercase, so it becomes lowercase 'o' (111), then 'o' is a vowel, so it becomes 'q' (113) after adding 2.
- 'w' (119) is lowercase, so it becomes uppercase 'W' (87), then 'W' is not a vowel, so it remains 'W' (87).
- ' ' (space) remains unchanged.
- 'W' (87) is uppercase, so it becomes lowercase 'w' (119), then 'w' is not a vowel, so it remains 'w' (119).
- 'h' (104) is lowercase, so it becomes uppercase 'H' (72), then 'H' is not a vowel, so it remains 'H' (72).
- 'A' (65) is uppercase, so it becomes lowercase 'a' (97), then 'a' is a vowel, so it becomes 'c' (99) after adding 2.
- 't' (116) is lowercase, so it becomes uppercase 'T' (84), then 'T' is not a vowel, so it remains 'T' (84).
- ' ' (space) remains unchanged.
- 't' (116) is lowercase, so it becomes uppercase 'T' (84), then 'T' is not a vowel, so it remains 'T' (84).
- 'O' (79) is uppercase, so it becomes lowercase 'o' (111), then 'o' is a vowel, so it becomes 'q' (113) after adding 2.
- ' ' (space) remains unchanged.
- 'W' (87) is uppercase, so it becomes lowercase 'w' (119), then 'w' is not a vowel, so it remains 'w' (119).
- 'r' (114) is lowercase, so it becomes uppercase 'R' (82), then 'R' is not a vowel, so it remains 'R' (82).
- 'I' (73) is uppercase, so it becomes lowercase 'i' (105), then 'i' is a vowel, so it becomes 'k' (107) after adding 2.
- 't' (116) is lowercase, so it becomes uppercase 'T' (84), then 'T' is not a vowel, so it remains 'T' (84).
- 'E' (69) is uppercase, so it becomes lowercase 'e' (101), then 'e' is a vowel, so it becomes 'g' (103) after adding 2.

The resulting string after applying the `encode` function is indeed ""k dQnT kNqW wHcT Tq wRkTg"".

### final result
                - **assertion result**: **pass**"
