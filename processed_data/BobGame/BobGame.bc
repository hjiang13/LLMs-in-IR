; ModuleID = '../../Benchmarks/BobGame/BobGame.cpp'
source_filename = "../../Benchmarks/BobGame/BobGame.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.std::set" = type { %"class.std::_Rb_tree" }
%"class.std::_Rb_tree" = type { %"struct.std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>>::_Rb_tree_impl" }
%"struct.std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>>::_Rb_tree_impl" = type { %"struct.std::_Rb_tree_key_compare", %"struct.std::_Rb_tree_header" }
%"struct.std::_Rb_tree_key_compare" = type { %"struct.std::less" }
%"struct.std::less" = type { i8 }
%"struct.std::_Rb_tree_header" = type { %"struct.std::_Rb_tree_node_base", i64 }
%"struct.std::_Rb_tree_node_base" = type { i32, %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* }
%"struct.std::_Rb_tree_node" = type <{ %"struct.std::_Rb_tree_node_base", %"struct.__gnu_cxx::__aligned_membuf", [4 x i8] }>
%"struct.__gnu_cxx::__aligned_membuf" = type { [4 x i8] }

$__clang_call_terminate = comdat any

$_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@s = dso_local global [1234 x [1234 x i8]] zeroinitializer, align 16
@g = dso_local local_unnamed_addr global [1234 x [1234 x i32]] zeroinitializer, align 16
@.str = private unnamed_addr constant [23 x i8] c"../input_files/BobGame\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@stdin = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.2 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"LOSE\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"WIN %d\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_BobGame.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: norecurse uwtable
define dso_local i32 @main() local_unnamed_addr #3 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca %"class.std::set", align 8
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !3
  %5 = tail call %struct._IO_FILE* @freopen(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), %struct._IO_FILE* %4)
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #12
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1)
  %8 = bitcast i32* %2 to i8*
  %9 = getelementptr inbounds %"class.std::set", %"class.std::set"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = getelementptr inbounds i8, i8* %9, i64 8
  %11 = bitcast i8* %10 to i32*
  %12 = getelementptr inbounds i8, i8* %9, i64 16
  %13 = bitcast i8* %12 to %"struct.std::_Rb_tree_node_base"**
  %14 = getelementptr inbounds i8, i8* %9, i64 24
  %15 = bitcast i8* %14 to i8**
  %16 = getelementptr inbounds i8, i8* %9, i64 32
  %17 = bitcast i8* %16 to i8**
  %18 = getelementptr inbounds i8, i8* %9, i64 40
  %19 = bitcast i8* %18 to i64*
  %20 = bitcast i8* %12 to %"struct.std::_Rb_tree_node"**
  %21 = bitcast i8* %10 to %"struct.std::_Rb_tree_node_base"*
  %22 = bitcast i8* %14 to %"struct.std::_Rb_tree_node_base"**
  %23 = getelementptr inbounds %"class.std::set", %"class.std::set"* %3, i64 0, i32 0
  %24 = load i32, i32* %1, align 4, !tbaa !7
  %25 = add nsw i32 %24, -1
  store i32 %25, i32* %1, align 4, !tbaa !7
  %26 = icmp eq i32 %24, 0
  br i1 %26, label %402, label %27

27:                                               ; preds = %0, %398
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #12
  %28 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %2)
  %29 = load i32, i32* %2, align 4, !tbaa !7
  %30 = icmp sgt i32 %29, 0
  br i1 %30, label %33, label %393

31:                                               ; preds = %33
  %32 = icmp sgt i32 %38, 0
  br i1 %32, label %85, label %393

33:                                               ; preds = %27, %33
  %34 = phi i64 [ %37, %33 ], [ 0, %27 ]
  %35 = getelementptr inbounds [1234 x [1234 x i8]], [1234 x [1234 x i8]]* @s, i64 0, i64 %34, i64 0
  %36 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i8* nonnull %35)
  %37 = add nuw nsw i64 %34, 1
  %38 = load i32, i32* %2, align 4, !tbaa !7
  %39 = sext i32 %38 to i64
  %40 = icmp slt i64 %37, %39
  br i1 %40, label %33, label %31, !llvm.loop !9

41:                                               ; preds = %92
  %42 = icmp sgt i32 %93, 0
  br i1 %42, label %43, label %393

43:                                               ; preds = %41
  %44 = zext i32 %93 to i64
  %45 = and i64 %44, 1
  %46 = icmp eq i32 %93, 1
  %47 = and i64 %44, 4294967294
  %48 = icmp eq i64 %45, 0
  br label %49

49:                                               ; preds = %43, %81
  %50 = phi i64 [ 0, %43 ], [ %83, %81 ]
  %51 = phi i32 [ 0, %43 ], [ %82, %81 ]
  br i1 %46, label %69, label %52

52:                                               ; preds = %49, %407
  %53 = phi i64 [ %409, %407 ], [ 0, %49 ]
  %54 = phi i32 [ %408, %407 ], [ %51, %49 ]
  %55 = phi i64 [ %410, %407 ], [ %47, %49 ]
  %56 = getelementptr inbounds [1234 x [1234 x i8]], [1234 x [1234 x i8]]* @s, i64 0, i64 %50, i64 %53
  %57 = load i8, i8* %56, align 2, !tbaa !11
  %58 = icmp eq i8 %57, 75
  br i1 %58, label %59, label %63

59:                                               ; preds = %52
  %60 = getelementptr inbounds [1234 x [1234 x i32]], [1234 x [1234 x i32]]* @g, i64 0, i64 %50, i64 %53
  %61 = load i32, i32* %60, align 8, !tbaa !7
  %62 = xor i32 %61, %54
  br label %63

63:                                               ; preds = %59, %52
  %64 = phi i32 [ %62, %59 ], [ %54, %52 ]
  %65 = or i64 %53, 1
  %66 = getelementptr inbounds [1234 x [1234 x i8]], [1234 x [1234 x i8]]* @s, i64 0, i64 %50, i64 %65
  %67 = load i8, i8* %66, align 1, !tbaa !11
  %68 = icmp eq i8 %67, 75
  br i1 %68, label %403, label %407

69:                                               ; preds = %407, %49
  %70 = phi i32 [ undef, %49 ], [ %408, %407 ]
  %71 = phi i64 [ 0, %49 ], [ %409, %407 ]
  %72 = phi i32 [ %51, %49 ], [ %408, %407 ]
  br i1 %48, label %81, label %73

73:                                               ; preds = %69
  %74 = getelementptr inbounds [1234 x [1234 x i8]], [1234 x [1234 x i8]]* @s, i64 0, i64 %50, i64 %71
  %75 = load i8, i8* %74, align 1, !tbaa !11
  %76 = icmp eq i8 %75, 75
  br i1 %76, label %77, label %81

77:                                               ; preds = %73
  %78 = getelementptr inbounds [1234 x [1234 x i32]], [1234 x [1234 x i32]]* @g, i64 0, i64 %50, i64 %71
  %79 = load i32, i32* %78, align 4, !tbaa !7
  %80 = xor i32 %79, %72
  br label %81

81:                                               ; preds = %77, %73, %69
  %82 = phi i32 [ %70, %69 ], [ %80, %77 ], [ %72, %73 ]
  %83 = add nuw nsw i64 %50, 1
  %84 = icmp eq i64 %83, %44
  br i1 %84, label %278, label %49, !llvm.loop !12

85:                                               ; preds = %31, %92
  %86 = phi i32 [ %93, %92 ], [ %38, %31 ]
  %87 = phi i64 [ %94, %92 ], [ 0, %31 ]
  %88 = icmp eq i64 %87, 0
  %89 = add nuw i64 %87, 4294967295
  %90 = and i64 %89, 4294967295
  %91 = icmp sgt i32 %86, 0
  br i1 %91, label %97, label %92

92:                                               ; preds = %268, %85
  %93 = phi i32 [ %86, %85 ], [ %269, %268 ]
  %94 = add nuw nsw i64 %87, 1
  %95 = sext i32 %93 to i64
  %96 = icmp slt i64 %94, %95
  br i1 %96, label %85, label %41, !llvm.loop !13

97:                                               ; preds = %85, %268
  %98 = phi i32 [ %269, %268 ], [ %86, %85 ]
  %99 = phi i32 [ %270, %268 ], [ %86, %85 ]
  %100 = phi i64 [ %271, %268 ], [ 0, %85 ]
  %101 = getelementptr inbounds [1234 x [1234 x i8]], [1234 x [1234 x i8]]* @s, i64 0, i64 %87, i64 %100
  %102 = load i8, i8* %101, align 1, !tbaa !11
  %103 = icmp eq i8 %102, 88
  br i1 %103, label %104, label %106

104:                                              ; preds = %97
  %105 = getelementptr inbounds [1234 x [1234 x i32]], [1234 x [1234 x i32]]* @g, i64 0, i64 %87, i64 %100
  store i32 -1, i32* %105, align 4, !tbaa !7
  br label %268

106:                                              ; preds = %97
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %9) #12
  store i32 0, i32* %11, align 8, !tbaa !15
  store %"struct.std::_Rb_tree_node_base"* null, %"struct.std::_Rb_tree_node_base"** %13, align 8, !tbaa !20
  store i8* %10, i8** %15, align 8, !tbaa !21
  store i8* %10, i8** %17, align 8, !tbaa !22
  store i64 0, i64* %19, align 8, !tbaa !23
  br i1 %88, label %120, label %107

107:                                              ; preds = %106
  %108 = invoke noalias nonnull i8* @_Znwm(i64 40) #13
          to label %109 unwind label %117

109:                                              ; preds = %107
  %110 = getelementptr inbounds [1234 x [1234 x i32]], [1234 x [1234 x i32]]* @g, i64 0, i64 %90, i64 %100
  %111 = getelementptr inbounds i8, i8* %108, i64 32
  %112 = bitcast i8* %111 to i32*
  %113 = load i32, i32* %110, align 4, !tbaa !7
  store i32 %113, i32* %112, align 4, !tbaa !7
  %114 = bitcast i8* %108 to %"struct.std::_Rb_tree_node_base"*
  call void @_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_(i1 zeroext true, %"struct.std::_Rb_tree_node_base"* nonnull %114, %"struct.std::_Rb_tree_node_base"* nonnull %21, %"struct.std::_Rb_tree_node_base"* nonnull align 8 dereferenceable(32) %21) #12
  %115 = load i64, i64* %19, align 8, !tbaa !23
  %116 = add i64 %115, 1
  store i64 %116, i64* %19, align 8, !tbaa !23
  br label %120

117:                                              ; preds = %219, %166, %107
  %118 = landingpad { i8*, i32 }
          cleanup
  %119 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %20, align 8, !tbaa !20
  invoke void @_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE(%"class.std::_Rb_tree"* nonnull align 8 dereferenceable(48) %23, %"struct.std::_Rb_tree_node"* %119)
          to label %277 unwind label %274

120:                                              ; preds = %109, %106
  %121 = icmp eq i64 %100, 0
  br i1 %121, label %229, label %122

122:                                              ; preds = %120
  %123 = add nuw i64 %100, 4294967295
  %124 = and i64 %123, 4294967295
  %125 = getelementptr inbounds [1234 x [1234 x i32]], [1234 x [1234 x i32]]* @g, i64 0, i64 %87, i64 %124
  %126 = load i32, i32* %125, align 4
  %127 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %20, align 8, !tbaa !3
  %128 = icmp eq %"struct.std::_Rb_tree_node"* %127, null
  br i1 %128, label %143, label %129

129:                                              ; preds = %122, %129
  %130 = phi %"struct.std::_Rb_tree_node"* [ %139, %129 ], [ %127, %122 ]
  %131 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %130, i64 0, i32 1
  %132 = bitcast %"struct.__gnu_cxx::__aligned_membuf"* %131 to i32*
  %133 = load i32, i32* %132, align 4, !tbaa !7
  %134 = icmp slt i32 %126, %133
  %135 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %130, i64 0, i32 0, i32 2
  %136 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %130, i64 0, i32 0, i32 3
  %137 = select i1 %134, %"struct.std::_Rb_tree_node_base"** %135, %"struct.std::_Rb_tree_node_base"** %136
  %138 = bitcast %"struct.std::_Rb_tree_node_base"** %137 to %"struct.std::_Rb_tree_node"**
  %139 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %138, align 8, !tbaa !3
  %140 = icmp eq %"struct.std::_Rb_tree_node"* %139, null
  br i1 %140, label %141, label %129, !llvm.loop !24

141:                                              ; preds = %129
  %142 = getelementptr %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %130, i64 0, i32 0
  br i1 %134, label %143, label %149

143:                                              ; preds = %141, %122
  %144 = phi %"struct.std::_Rb_tree_node_base"* [ %142, %141 ], [ %21, %122 ]
  %145 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %22, align 8, !tbaa !21
  %146 = icmp eq %"struct.std::_Rb_tree_node_base"* %144, %145
  br i1 %146, label %157, label %147

147:                                              ; preds = %143
  %148 = call %"struct.std::_Rb_tree_node_base"* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* %144) #14
  br label %149

149:                                              ; preds = %147, %141
  %150 = phi %"struct.std::_Rb_tree_node_base"* [ %144, %147 ], [ %142, %141 ]
  %151 = phi %"struct.std::_Rb_tree_node_base"* [ %148, %147 ], [ %142, %141 ]
  %152 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %151, i64 1, i32 0
  %153 = load i32, i32* %152, align 4, !tbaa !7
  %154 = icmp sge i32 %153, %126
  %155 = icmp eq %"struct.std::_Rb_tree_node_base"* %150, null
  %156 = select i1 %154, i1 true, i1 %155
  br i1 %156, label %176, label %159

157:                                              ; preds = %143
  %158 = icmp eq %"struct.std::_Rb_tree_node_base"* %144, null
  br i1 %158, label %176, label %159

159:                                              ; preds = %149, %157
  %160 = phi %"struct.std::_Rb_tree_node_base"* [ %144, %157 ], [ %150, %149 ]
  %161 = icmp eq %"struct.std::_Rb_tree_node_base"* %160, %21
  br i1 %161, label %166, label %162

162:                                              ; preds = %159
  %163 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %160, i64 1, i32 0
  %164 = load i32, i32* %163, align 4, !tbaa !7
  %165 = icmp slt i32 %126, %164
  br label %166

166:                                              ; preds = %162, %159
  %167 = phi i1 [ true, %159 ], [ %165, %162 ]
  %168 = invoke noalias nonnull i8* @_Znwm(i64 40) #13
          to label %169 unwind label %117

169:                                              ; preds = %166
  %170 = getelementptr inbounds i8, i8* %168, i64 32
  %171 = bitcast i8* %170 to i32*
  %172 = load i32, i32* %125, align 4, !tbaa !7
  store i32 %172, i32* %171, align 4, !tbaa !7
  %173 = bitcast i8* %168 to %"struct.std::_Rb_tree_node_base"*
  call void @_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_(i1 zeroext %167, %"struct.std::_Rb_tree_node_base"* nonnull %173, %"struct.std::_Rb_tree_node_base"* nonnull %160, %"struct.std::_Rb_tree_node_base"* nonnull align 8 dereferenceable(32) %21) #12
  %174 = load i64, i64* %19, align 8, !tbaa !23
  %175 = add i64 %174, 1
  store i64 %175, i64* %19, align 8, !tbaa !23
  br label %176

176:                                              ; preds = %169, %157, %149
  br i1 %88, label %229, label %177

177:                                              ; preds = %176
  %178 = getelementptr inbounds [1234 x [1234 x i32]], [1234 x [1234 x i32]]* @g, i64 0, i64 %90, i64 %124
  %179 = load i32, i32* %178, align 4
  %180 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %20, align 8, !tbaa !3
  %181 = icmp eq %"struct.std::_Rb_tree_node"* %180, null
  br i1 %181, label %196, label %182

182:                                              ; preds = %177, %182
  %183 = phi %"struct.std::_Rb_tree_node"* [ %192, %182 ], [ %180, %177 ]
  %184 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %183, i64 0, i32 1
  %185 = bitcast %"struct.__gnu_cxx::__aligned_membuf"* %184 to i32*
  %186 = load i32, i32* %185, align 4, !tbaa !7
  %187 = icmp slt i32 %179, %186
  %188 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %183, i64 0, i32 0, i32 2
  %189 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %183, i64 0, i32 0, i32 3
  %190 = select i1 %187, %"struct.std::_Rb_tree_node_base"** %188, %"struct.std::_Rb_tree_node_base"** %189
  %191 = bitcast %"struct.std::_Rb_tree_node_base"** %190 to %"struct.std::_Rb_tree_node"**
  %192 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %191, align 8, !tbaa !3
  %193 = icmp eq %"struct.std::_Rb_tree_node"* %192, null
  br i1 %193, label %194, label %182, !llvm.loop !24

194:                                              ; preds = %182
  %195 = getelementptr %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %183, i64 0, i32 0
  br i1 %187, label %196, label %202

196:                                              ; preds = %194, %177
  %197 = phi %"struct.std::_Rb_tree_node_base"* [ %195, %194 ], [ %21, %177 ]
  %198 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %22, align 8, !tbaa !21
  %199 = icmp eq %"struct.std::_Rb_tree_node_base"* %197, %198
  br i1 %199, label %210, label %200

200:                                              ; preds = %196
  %201 = call %"struct.std::_Rb_tree_node_base"* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* %197) #14
  br label %202

202:                                              ; preds = %200, %194
  %203 = phi %"struct.std::_Rb_tree_node_base"* [ %197, %200 ], [ %195, %194 ]
  %204 = phi %"struct.std::_Rb_tree_node_base"* [ %201, %200 ], [ %195, %194 ]
  %205 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %204, i64 1, i32 0
  %206 = load i32, i32* %205, align 4, !tbaa !7
  %207 = icmp sge i32 %206, %179
  %208 = icmp eq %"struct.std::_Rb_tree_node_base"* %203, null
  %209 = select i1 %207, i1 true, i1 %208
  br i1 %209, label %229, label %212

210:                                              ; preds = %196
  %211 = icmp eq %"struct.std::_Rb_tree_node_base"* %197, null
  br i1 %211, label %229, label %212

212:                                              ; preds = %202, %210
  %213 = phi %"struct.std::_Rb_tree_node_base"* [ %197, %210 ], [ %203, %202 ]
  %214 = icmp eq %"struct.std::_Rb_tree_node_base"* %213, %21
  br i1 %214, label %219, label %215

215:                                              ; preds = %212
  %216 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %213, i64 1, i32 0
  %217 = load i32, i32* %216, align 4, !tbaa !7
  %218 = icmp slt i32 %179, %217
  br label %219

219:                                              ; preds = %215, %212
  %220 = phi i1 [ true, %212 ], [ %218, %215 ]
  %221 = invoke noalias nonnull i8* @_Znwm(i64 40) #13
          to label %222 unwind label %117

222:                                              ; preds = %219
  %223 = getelementptr inbounds i8, i8* %221, i64 32
  %224 = bitcast i8* %223 to i32*
  %225 = load i32, i32* %178, align 4, !tbaa !7
  store i32 %225, i32* %224, align 4, !tbaa !7
  %226 = bitcast i8* %221 to %"struct.std::_Rb_tree_node_base"*
  call void @_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_(i1 zeroext %220, %"struct.std::_Rb_tree_node_base"* nonnull %226, %"struct.std::_Rb_tree_node_base"* nonnull %213, %"struct.std::_Rb_tree_node_base"* nonnull align 8 dereferenceable(32) %21) #12
  %227 = load i64, i64* %19, align 8, !tbaa !23
  %228 = add i64 %227, 1
  store i64 %228, i64* %19, align 8, !tbaa !23
  br label %229

229:                                              ; preds = %222, %210, %202, %120, %176
  %230 = getelementptr inbounds [1234 x [1234 x i32]], [1234 x [1234 x i32]]* @g, i64 0, i64 %87, i64 %100
  %231 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %20, align 8, !tbaa !20
  %232 = icmp eq %"struct.std::_Rb_tree_node"* %231, null
  store i32 0, i32* %230, align 4, !tbaa !7
  br i1 %232, label %262, label %234

233:                                              ; preds = %253
  store i32 %261, i32* %230, align 4, !tbaa !7
  br label %234

234:                                              ; preds = %229, %233
  %235 = phi i32 [ %261, %233 ], [ 0, %229 ]
  br label %236

236:                                              ; preds = %234, %236
  %237 = phi %"struct.std::_Rb_tree_node"* [ %249, %236 ], [ %231, %234 ]
  %238 = phi %"struct.std::_Rb_tree_node_base"* [ %246, %236 ], [ %21, %234 ]
  %239 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %237, i64 0, i32 1
  %240 = bitcast %"struct.__gnu_cxx::__aligned_membuf"* %239 to i32*
  %241 = load i32, i32* %240, align 4, !tbaa !7
  %242 = icmp slt i32 %241, %235
  %243 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %237, i64 0, i32 0, i32 3
  %244 = getelementptr %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %237, i64 0, i32 0
  %245 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %237, i64 0, i32 0, i32 2
  %246 = select i1 %242, %"struct.std::_Rb_tree_node_base"* %238, %"struct.std::_Rb_tree_node_base"* %244
  %247 = select i1 %242, %"struct.std::_Rb_tree_node_base"** %243, %"struct.std::_Rb_tree_node_base"** %245
  %248 = bitcast %"struct.std::_Rb_tree_node_base"** %247 to %"struct.std::_Rb_tree_node"**
  %249 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %248, align 8, !tbaa !3
  %250 = icmp eq %"struct.std::_Rb_tree_node"* %249, null
  br i1 %250, label %251, label %236, !llvm.loop !25

251:                                              ; preds = %236
  %252 = icmp eq %"struct.std::_Rb_tree_node_base"* %246, %21
  br i1 %252, label %262, label %253

253:                                              ; preds = %251
  %254 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %238, i64 1, i32 0
  %255 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %244, i64 1, i32 0
  %256 = select i1 %242, i32* %254, i32* %255
  %257 = load i32, i32* %256, align 4, !tbaa !7
  %258 = icmp slt i32 %235, %257
  %259 = select i1 %258, %"struct.std::_Rb_tree_node_base"* %21, %"struct.std::_Rb_tree_node_base"* %246
  %260 = icmp eq %"struct.std::_Rb_tree_node_base"* %259, %21
  %261 = add nuw nsw i32 %235, 1
  br i1 %260, label %262, label %233

262:                                              ; preds = %253, %251, %229
  invoke void @_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE(%"class.std::_Rb_tree"* nonnull align 8 dereferenceable(48) %23, %"struct.std::_Rb_tree_node"* %231)
          to label %266 unwind label %263

263:                                              ; preds = %262
  %264 = landingpad { i8*, i32 }
          catch i8* null
  %265 = extractvalue { i8*, i32 } %264, 0
  call void @__clang_call_terminate(i8* %265) #15
  unreachable

266:                                              ; preds = %262
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %9) #12
  %267 = load i32, i32* %2, align 4, !tbaa !7
  br label %268

268:                                              ; preds = %266, %104
  %269 = phi i32 [ %267, %266 ], [ %98, %104 ]
  %270 = phi i32 [ %267, %266 ], [ %99, %104 ]
  %271 = add nuw nsw i64 %100, 1
  %272 = sext i32 %270 to i64
  %273 = icmp slt i64 %271, %272
  br i1 %273, label %97, label %92, !llvm.loop !26

274:                                              ; preds = %117
  %275 = landingpad { i8*, i32 }
          catch i8* null
  %276 = extractvalue { i8*, i32 } %275, 0
  call void @__clang_call_terminate(i8* %276) #15
  unreachable

277:                                              ; preds = %117
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %9) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #12
  resume { i8*, i32 } %118

278:                                              ; preds = %81
  %279 = icmp eq i32 %82, 0
  br i1 %279, label %393, label %280

280:                                              ; preds = %278
  br i1 %42, label %281, label %395

281:                                              ; preds = %280
  %282 = zext i32 %93 to i64
  %283 = icmp eq i32 %93, 1
  br label %284

284:                                              ; preds = %281, %362
  %285 = phi i64 [ 0, %281 ], [ %364, %362 ]
  %286 = phi i32 [ 0, %281 ], [ %363, %362 ]
  %287 = icmp eq i64 %285, 0
  %288 = add nuw i64 %285, 4294967295
  %289 = and i64 %288, 4294967295
  br i1 %287, label %366, label %290

290:                                              ; preds = %284
  %291 = getelementptr inbounds [1234 x [1234 x i8]], [1234 x [1234 x i8]]* @s, i64 0, i64 %285, i64 0
  %292 = load i8, i8* %291, align 2, !tbaa !11
  %293 = icmp eq i8 %292, 75
  br i1 %293, label %294, label %307

294:                                              ; preds = %290
  %295 = getelementptr inbounds [1234 x [1234 x i8]], [1234 x [1234 x i8]]* @s, i64 0, i64 %289, i64 0
  %296 = load i8, i8* %295, align 2, !tbaa !11
  %297 = icmp eq i8 %296, 88
  br i1 %297, label %307, label %298

298:                                              ; preds = %294
  %299 = getelementptr inbounds [1234 x [1234 x i32]], [1234 x [1234 x i32]]* @g, i64 0, i64 %289, i64 0
  %300 = load i32, i32* %299, align 8, !tbaa !7
  %301 = getelementptr inbounds [1234 x [1234 x i32]], [1234 x [1234 x i32]]* @g, i64 0, i64 %285, i64 0
  %302 = load i32, i32* %301, align 8, !tbaa !7
  %303 = xor i32 %302, %300
  %304 = icmp eq i32 %303, %82
  %305 = zext i1 %304 to i32
  %306 = add nsw i32 %286, %305
  br label %307

307:                                              ; preds = %294, %298, %290
  %308 = phi i32 [ %286, %290 ], [ %286, %294 ], [ %306, %298 ]
  br i1 %283, label %362, label %309

309:                                              ; preds = %307, %358
  %310 = phi i64 [ %360, %358 ], [ 1, %307 ]
  %311 = phi i32 [ %359, %358 ], [ %308, %307 ]
  %312 = getelementptr inbounds [1234 x [1234 x i8]], [1234 x [1234 x i8]]* @s, i64 0, i64 %285, i64 %310
  %313 = load i8, i8* %312, align 1, !tbaa !11
  %314 = icmp eq i8 %313, 75
  br i1 %314, label %315, label %358

315:                                              ; preds = %309
  %316 = getelementptr inbounds [1234 x [1234 x i8]], [1234 x [1234 x i8]]* @s, i64 0, i64 %289, i64 %310
  %317 = load i8, i8* %316, align 1, !tbaa !11
  %318 = icmp eq i8 %317, 88
  br i1 %318, label %328, label %319

319:                                              ; preds = %315
  %320 = getelementptr inbounds [1234 x [1234 x i32]], [1234 x [1234 x i32]]* @g, i64 0, i64 %289, i64 %310
  %321 = load i32, i32* %320, align 4, !tbaa !7
  %322 = getelementptr inbounds [1234 x [1234 x i32]], [1234 x [1234 x i32]]* @g, i64 0, i64 %285, i64 %310
  %323 = load i32, i32* %322, align 4, !tbaa !7
  %324 = xor i32 %323, %321
  %325 = icmp eq i32 %324, %82
  %326 = zext i1 %325 to i32
  %327 = add nsw i32 %311, %326
  br label %328

328:                                              ; preds = %315, %319
  %329 = phi i32 [ %311, %315 ], [ %327, %319 ]
  %330 = add nuw i64 %310, 4294967295
  %331 = and i64 %330, 4294967295
  %332 = getelementptr inbounds [1234 x [1234 x i8]], [1234 x [1234 x i8]]* @s, i64 0, i64 %285, i64 %331
  %333 = load i8, i8* %332, align 1, !tbaa !11
  %334 = icmp eq i8 %333, 88
  br i1 %334, label %344, label %335

335:                                              ; preds = %328
  %336 = getelementptr inbounds [1234 x [1234 x i32]], [1234 x [1234 x i32]]* @g, i64 0, i64 %285, i64 %331
  %337 = load i32, i32* %336, align 4, !tbaa !7
  %338 = getelementptr inbounds [1234 x [1234 x i32]], [1234 x [1234 x i32]]* @g, i64 0, i64 %285, i64 %310
  %339 = load i32, i32* %338, align 4, !tbaa !7
  %340 = xor i32 %339, %337
  %341 = icmp eq i32 %340, %82
  %342 = zext i1 %341 to i32
  %343 = add nsw i32 %329, %342
  br label %344

344:                                              ; preds = %328, %335
  %345 = phi i32 [ %329, %328 ], [ %343, %335 ]
  %346 = getelementptr inbounds [1234 x [1234 x i8]], [1234 x [1234 x i8]]* @s, i64 0, i64 %289, i64 %331
  %347 = load i8, i8* %346, align 1, !tbaa !11
  %348 = icmp eq i8 %347, 88
  br i1 %348, label %358, label %349

349:                                              ; preds = %344
  %350 = getelementptr inbounds [1234 x [1234 x i32]], [1234 x [1234 x i32]]* @g, i64 0, i64 %289, i64 %331
  %351 = load i32, i32* %350, align 4, !tbaa !7
  %352 = getelementptr inbounds [1234 x [1234 x i32]], [1234 x [1234 x i32]]* @g, i64 0, i64 %285, i64 %310
  %353 = load i32, i32* %352, align 4, !tbaa !7
  %354 = xor i32 %353, %351
  %355 = icmp eq i32 %354, %82
  %356 = zext i1 %355 to i32
  %357 = add nsw i32 %345, %356
  br label %358

358:                                              ; preds = %349, %344, %309
  %359 = phi i32 [ %345, %344 ], [ %311, %309 ], [ %357, %349 ]
  %360 = add nuw nsw i64 %310, 1
  %361 = icmp eq i64 %360, %282
  br i1 %361, label %362, label %309, !llvm.loop !27

362:                                              ; preds = %358, %389, %307
  %363 = phi i32 [ %308, %307 ], [ %390, %389 ], [ %359, %358 ]
  %364 = add nuw nsw i64 %285, 1
  %365 = icmp eq i64 %364, %282
  br i1 %365, label %395, label %284, !llvm.loop !29

366:                                              ; preds = %284, %389
  %367 = phi i64 [ %391, %389 ], [ 0, %284 ]
  %368 = phi i32 [ %390, %389 ], [ %286, %284 ]
  %369 = getelementptr inbounds [1234 x [1234 x i8]], [1234 x [1234 x i8]]* @s, i64 0, i64 0, i64 %367
  %370 = load i8, i8* %369, align 1, !tbaa !11
  %371 = icmp eq i8 %370, 75
  %372 = icmp ne i64 %367, 0
  %373 = select i1 %371, i1 %372, i1 false
  br i1 %373, label %374, label %389

374:                                              ; preds = %366
  %375 = add nuw i64 %367, 4294967295
  %376 = and i64 %375, 4294967295
  %377 = getelementptr inbounds [1234 x [1234 x i8]], [1234 x [1234 x i8]]* @s, i64 0, i64 0, i64 %376
  %378 = load i8, i8* %377, align 1, !tbaa !11
  %379 = icmp eq i8 %378, 88
  br i1 %379, label %389, label %380

380:                                              ; preds = %374
  %381 = getelementptr inbounds [1234 x [1234 x i32]], [1234 x [1234 x i32]]* @g, i64 0, i64 0, i64 %376
  %382 = load i32, i32* %381, align 4, !tbaa !7
  %383 = getelementptr inbounds [1234 x [1234 x i32]], [1234 x [1234 x i32]]* @g, i64 0, i64 0, i64 %367
  %384 = load i32, i32* %383, align 4, !tbaa !7
  %385 = xor i32 %384, %382
  %386 = icmp eq i32 %385, %82
  %387 = zext i1 %386 to i32
  %388 = add nsw i32 %368, %387
  br label %389

389:                                              ; preds = %374, %380, %366
  %390 = phi i32 [ %368, %366 ], [ %368, %374 ], [ %388, %380 ]
  %391 = add nuw nsw i64 %367, 1
  %392 = icmp eq i64 %391, %282
  br i1 %392, label %362, label %366, !llvm.loop !30

393:                                              ; preds = %27, %31, %41, %278
  %394 = call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0))
  br label %398

395:                                              ; preds = %362, %280
  %396 = phi i32 [ 0, %280 ], [ %363, %362 ]
  %397 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0), i32 %396)
  br label %398

398:                                              ; preds = %395, %393
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #12
  %399 = load i32, i32* %1, align 4, !tbaa !7
  %400 = add nsw i32 %399, -1
  store i32 %400, i32* %1, align 4, !tbaa !7
  %401 = icmp eq i32 %399, 0
  br i1 %401, label %402, label %27, !llvm.loop !31

402:                                              ; preds = %398, %0
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #12
  ret i32 0

403:                                              ; preds = %63
  %404 = getelementptr inbounds [1234 x [1234 x i32]], [1234 x [1234 x i32]]* @g, i64 0, i64 %50, i64 %65
  %405 = load i32, i32* %404, align 4, !tbaa !7
  %406 = xor i32 %405, %64
  br label %407

407:                                              ; preds = %403, %63
  %408 = phi i32 [ %406, %403 ], [ %64, %63 ]
  %409 = add nuw nsw i64 %53, 2
  %410 = add i64 %55, -2
  %411 = icmp eq i64 %410, 0
  br i1 %411, label %69, label %52, !llvm.loop !32
}

declare dso_local %struct._IO_FILE* @freopen(i8*, i8*, %struct._IO_FILE*) local_unnamed_addr #0

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @__isoc99_scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @puts(i8* nocapture noundef readonly) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline noreturn nounwind
define linkonce_odr hidden void @__clang_call_terminate(i8* %0) local_unnamed_addr #6 comdat {
  %2 = tail call i8* @__cxa_begin_catch(i8* %0) #12
  tail call void @_ZSt9terminatev() #15
  unreachable
}

declare dso_local i8* @__cxa_begin_catch(i8*) local_unnamed_addr

declare dso_local void @_ZSt9terminatev() local_unnamed_addr

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE(%"class.std::_Rb_tree"* nonnull align 8 dereferenceable(48) %0, %"struct.std::_Rb_tree_node"* %1) local_unnamed_addr #7 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {
  %3 = icmp eq %"struct.std::_Rb_tree_node"* %1, null
  br i1 %3, label %14, label %4

4:                                                ; preds = %2, %4
  %5 = phi %"struct.std::_Rb_tree_node"* [ %11, %4 ], [ %1, %2 ]
  %6 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %5, i64 0, i32 0, i32 3
  %7 = bitcast %"struct.std::_Rb_tree_node_base"** %6 to %"struct.std::_Rb_tree_node"**
  %8 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %7, align 8, !tbaa !33
  tail call void @_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE(%"class.std::_Rb_tree"* nonnull align 8 dereferenceable(48) %0, %"struct.std::_Rb_tree_node"* %8)
  %9 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %5, i64 0, i32 0, i32 2
  %10 = bitcast %"struct.std::_Rb_tree_node_base"** %9 to %"struct.std::_Rb_tree_node"**
  %11 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %10, align 8, !tbaa !34
  %12 = bitcast %"struct.std::_Rb_tree_node"* %5 to i8*
  tail call void @_ZdlPv(i8* nonnull %12) #12
  %13 = icmp eq %"struct.std::_Rb_tree_node"* %11, null
  br i1 %13, label %14, label %4, !llvm.loop !35

14:                                               ; preds = %4, %2
  ret void
}

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #8

; Function Attrs: mustprogress nofree nounwind readonly willreturn
declare dso_local %"struct.std::_Rb_tree_node_base"* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"*) local_unnamed_addr #9

; Function Attrs: nounwind
declare dso_local void @_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_(i1 zeroext, %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* nonnull align 8 dereferenceable(32)) local_unnamed_addr #1

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #10

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_BobGame.cpp() #11 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #12
  ret void
}

attributes #0 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nofree nounwind }
attributes #3 = { norecurse uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #5 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { noinline noreturn nounwind }
attributes #7 = { mustprogress uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { mustprogress nofree nounwind readonly willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #10 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #11 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #12 = { nounwind }
attributes #13 = { allocsize(0) }
attributes #14 = { nounwind readonly willreturn }
attributes #15 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !8, i64 0}
!8 = !{!"int", !5, i64 0}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.mustprogress"}
!11 = !{!5, !5, i64 0}
!12 = distinct !{!12, !10}
!13 = distinct !{!13, !10, !14}
!14 = !{!"llvm.loop.unswitch.partial.disable"}
!15 = !{!16, !18, i64 0}
!16 = !{!"_ZTSSt15_Rb_tree_header", !17, i64 0, !19, i64 32}
!17 = !{!"_ZTSSt18_Rb_tree_node_base", !18, i64 0, !4, i64 8, !4, i64 16, !4, i64 24}
!18 = !{!"_ZTSSt14_Rb_tree_color", !5, i64 0}
!19 = !{!"long", !5, i64 0}
!20 = !{!16, !4, i64 8}
!21 = !{!16, !4, i64 16}
!22 = !{!16, !4, i64 24}
!23 = !{!16, !19, i64 32}
!24 = distinct !{!24, !10}
!25 = distinct !{!25, !10}
!26 = distinct !{!26, !10}
!27 = distinct !{!27, !10, !28}
!28 = !{!"llvm.loop.peeled.count", i32 1}
!29 = distinct !{!29, !10}
!30 = distinct !{!30, !10}
!31 = distinct !{!31, !10}
!32 = distinct !{!32, !10}
!33 = !{!17, !4, i64 24}
!34 = !{!17, !4, i64 16}
!35 = distinct !{!35, !10}
