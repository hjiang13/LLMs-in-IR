; ModuleID = '../../Benchmarks/ImpressiveTree/ImpressiveTree.cpp'
source_filename = "../../Benchmarks/ImpressiveTree/ImpressiveTree.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@n = dso_local global i32 0, align 4
@q = dso_local global i32 0, align 4
@eu = dso_local global [100005 x i32] zeroinitializer, align 16
@ev = dso_local global [100005 x i32] zeroinitializer, align 16
@par = dso_local local_unnamed_addr global [100005 x i32] zeroinitializer, align 16
@sub = dso_local local_unnamed_addr global [100005 x i32] zeroinitializer, align 16
@h = dso_local local_unnamed_addr global [100005 x i32] zeroinitializer, align 16
@en = dso_local local_unnamed_addr global [100005 x i32] zeroinitializer, align 16
@ex = dso_local local_unnamed_addr global [100005 x i32] zeroinitializer, align 16
@rev = dso_local local_unnamed_addr global [100005 x i32] zeroinitializer, align 16
@TIME = dso_local local_unnamed_addr global i32 0, align 4
@dp = dso_local local_unnamed_addr global [100005 x i64] zeroinitializer, align 16
@dep = dso_local local_unnamed_addr global [100005 x i64] zeroinitializer, align 16
@ew = dso_local global [100005 x i64] zeroinitializer, align 16
@adj = dso_local global [100005 x %"class.std::vector"] zeroinitializer, align 16
@path = dso_local local_unnamed_addr global [100005 x i32] zeroinitializer, align 16
@.str = private unnamed_addr constant [30 x i8] c"../input_files/ImpressiveTree\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@stdin = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.3 = private unnamed_addr constant [5 x i8] c"%d%d\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"%d%d%lld\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@.str.8 = private unnamed_addr constant [51 x i8] c"../../Benchmarks/ImpressiveTree/ImpressiveTree.cpp\00", align 1
@__PRETTY_FUNCTION__.main = private unnamed_addr constant [11 x i8] c"int main()\00", align 1
@.str.9 = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_ImpressiveTree.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal void @__cxx_global_array_dtor(i8* nocapture readnone %0) #3 section ".text.startup" personality i32 (...)* @__gxx_personality_v0 {
  br label %2

2:                                                ; preds = %10, %1
  %3 = phi %"class.std::vector"* [ getelementptr inbounds ([100005 x %"class.std::vector"], [100005 x %"class.std::vector"]* @adj, i64 1, i64 0), %1 ], [ %4, %10 ]
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %3, i64 -1
  %5 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i32*, i32** %5, align 8, !tbaa !3
  %7 = icmp eq i32* %6, null
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %9 = bitcast i32* %6 to i8*
  tail call void @_ZdlPv(i8* nonnull %9) #17
  br label %10

10:                                               ; preds = %2, %8
  %11 = icmp eq %"class.std::vector"* %4, getelementptr inbounds ([100005 x %"class.std::vector"], [100005 x %"class.std::vector"]* @adj, i64 0, i64 0)
  br i1 %11, label %12, label %2

12:                                               ; preds = %10
  ret void
}

; Function Attrs: nofree nosync nounwind uwtable
define dso_local void @_Z3dfsii(i32 %0, i32 %1) local_unnamed_addr #4 {
  %3 = load i32, i32* @TIME, align 4, !tbaa !8
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds [100005 x i32], [100005 x i32]* @rev, i64 0, i64 %4
  store i32 %0, i32* %5, align 4, !tbaa !8
  %6 = add nsw i32 %3, 1
  store i32 %6, i32* @TIME, align 4, !tbaa !8
  %7 = sext i32 %0 to i64
  %8 = getelementptr inbounds [100005 x i32], [100005 x i32]* @en, i64 0, i64 %7
  store i32 %3, i32* %8, align 4, !tbaa !8
  %9 = getelementptr inbounds [100005 x i32], [100005 x i32]* @sub, i64 0, i64 %7
  store i32 1, i32* %9, align 4, !tbaa !8
  %10 = getelementptr inbounds [100005 x %"class.std::vector"], [100005 x %"class.std::vector"]* @adj, i64 0, i64 %7, i32 0, i32 0, i32 0, i32 0
  %11 = load i32*, i32** %10, align 8, !tbaa !10
  %12 = getelementptr inbounds [100005 x %"class.std::vector"], [100005 x %"class.std::vector"]* @adj, i64 0, i64 %7, i32 0, i32 0, i32 0, i32 1
  %13 = load i32*, i32** %12, align 8, !tbaa !10
  %14 = getelementptr inbounds [100005 x i64], [100005 x i64]* @dep, i64 0, i64 %7
  %15 = getelementptr inbounds [100005 x i32], [100005 x i32]* @h, i64 0, i64 %7
  %16 = getelementptr inbounds [100005 x i64], [100005 x i64]* @dp, i64 0, i64 %7
  %17 = icmp eq i32* %11, %13
  br i1 %17, label %20, label %24

18:                                               ; preds = %63
  %19 = load i32, i32* @TIME, align 4, !tbaa !8
  br label %20

20:                                               ; preds = %18, %2
  %21 = phi i32 [ %19, %18 ], [ %6, %2 ]
  %22 = add nsw i32 %21, -1
  %23 = getelementptr inbounds [100005 x i32], [100005 x i32]* @ex, i64 0, i64 %7
  store i32 %22, i32* %23, align 4, !tbaa !8
  ret void

24:                                               ; preds = %2, %63
  %25 = phi i32* [ %64, %63 ], [ %11, %2 ]
  %26 = load i32, i32* %25, align 4, !tbaa !8
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds [100005 x i32], [100005 x i32]* @eu, i64 0, i64 %27
  %29 = load i32, i32* %28, align 4, !tbaa !8
  %30 = icmp eq i32 %29, %0
  br i1 %30, label %31, label %34

31:                                               ; preds = %24
  %32 = getelementptr inbounds [100005 x i32], [100005 x i32]* @ev, i64 0, i64 %27
  %33 = load i32, i32* %32, align 4, !tbaa !8
  br label %34

34:                                               ; preds = %24, %31
  %35 = phi i32 [ %33, %31 ], [ %29, %24 ]
  %36 = icmp eq i32 %35, %1
  br i1 %36, label %63, label %37

37:                                               ; preds = %34
  %38 = getelementptr inbounds [100005 x i64], [100005 x i64]* @ew, i64 0, i64 %27
  %39 = load i64, i64* %38, align 8, !tbaa !11
  %40 = load i64, i64* %14, align 8, !tbaa !11
  %41 = add nsw i64 %40, %39
  %42 = sext i32 %35 to i64
  %43 = getelementptr inbounds [100005 x i64], [100005 x i64]* @dep, i64 0, i64 %42
  store i64 %41, i64* %43, align 8, !tbaa !11
  %44 = load i32, i32* %15, align 4, !tbaa !8
  %45 = add nsw i32 %44, 1
  %46 = getelementptr inbounds [100005 x i32], [100005 x i32]* @h, i64 0, i64 %42
  store i32 %45, i32* %46, align 4, !tbaa !8
  %47 = getelementptr inbounds [100005 x i32], [100005 x i32]* @par, i64 0, i64 %42
  store i32 %0, i32* %47, align 4, !tbaa !8
  tail call void @_Z3dfsii(i32 %35, i32 %0)
  %48 = getelementptr inbounds [100005 x i32], [100005 x i32]* @sub, i64 0, i64 %42
  %49 = load i32, i32* %48, align 4, !tbaa !8
  %50 = load i32, i32* %9, align 4, !tbaa !8
  %51 = add nsw i32 %50, %49
  store i32 %51, i32* %9, align 4, !tbaa !8
  %52 = getelementptr inbounds [100005 x i64], [100005 x i64]* @dp, i64 0, i64 %42
  %53 = load i64, i64* %52, align 8, !tbaa !11
  %54 = load i32, i32* %48, align 4, !tbaa !8
  %55 = sext i32 %54 to i64
  %56 = mul nsw i64 %39, %55
  %57 = srem i64 %56, 1000000007
  %58 = add nsw i64 %57, %53
  %59 = srem i64 %58, 1000000007
  %60 = load i64, i64* %16, align 8, !tbaa !11
  %61 = add nsw i64 %59, %60
  %62 = srem i64 %61, 1000000007
  store i64 %62, i64* %16, align 8, !tbaa !11
  br label %63

63:                                               ; preds = %37, %34
  %64 = getelementptr inbounds i32, i32* %25, i64 1
  %65 = icmp eq i32* %64, %13
  br i1 %65, label %18, label %24
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable
define dso_local i32 @_Z5queryii(i32 %0, i32 %1) local_unnamed_addr #6 {
  %3 = sext i32 %0 to i64
  %4 = getelementptr inbounds [100005 x i32], [100005 x i32]* @h, i64 0, i64 %3
  %5 = load i32, i32* %4, align 4, !tbaa !8
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds [100005 x i32], [100005 x i32]* @h, i64 0, i64 %6
  %8 = load i32, i32* %7, align 4, !tbaa !8
  %9 = icmp sgt i32 %5, %8
  %10 = select i1 %9, i32 %1, i32 %0
  %11 = select i1 %9, i32 %0, i32 %1
  %12 = sext i32 %10 to i64
  %13 = getelementptr inbounds [100005 x i32], [100005 x i32]* @en, i64 0, i64 %12
  %14 = load i32, i32* %13, align 4, !tbaa !8
  %15 = sext i32 %11 to i64
  %16 = getelementptr inbounds [100005 x i32], [100005 x i32]* @en, i64 0, i64 %15
  %17 = load i32, i32* %16, align 4, !tbaa !8
  %18 = icmp sgt i32 %14, %17
  br i1 %18, label %203, label %19

19:                                               ; preds = %2
  %20 = getelementptr inbounds [100005 x i32], [100005 x i32]* @ex, i64 0, i64 %15
  %21 = load i32, i32* %20, align 4, !tbaa !8
  %22 = getelementptr inbounds [100005 x i32], [100005 x i32]* @ex, i64 0, i64 %12
  %23 = load i32, i32* %22, align 4, !tbaa !8
  %24 = icmp sgt i32 %21, %23
  br i1 %24, label %203, label %25

25:                                               ; preds = %19
  %26 = getelementptr inbounds [100005 x i32], [100005 x i32]* @h, i64 0, i64 %15
  %27 = load i32, i32* %26, align 4, !tbaa !8
  %28 = getelementptr inbounds [100005 x i32], [100005 x i32]* @h, i64 0, i64 %12
  %29 = load i32, i32* %28, align 4, !tbaa !8
  %30 = sub i32 %27, %29
  %31 = icmp sgt i32 %30, -1
  br i1 %31, label %32, label %223

32:                                               ; preds = %25
  %33 = zext i32 %30 to i64
  %34 = add i32 %27, 1
  %35 = sub i32 %34, %29
  %36 = and i32 %35, 3
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %49, label %38

38:                                               ; preds = %32, %38
  %39 = phi i64 [ %46, %38 ], [ %33, %32 ]
  %40 = phi i32 [ %45, %38 ], [ %11, %32 ]
  %41 = phi i32 [ %47, %38 ], [ %36, %32 ]
  %42 = getelementptr inbounds [100005 x i32], [100005 x i32]* @path, i64 0, i64 %39
  store i32 %40, i32* %42, align 4, !tbaa !8
  %43 = sext i32 %40 to i64
  %44 = getelementptr inbounds [100005 x i32], [100005 x i32]* @par, i64 0, i64 %43
  %45 = load i32, i32* %44, align 4, !tbaa !8
  %46 = add nsw i64 %39, -1
  %47 = add i32 %41, -1
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %38, !llvm.loop !13

49:                                               ; preds = %38, %32
  %50 = phi i64 [ %33, %32 ], [ %46, %38 ]
  %51 = phi i32 [ %11, %32 ], [ %45, %38 ]
  %52 = icmp ult i32 %30, 3
  br i1 %52, label %53, label %70

53:                                               ; preds = %70, %49
  %54 = icmp slt i32 %30, 0
  br i1 %54, label %223, label %55

55:                                               ; preds = %53
  %56 = zext i32 %30 to i64
  %57 = getelementptr inbounds [100005 x i32], [100005 x i32]* @path, i64 0, i64 %56
  %58 = load i32, i32* getelementptr inbounds ([100005 x i32], [100005 x i32]* @path, i64 0, i64 0), align 16
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds [100005 x i64], [100005 x i64]* @dep, i64 0, i64 %59
  %61 = load i64, i64* %60, align 8, !tbaa !11
  %62 = load i32, i32* %57, align 4, !tbaa !8
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds [100005 x i64], [100005 x i64]* @dep, i64 0, i64 %63
  %65 = load i64, i64* %64, align 8, !tbaa !11
  %66 = add i32 %27, 1
  %67 = sub i32 %66, %29
  %68 = zext i32 %67 to i64
  %69 = icmp sgt i64 %65, %61
  br i1 %69, label %95, label %110

70:                                               ; preds = %49, %70
  %71 = phi i64 [ %94, %70 ], [ %50, %49 ]
  %72 = phi i32 [ %91, %70 ], [ %51, %49 ]
  %73 = getelementptr inbounds [100005 x i32], [100005 x i32]* @path, i64 0, i64 %71
  store i32 %72, i32* %73, align 4, !tbaa !8
  %74 = sext i32 %72 to i64
  %75 = getelementptr inbounds [100005 x i32], [100005 x i32]* @par, i64 0, i64 %74
  %76 = load i32, i32* %75, align 4, !tbaa !8
  %77 = add nsw i64 %71, -1
  %78 = getelementptr inbounds [100005 x i32], [100005 x i32]* @path, i64 0, i64 %77
  store i32 %76, i32* %78, align 4, !tbaa !8
  %79 = sext i32 %76 to i64
  %80 = getelementptr inbounds [100005 x i32], [100005 x i32]* @par, i64 0, i64 %79
  %81 = load i32, i32* %80, align 4, !tbaa !8
  %82 = add nsw i64 %71, -2
  %83 = getelementptr inbounds [100005 x i32], [100005 x i32]* @path, i64 0, i64 %82
  store i32 %81, i32* %83, align 4, !tbaa !8
  %84 = sext i32 %81 to i64
  %85 = getelementptr inbounds [100005 x i32], [100005 x i32]* @par, i64 0, i64 %84
  %86 = load i32, i32* %85, align 4, !tbaa !8
  %87 = add nsw i64 %71, -3
  %88 = getelementptr inbounds [100005 x i32], [100005 x i32]* @path, i64 0, i64 %87
  store i32 %86, i32* %88, align 4, !tbaa !8
  %89 = sext i32 %86 to i64
  %90 = getelementptr inbounds [100005 x i32], [100005 x i32]* @par, i64 0, i64 %89
  %91 = load i32, i32* %90, align 4, !tbaa !8
  %92 = trunc i64 %87 to i32
  %93 = icmp sgt i32 %92, 0
  %94 = add nsw i64 %71, -4
  br i1 %93, label %70, label %53, !llvm.loop !15

95:                                               ; preds = %55, %99
  %96 = phi i64 [ %97, %99 ], [ 0, %55 ]
  %97 = add nuw nsw i64 %96, 1
  %98 = icmp eq i64 %97, %68
  br i1 %98, label %110, label %99, !llvm.loop !17

99:                                               ; preds = %95
  %100 = getelementptr inbounds [100005 x i32], [100005 x i32]* @path, i64 0, i64 %97
  %101 = load i32, i32* %100, align 4, !tbaa !8
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds [100005 x i64], [100005 x i64]* @dep, i64 0, i64 %102
  %104 = load i64, i64* %103, align 8, !tbaa !11
  %105 = sub nsw i64 %104, %61
  %106 = sub nsw i64 %65, %104
  %107 = icmp slt i64 %105, %106
  br i1 %107, label %95, label %108

108:                                              ; preds = %99
  %109 = trunc i64 %97 to i32
  br label %110

110:                                              ; preds = %95, %55, %108
  %111 = phi i32 [ %109, %108 ], [ 0, %55 ], [ %67, %95 ]
  %112 = getelementptr inbounds [100005 x i32], [100005 x i32]* @sub, i64 0, i64 %15
  %113 = getelementptr inbounds [100005 x i64], [100005 x i64]* @dp, i64 0, i64 %15
  %114 = getelementptr inbounds [100005 x i64], [100005 x i64]* @dep, i64 0, i64 %15
  %115 = getelementptr inbounds [100005 x i64], [100005 x i64]* @dep, i64 0, i64 %12
  %116 = icmp sgt i32 %30, 0
  br i1 %116, label %117, label %223

117:                                              ; preds = %110
  %118 = zext i32 %111 to i64
  %119 = zext i32 %30 to i64
  %120 = load i32, i32* getelementptr inbounds ([100005 x i32], [100005 x i32]* @path, i64 0, i64 0), align 16, !tbaa !8
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds [100005 x i64], [100005 x i64]* @dep, i64 0, i64 %121
  %123 = load i64, i64* %122, align 8, !tbaa !11
  %124 = getelementptr inbounds [100005 x i64], [100005 x i64]* @dp, i64 0, i64 %121
  %125 = load i64, i64* %124, align 8, !tbaa !11
  %126 = getelementptr inbounds [100005 x i32], [100005 x i32]* @sub, i64 0, i64 %121
  %127 = load i32, i32* %126, align 4, !tbaa !8
  %128 = load i32, i32* %112, align 4, !tbaa !8
  %129 = sext i32 %128 to i64
  %130 = load i64, i64* %113, align 8, !tbaa !11
  br label %131

131:                                              ; preds = %117, %198
  %132 = phi i32 [ %127, %117 ], [ %152, %198 ]
  %133 = phi i64 [ %125, %117 ], [ %150, %198 ]
  %134 = phi i64 [ %123, %117 ], [ %142, %198 ]
  %135 = phi i64 [ 0, %117 ], [ %137, %198 ]
  %136 = phi i64 [ 0, %117 ], [ %201, %198 ]
  %137 = add nuw nsw i64 %135, 1
  %138 = getelementptr inbounds [100005 x i32], [100005 x i32]* @path, i64 0, i64 %137
  %139 = load i32, i32* %138, align 4, !tbaa !8
  %140 = sext i32 %139 to i64
  %141 = getelementptr inbounds [100005 x i64], [100005 x i64]* @dep, i64 0, i64 %140
  %142 = load i64, i64* %141, align 8, !tbaa !11
  %143 = srem i64 %142, 1000000007
  %144 = srem i64 %134, 1000000007
  %145 = sub nsw i64 %143, %144
  %146 = trunc i64 %145 to i32
  %147 = srem i32 %146, 1000000007
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds [100005 x i64], [100005 x i64]* @dp, i64 0, i64 %140
  %150 = load i64, i64* %149, align 8, !tbaa !11
  %151 = getelementptr inbounds [100005 x i32], [100005 x i32]* @sub, i64 0, i64 %140
  %152 = load i32, i32* %151, align 4, !tbaa !8
  %153 = sext i32 %152 to i64
  %154 = mul nsw i64 %148, %153
  %155 = srem i64 %154, 1000000007
  %156 = add i64 %150, %155
  %157 = sub i64 %133, %156
  %158 = srem i64 %157, 1000000007
  %159 = sub nsw i32 %132, %152
  %160 = srem i32 %159, 1000000007
  %161 = sext i32 %160 to i64
  %162 = icmp ult i64 %135, %118
  %163 = mul nsw i64 %158, %129
  %164 = srem i64 %163, 1000000007
  %165 = mul nsw i64 %130, %161
  %166 = srem i64 %165, 1000000007
  %167 = add nsw i64 %164, %166
  br i1 %162, label %168, label %185

168:                                              ; preds = %131
  %169 = load i64, i64* %115, align 8, !tbaa !11
  %170 = srem i64 %169, 1000000007
  %171 = trunc i64 %170 to i32
  %172 = sub nsw i32 1, %171
  %173 = srem i32 %172, 1000000007
  %174 = sext i32 %173 to i64
  %175 = mul nsw i64 %174, %129
  %176 = srem i64 %175, 1000000007
  %177 = mul nsw i64 %176, %161
  %178 = srem i64 %177, 1000000007
  %179 = mul nsw i64 %129, %161
  %180 = srem i64 %179, 1000000007
  %181 = mul nsw i64 %180, %144
  %182 = srem i64 %181, 1000000007
  %183 = add nsw i64 %167, %182
  %184 = add nsw i64 %183, %178
  br label %198

185:                                              ; preds = %131
  %186 = load i64, i64* %114, align 8, !tbaa !11
  %187 = srem i64 %186, 1000000007
  %188 = mul nsw i64 %187, %129
  %189 = srem i64 %188, 1000000007
  %190 = mul nsw i64 %189, %161
  %191 = srem i64 %190, 1000000007
  %192 = mul nsw i64 %129, %161
  %193 = srem i64 %192, 1000000007
  %194 = mul nsw i64 %193, %144
  %195 = srem i64 %194, 1000000007
  %196 = sub nsw i64 %167, %195
  %197 = add nsw i64 %196, %191
  br label %198

198:                                              ; preds = %185, %168
  %199 = phi i64 [ %184, %168 ], [ %197, %185 ]
  %200 = add nsw i64 %199, %136
  %201 = srem i64 %200, 1000000007
  %202 = icmp eq i64 %137, %119
  br i1 %202, label %223, label %131, !llvm.loop !18

203:                                              ; preds = %19, %2
  %204 = getelementptr inbounds [100005 x i64], [100005 x i64]* @dp, i64 0, i64 %15
  %205 = load i64, i64* %204, align 8, !tbaa !11
  %206 = getelementptr inbounds [100005 x i32], [100005 x i32]* @sub, i64 0, i64 %12
  %207 = load i32, i32* %206, align 4, !tbaa !8
  %208 = sext i32 %207 to i64
  %209 = mul nsw i64 %205, %208
  %210 = srem i64 %209, 1000000007
  %211 = getelementptr inbounds [100005 x i64], [100005 x i64]* @dp, i64 0, i64 %12
  %212 = load i64, i64* %211, align 8, !tbaa !11
  %213 = getelementptr inbounds [100005 x i32], [100005 x i32]* @sub, i64 0, i64 %15
  %214 = load i32, i32* %213, align 4, !tbaa !8
  %215 = sext i32 %214 to i64
  %216 = mul nsw i64 %212, %215
  %217 = srem i64 %216, 1000000007
  %218 = add nsw i64 %217, %210
  %219 = mul nsw i64 %215, %208
  %220 = srem i64 %219, 1000000007
  %221 = add nsw i64 %218, %220
  %222 = srem i64 %221, 1000000007
  br label %223

223:                                              ; preds = %198, %25, %53, %110, %203
  %224 = phi i64 [ %222, %203 ], [ 0, %110 ], [ 0, %53 ], [ 0, %25 ], [ %201, %198 ]
  %225 = trunc i64 %224 to i32
  ret i32 %225
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable
define dso_local void @_Z6updateix(i32 %0, i64 %1) local_unnamed_addr #7 {
  %3 = sext i32 %0 to i64
  %4 = getelementptr inbounds [100005 x i32], [100005 x i32]* @eu, i64 0, i64 %3
  %5 = load i32, i32* %4, align 4, !tbaa !8
  %6 = getelementptr inbounds [100005 x i32], [100005 x i32]* @ev, i64 0, i64 %3
  %7 = load i32, i32* %6, align 4, !tbaa !8
  %8 = sext i32 %5 to i64
  %9 = getelementptr inbounds [100005 x i32], [100005 x i32]* @h, i64 0, i64 %8
  %10 = load i32, i32* %9, align 4, !tbaa !8
  %11 = sext i32 %7 to i64
  %12 = getelementptr inbounds [100005 x i32], [100005 x i32]* @h, i64 0, i64 %11
  %13 = load i32, i32* %12, align 4, !tbaa !8
  %14 = icmp sgt i32 %10, %13
  %15 = select i1 %14, i32 %7, i32 %5
  %16 = select i1 %14, i32 %5, i32 %7
  %17 = getelementptr inbounds [100005 x i64], [100005 x i64]* @ew, i64 0, i64 %3
  %18 = load i64, i64* %17, align 8, !tbaa !11
  %19 = add nsw i64 %18, %1
  store i64 %19, i64* %17, align 8, !tbaa !11
  %20 = icmp eq i32 %15, 0
  %21 = sext i32 %16 to i64
  br i1 %20, label %28, label %22

22:                                               ; preds = %2
  %23 = getelementptr inbounds [100005 x i32], [100005 x i32]* @sub, i64 0, i64 %21
  %24 = load i32, i32* %23, align 4, !tbaa !8
  %25 = sext i32 %24 to i64
  %26 = mul nsw i64 %25, %1
  %27 = srem i64 %26, 1000000007
  br label %56

28:                                               ; preds = %56, %2
  %29 = getelementptr inbounds [100005 x i32], [100005 x i32]* @en, i64 0, i64 %21
  %30 = load i32, i32* %29, align 4, !tbaa !8
  %31 = getelementptr inbounds [100005 x i32], [100005 x i32]* @ex, i64 0, i64 %21
  %32 = load i32, i32* %31, align 4, !tbaa !8
  %33 = icmp slt i32 %32, %30
  br i1 %33, label %66, label %34

34:                                               ; preds = %28
  %35 = sext i32 %30 to i64
  %36 = add i32 %32, 1
  %37 = sub i32 %36, %30
  %38 = sub i32 %32, %30
  %39 = and i32 %37, 3
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %53, label %41

41:                                               ; preds = %34, %41
  %42 = phi i64 [ %50, %41 ], [ %35, %34 ]
  %43 = phi i32 [ %51, %41 ], [ %39, %34 ]
  %44 = getelementptr inbounds [100005 x i32], [100005 x i32]* @rev, i64 0, i64 %42
  %45 = load i32, i32* %44, align 4, !tbaa !8
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [100005 x i64], [100005 x i64]* @dep, i64 0, i64 %46
  %48 = load i64, i64* %47, align 8, !tbaa !11
  %49 = add nsw i64 %48, %1
  store i64 %49, i64* %47, align 8, !tbaa !11
  %50 = add nsw i64 %42, 1
  %51 = add i32 %43, -1
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %41, !llvm.loop !19

53:                                               ; preds = %41, %34
  %54 = phi i64 [ %35, %34 ], [ %50, %41 ]
  %55 = icmp ult i32 %38, 3
  br i1 %55, label %66, label %67

56:                                               ; preds = %22, %56
  %57 = phi i32 [ %15, %22 ], [ %64, %56 ]
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds [100005 x i64], [100005 x i64]* @dp, i64 0, i64 %58
  %60 = load i64, i64* %59, align 8, !tbaa !11
  %61 = add nsw i64 %27, %60
  %62 = srem i64 %61, 1000000007
  store i64 %62, i64* %59, align 8, !tbaa !11
  %63 = getelementptr inbounds [100005 x i32], [100005 x i32]* @par, i64 0, i64 %58
  %64 = load i32, i32* %63, align 4, !tbaa !8
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %28, label %56, !llvm.loop !20

66:                                               ; preds = %53, %67, %28
  ret void

67:                                               ; preds = %53, %67
  %68 = phi i64 [ %96, %67 ], [ %54, %53 ]
  %69 = getelementptr inbounds [100005 x i32], [100005 x i32]* @rev, i64 0, i64 %68
  %70 = load i32, i32* %69, align 4, !tbaa !8
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds [100005 x i64], [100005 x i64]* @dep, i64 0, i64 %71
  %73 = load i64, i64* %72, align 8, !tbaa !11
  %74 = add nsw i64 %73, %1
  store i64 %74, i64* %72, align 8, !tbaa !11
  %75 = add nsw i64 %68, 1
  %76 = getelementptr inbounds [100005 x i32], [100005 x i32]* @rev, i64 0, i64 %75
  %77 = load i32, i32* %76, align 4, !tbaa !8
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds [100005 x i64], [100005 x i64]* @dep, i64 0, i64 %78
  %80 = load i64, i64* %79, align 8, !tbaa !11
  %81 = add nsw i64 %80, %1
  store i64 %81, i64* %79, align 8, !tbaa !11
  %82 = add nsw i64 %68, 2
  %83 = getelementptr inbounds [100005 x i32], [100005 x i32]* @rev, i64 0, i64 %82
  %84 = load i32, i32* %83, align 4, !tbaa !8
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds [100005 x i64], [100005 x i64]* @dep, i64 0, i64 %85
  %87 = load i64, i64* %86, align 8, !tbaa !11
  %88 = add nsw i64 %87, %1
  store i64 %88, i64* %86, align 8, !tbaa !11
  %89 = add nsw i64 %68, 3
  %90 = getelementptr inbounds [100005 x i32], [100005 x i32]* @rev, i64 0, i64 %89
  %91 = load i32, i32* %90, align 4, !tbaa !8
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds [100005 x i64], [100005 x i64]* @dep, i64 0, i64 %92
  %94 = load i64, i64* %93, align 8, !tbaa !11
  %95 = add nsw i64 %94, %1
  store i64 %95, i64* %93, align 8, !tbaa !11
  %96 = add nsw i64 %68, 4
  %97 = trunc i64 %96 to i32
  %98 = icmp eq i32 %36, %97
  br i1 %98, label %66, label %67, !llvm.loop !21
}

; Function Attrs: norecurse uwtable
define dso_local i32 @main() local_unnamed_addr #8 personality i32 (...)* @__gxx_personality_v0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !10
  %7 = tail call %struct._IO_FILE* @freopen(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), %struct._IO_FILE* %6)
  %8 = tail call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0), i32* nonnull @n, i32* nonnull @q)
  %9 = load i32, i32* @n, align 4, !tbaa !8
  %10 = icmp sgt i32 %9, 1
  br i1 %10, label %20, label %11

11:                                               ; preds = %121, %0
  tail call void @_Z3dfsii(i32 1, i32 -1)
  %12 = bitcast i32* %1 to i8*
  %13 = bitcast i32* %4 to i8*
  %14 = bitcast i32* %5 to i8*
  %15 = bitcast i32* %2 to i8*
  %16 = bitcast i32* %3 to i8*
  %17 = load i32, i32* @q, align 4, !tbaa !8
  %18 = add nsw i32 %17, -1
  store i32 %18, i32* @q, align 4, !tbaa !8
  %19 = icmp eq i32 %17, 0
  br i1 %19, label %244, label %126

20:                                               ; preds = %0, %121
  %21 = phi i64 [ %122, %121 ], [ 1, %0 ]
  %22 = getelementptr inbounds [100005 x i32], [100005 x i32]* @eu, i64 0, i64 %21
  %23 = getelementptr inbounds [100005 x i32], [100005 x i32]* @ev, i64 0, i64 %21
  %24 = getelementptr inbounds [100005 x i64], [100005 x i64]* @ew, i64 0, i64 %21
  %25 = tail call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32* nonnull %22, i32* nonnull %23, i64* nonnull %24)
  %26 = load i32, i32* %22, align 4, !tbaa !8
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds [100005 x %"class.std::vector"], [100005 x %"class.std::vector"]* @adj, i64 0, i64 %27, i32 0, i32 0, i32 0, i32 1
  %29 = load i32*, i32** %28, align 8, !tbaa !22
  %30 = getelementptr inbounds [100005 x %"class.std::vector"], [100005 x %"class.std::vector"]* @adj, i64 0, i64 %27, i32 0, i32 0, i32 0, i32 2
  %31 = load i32*, i32** %30, align 8, !tbaa !23
  %32 = icmp eq i32* %29, %31
  br i1 %32, label %36, label %33

33:                                               ; preds = %20
  %34 = trunc i64 %21 to i32
  store i32 %34, i32* %29, align 4, !tbaa !8
  %35 = getelementptr inbounds i32, i32* %29, i64 1
  store i32* %35, i32** %28, align 8, !tbaa !22
  br label %73

36:                                               ; preds = %20
  %37 = getelementptr inbounds [100005 x %"class.std::vector"], [100005 x %"class.std::vector"]* @adj, i64 0, i64 %27, i32 0, i32 0, i32 0, i32 0
  %38 = load i32*, i32** %37, align 8, !tbaa !3
  %39 = ptrtoint i32* %29 to i64
  %40 = ptrtoint i32* %38 to i64
  %41 = sub i64 %39, %40
  %42 = ashr exact i64 %41, 2
  %43 = icmp eq i64 %41, 9223372036854775804
  br i1 %43, label %44, label %45

44:                                               ; preds = %36
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.9, i64 0, i64 0)) #18
  unreachable

45:                                               ; preds = %36
  %46 = icmp eq i64 %41, 0
  %47 = select i1 %46, i64 1, i64 %42
  %48 = add nsw i64 %47, %42
  %49 = icmp ult i64 %48, %42
  %50 = icmp ugt i64 %48, 2305843009213693951
  %51 = or i1 %49, %50
  %52 = select i1 %51, i64 2305843009213693951, i64 %48
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %58, label %54

54:                                               ; preds = %45
  %55 = shl nuw nsw i64 %52, 2
  %56 = tail call noalias nonnull i8* @_Znwm(i64 %55) #19
  %57 = bitcast i8* %56 to i32*
  br label %58

58:                                               ; preds = %54, %45
  %59 = phi i32* [ %57, %54 ], [ null, %45 ]
  %60 = getelementptr inbounds i32, i32* %59, i64 %42
  %61 = trunc i64 %21 to i32
  store i32 %61, i32* %60, align 4, !tbaa !8
  %62 = icmp sgt i64 %41, 0
  br i1 %62, label %63, label %66

63:                                               ; preds = %58
  %64 = bitcast i32* %59 to i8*
  %65 = bitcast i32* %38 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %64, i8* align 4 %65, i64 %41, i1 false) #17
  br label %66

66:                                               ; preds = %63, %58
  %67 = getelementptr inbounds i32, i32* %60, i64 1
  %68 = icmp eq i32* %38, null
  br i1 %68, label %71, label %69

69:                                               ; preds = %66
  %70 = bitcast i32* %38 to i8*
  tail call void @_ZdlPv(i8* nonnull %70) #17
  br label %71

71:                                               ; preds = %69, %66
  store i32* %59, i32** %37, align 8, !tbaa !3
  store i32* %67, i32** %28, align 8, !tbaa !22
  %72 = getelementptr inbounds i32, i32* %59, i64 %52
  store i32* %72, i32** %30, align 8, !tbaa !23
  br label %73

73:                                               ; preds = %33, %71
  %74 = load i32, i32* %23, align 4, !tbaa !8
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds [100005 x %"class.std::vector"], [100005 x %"class.std::vector"]* @adj, i64 0, i64 %75, i32 0, i32 0, i32 0, i32 1
  %77 = load i32*, i32** %76, align 8, !tbaa !22
  %78 = getelementptr inbounds [100005 x %"class.std::vector"], [100005 x %"class.std::vector"]* @adj, i64 0, i64 %75, i32 0, i32 0, i32 0, i32 2
  %79 = load i32*, i32** %78, align 8, !tbaa !23
  %80 = icmp eq i32* %77, %79
  br i1 %80, label %84, label %81

81:                                               ; preds = %73
  %82 = trunc i64 %21 to i32
  store i32 %82, i32* %77, align 4, !tbaa !8
  %83 = getelementptr inbounds i32, i32* %77, i64 1
  store i32* %83, i32** %76, align 8, !tbaa !22
  br label %121

84:                                               ; preds = %73
  %85 = getelementptr inbounds [100005 x %"class.std::vector"], [100005 x %"class.std::vector"]* @adj, i64 0, i64 %75, i32 0, i32 0, i32 0, i32 0
  %86 = load i32*, i32** %85, align 8, !tbaa !3
  %87 = ptrtoint i32* %77 to i64
  %88 = ptrtoint i32* %86 to i64
  %89 = sub i64 %87, %88
  %90 = ashr exact i64 %89, 2
  %91 = icmp eq i64 %89, 9223372036854775804
  br i1 %91, label %92, label %93

92:                                               ; preds = %84
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.9, i64 0, i64 0)) #18
  unreachable

93:                                               ; preds = %84
  %94 = icmp eq i64 %89, 0
  %95 = select i1 %94, i64 1, i64 %90
  %96 = add nsw i64 %95, %90
  %97 = icmp ult i64 %96, %90
  %98 = icmp ugt i64 %96, 2305843009213693951
  %99 = or i1 %97, %98
  %100 = select i1 %99, i64 2305843009213693951, i64 %96
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %106, label %102

102:                                              ; preds = %93
  %103 = shl nuw nsw i64 %100, 2
  %104 = tail call noalias nonnull i8* @_Znwm(i64 %103) #19
  %105 = bitcast i8* %104 to i32*
  br label %106

106:                                              ; preds = %102, %93
  %107 = phi i32* [ %105, %102 ], [ null, %93 ]
  %108 = getelementptr inbounds i32, i32* %107, i64 %90
  %109 = trunc i64 %21 to i32
  store i32 %109, i32* %108, align 4, !tbaa !8
  %110 = icmp sgt i64 %89, 0
  br i1 %110, label %111, label %114

111:                                              ; preds = %106
  %112 = bitcast i32* %107 to i8*
  %113 = bitcast i32* %86 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %112, i8* align 4 %113, i64 %89, i1 false) #17
  br label %114

114:                                              ; preds = %111, %106
  %115 = getelementptr inbounds i32, i32* %108, i64 1
  %116 = icmp eq i32* %86, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %114
  %118 = bitcast i32* %86 to i8*
  tail call void @_ZdlPv(i8* nonnull %118) #17
  br label %119

119:                                              ; preds = %117, %114
  store i32* %107, i32** %85, align 8, !tbaa !3
  store i32* %115, i32** %76, align 8, !tbaa !22
  %120 = getelementptr inbounds i32, i32* %107, i64 %100
  store i32* %120, i32** %78, align 8, !tbaa !23
  br label %121

121:                                              ; preds = %81, %119
  %122 = add nuw nsw i64 %21, 1
  %123 = load i32, i32* @n, align 4, !tbaa !8
  %124 = sext i32 %123 to i64
  %125 = icmp slt i64 %122, %124
  br i1 %125, label %20, label %11, !llvm.loop !24

126:                                              ; preds = %11, %240
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #17
  %127 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i32* nonnull %1)
  %128 = load i32, i32* %1, align 4, !tbaa !8
  switch i32 %128, label %239 [
    i32 1, label %129
    i32 2, label %230
  ]

129:                                              ; preds = %126
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #17
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #17
  %130 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0), i32* nonnull %2, i32* nonnull %3)
  %131 = load i32, i32* %2, align 4, !tbaa !8
  %132 = load i32, i32* %3, align 4, !tbaa !8
  %133 = sext i32 %132 to i64
  %134 = sext i32 %131 to i64
  %135 = getelementptr inbounds [100005 x i32], [100005 x i32]* @eu, i64 0, i64 %134
  %136 = load i32, i32* %135, align 4, !tbaa !8
  %137 = getelementptr inbounds [100005 x i32], [100005 x i32]* @ev, i64 0, i64 %134
  %138 = load i32, i32* %137, align 4, !tbaa !8
  %139 = sext i32 %136 to i64
  %140 = getelementptr inbounds [100005 x i32], [100005 x i32]* @h, i64 0, i64 %139
  %141 = load i32, i32* %140, align 4, !tbaa !8
  %142 = sext i32 %138 to i64
  %143 = getelementptr inbounds [100005 x i32], [100005 x i32]* @h, i64 0, i64 %142
  %144 = load i32, i32* %143, align 4, !tbaa !8
  %145 = icmp sgt i32 %141, %144
  %146 = select i1 %145, i32 %138, i32 %136
  %147 = select i1 %145, i32 %136, i32 %138
  %148 = getelementptr inbounds [100005 x i64], [100005 x i64]* @ew, i64 0, i64 %134
  %149 = load i64, i64* %148, align 8, !tbaa !11
  %150 = add nsw i64 %149, %133
  store i64 %150, i64* %148, align 8, !tbaa !11
  %151 = icmp eq i32 %146, 0
  %152 = sext i32 %147 to i64
  br i1 %151, label %159, label %153

153:                                              ; preds = %129
  %154 = getelementptr inbounds [100005 x i32], [100005 x i32]* @sub, i64 0, i64 %152
  %155 = load i32, i32* %154, align 4, !tbaa !8
  %156 = sext i32 %155 to i64
  %157 = mul nsw i64 %156, %133
  %158 = srem i64 %157, 1000000007
  br label %187

159:                                              ; preds = %187, %129
  %160 = getelementptr inbounds [100005 x i32], [100005 x i32]* @en, i64 0, i64 %152
  %161 = load i32, i32* %160, align 4, !tbaa !8
  %162 = getelementptr inbounds [100005 x i32], [100005 x i32]* @ex, i64 0, i64 %152
  %163 = load i32, i32* %162, align 4, !tbaa !8
  %164 = icmp slt i32 %163, %161
  br i1 %164, label %229, label %165

165:                                              ; preds = %159
  %166 = sext i32 %161 to i64
  %167 = add i32 %163, 1
  %168 = sub i32 %167, %161
  %169 = sub i32 %163, %161
  %170 = and i32 %168, 3
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %184, label %172

172:                                              ; preds = %165, %172
  %173 = phi i64 [ %181, %172 ], [ %166, %165 ]
  %174 = phi i32 [ %182, %172 ], [ %170, %165 ]
  %175 = getelementptr inbounds [100005 x i32], [100005 x i32]* @rev, i64 0, i64 %173
  %176 = load i32, i32* %175, align 4, !tbaa !8
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds [100005 x i64], [100005 x i64]* @dep, i64 0, i64 %177
  %179 = load i64, i64* %178, align 8, !tbaa !11
  %180 = add nsw i64 %179, %133
  store i64 %180, i64* %178, align 8, !tbaa !11
  %181 = add nsw i64 %173, 1
  %182 = add i32 %174, -1
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %184, label %172, !llvm.loop !25

184:                                              ; preds = %172, %165
  %185 = phi i64 [ %166, %165 ], [ %181, %172 ]
  %186 = icmp ult i32 %169, 3
  br i1 %186, label %229, label %197

187:                                              ; preds = %187, %153
  %188 = phi i32 [ %146, %153 ], [ %195, %187 ]
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds [100005 x i64], [100005 x i64]* @dp, i64 0, i64 %189
  %191 = load i64, i64* %190, align 8, !tbaa !11
  %192 = add nsw i64 %191, %158
  %193 = srem i64 %192, 1000000007
  store i64 %193, i64* %190, align 8, !tbaa !11
  %194 = getelementptr inbounds [100005 x i32], [100005 x i32]* @par, i64 0, i64 %189
  %195 = load i32, i32* %194, align 4, !tbaa !8
  %196 = icmp eq i32 %195, 0
  br i1 %196, label %159, label %187, !llvm.loop !20

197:                                              ; preds = %184, %197
  %198 = phi i64 [ %226, %197 ], [ %185, %184 ]
  %199 = getelementptr inbounds [100005 x i32], [100005 x i32]* @rev, i64 0, i64 %198
  %200 = load i32, i32* %199, align 4, !tbaa !8
  %201 = sext i32 %200 to i64
  %202 = getelementptr inbounds [100005 x i64], [100005 x i64]* @dep, i64 0, i64 %201
  %203 = load i64, i64* %202, align 8, !tbaa !11
  %204 = add nsw i64 %203, %133
  store i64 %204, i64* %202, align 8, !tbaa !11
  %205 = add nsw i64 %198, 1
  %206 = getelementptr inbounds [100005 x i32], [100005 x i32]* @rev, i64 0, i64 %205
  %207 = load i32, i32* %206, align 4, !tbaa !8
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds [100005 x i64], [100005 x i64]* @dep, i64 0, i64 %208
  %210 = load i64, i64* %209, align 8, !tbaa !11
  %211 = add nsw i64 %210, %133
  store i64 %211, i64* %209, align 8, !tbaa !11
  %212 = add nsw i64 %198, 2
  %213 = getelementptr inbounds [100005 x i32], [100005 x i32]* @rev, i64 0, i64 %212
  %214 = load i32, i32* %213, align 4, !tbaa !8
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds [100005 x i64], [100005 x i64]* @dep, i64 0, i64 %215
  %217 = load i64, i64* %216, align 8, !tbaa !11
  %218 = add nsw i64 %217, %133
  store i64 %218, i64* %216, align 8, !tbaa !11
  %219 = add nsw i64 %198, 3
  %220 = getelementptr inbounds [100005 x i32], [100005 x i32]* @rev, i64 0, i64 %219
  %221 = load i32, i32* %220, align 4, !tbaa !8
  %222 = sext i32 %221 to i64
  %223 = getelementptr inbounds [100005 x i64], [100005 x i64]* @dep, i64 0, i64 %222
  %224 = load i64, i64* %223, align 8, !tbaa !11
  %225 = add nsw i64 %224, %133
  store i64 %225, i64* %223, align 8, !tbaa !11
  %226 = add nsw i64 %198, 4
  %227 = trunc i64 %226 to i32
  %228 = icmp eq i32 %167, %227
  br i1 %228, label %229, label %197, !llvm.loop !21

229:                                              ; preds = %184, %197, %159
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #17
  br label %240

230:                                              ; preds = %126
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #17
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #17
  %231 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0), i32* nonnull %4, i32* nonnull %5)
  %232 = load i32, i32* %4, align 4, !tbaa !8
  %233 = load i32, i32* %5, align 4, !tbaa !8
  %234 = call i32 @_Z5queryii(i32 %232, i32 %233)
  %235 = icmp slt i32 %234, 0
  %236 = add nsw i32 %234, 1000000007
  %237 = select i1 %235, i32 %236, i32 %234
  %238 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0), i32 %237)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #17
  br label %240

239:                                              ; preds = %126
  call void @__assert_fail(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.8, i64 0, i64 0), i32 115, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__PRETTY_FUNCTION__.main, i64 0, i64 0)) #20
  unreachable

240:                                              ; preds = %230, %229
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #17
  %241 = load i32, i32* @q, align 4, !tbaa !8
  %242 = add nsw i32 %241, -1
  store i32 %242, i32* @q, align 4, !tbaa !8
  %243 = icmp eq i32 %241, 0
  br i1 %243, label %244, label %126, !llvm.loop !26

244:                                              ; preds = %240, %11
  ret i32 0
}

declare dso_local %struct._IO_FILE* @freopen(i8*, i8*, %struct._IO_FILE*) local_unnamed_addr #0

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @__isoc99_scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #9

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #9

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) local_unnamed_addr #10

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #11

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #12

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #13

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #14

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_ImpressiveTree.cpp() #15 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #17
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(2400120) bitcast ([100005 x %"class.std::vector"]* @adj to i8*), i8 0, i64 2400120, i1 false) #17
  %2 = tail call i32 @__cxa_atexit(void (i8*)* nonnull @__cxx_global_array_dtor, i8* null, i8* nonnull @__dso_handle) #17
  ret void
}

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #16

attributes #0 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nofree nounwind }
attributes #3 = { nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nofree nosync nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #6 = { mustprogress nofree norecurse nosync nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { mustprogress nofree nosync nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { norecurse uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #10 = { noreturn nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #11 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #12 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #13 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #14 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #15 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #16 = { argmemonly nofree nounwind willreturn writeonly }
attributes #17 = { nounwind }
attributes #18 = { noreturn }
attributes #19 = { allocsize(0) }
attributes #20 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 0}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!9, !9, i64 0}
!9 = !{!"int", !6, i64 0}
!10 = !{!5, !5, i64 0}
!11 = !{!12, !12, i64 0}
!12 = !{!"long long", !6, i64 0}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.unroll.disable"}
!15 = distinct !{!15, !16}
!16 = !{!"llvm.loop.mustprogress"}
!17 = distinct !{!17, !16}
!18 = distinct !{!18, !16}
!19 = distinct !{!19, !14}
!20 = distinct !{!20, !16}
!21 = distinct !{!21, !16}
!22 = !{!4, !5, i64 8}
!23 = !{!4, !5, i64 16}
!24 = distinct !{!24, !16}
!25 = distinct !{!25, !14}
!26 = distinct !{!26, !16}
