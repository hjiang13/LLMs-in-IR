<|im_start|>system

        ```
        digraph G {
            node0[label="0: _Z18correct_bracketingNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE",style="filled",fillcolor="lightblue"]
            node1[label="5: _Z18correct_bracketingNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE",style="filled",fillcolor="lightblue"]
            node2[label="8: _Z18correct_bracketingNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE",style="filled",fillcolor="lightblue"]
            node3[label="10: _Z18correct_bracketingNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE",style="filled",fillcolor="lightblue"]
            node4[label="23: _Z18correct_bracketingNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE",style="filled",fillcolor="lightblue"]
            node5[label="25: _Z18correct_bracketingNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE",style="filled",fillcolor="lightblue"]

            node0 -> node1 [label="true"]
            node0 -> node5 [label="false"]
            node1 -> node10 [label="true"]
            node1 -> node3 [label="false"]
            node2 -> node23 [label="true"]
            node2 -> node10 [label="false"]
            node3 -> node8 [label="true"]
            node3 -> node25 [label="false"]
            node4 -> node25 [label="true"]
            node4 -> node10 [label="false"]
        }
        ```
       <|im_end|>
<|im_start|>user

        ```
        digraph G {
            node0[label="0: _Z18correct_bracketingNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE",style="filled",fillcolor="lightblue"]
            node1[label="5: _Z18correct_bracketingNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE",style="filled",fillcolor="lightblue"]
            node2[label="8: _Z18correct_bracketingNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE",style="filled",fillcolor="lightblue"]
            node3[label="10: _Z18correct_bracketingNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE",style="filled",fillcolor="lightblue"]
            node4[label="23: _Z18correct_bracketingNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE",style="filled",fillcolor="lightblue"]
            node5[label="25: _Z18correct_bracketingNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE",style="filled",fillcolor="lightblue"]

            node0 -> node1 [label="true"]
            node0 -> node5 [label="false"]
            node1 -> node10 [label="true"]
            node1 -> node3 [label="false"]
            node2 -> node23 [label="true"]
            node2 -> node10 [label="false"]
            node3 -> node8 [label="true"]
            node3 -> node25 [label="false"]
            node4 -> node25 [label="true"]
            node4 -> node10 [label="false"]
        }
        ```
       <|im_end|>
<|im_start|>system

        ```
        Correctness: 100%
        Your output format is correct.
        ```
       <|im_end|>



### Instruction
You can get the input file from the `./data/data.json` 

```sh
cd ./data/
cat data.json 
```


### How to run the code

```sh
git clone https://github.com/richarddddd1996/IR2CFG-competition.git
cd IR2CFG-competition
docker build -t ir2cfg .
docker run -it ir2cfg bash
# run the task 
cd /app/data/
python3 ./convert.py data.json out.txt &> out.log

# test the correctness of your output
python3 ./judge.py data.json out.txt &> out.log
```

### Test the correctness of your code
```sh
cd ./data/
python3 ./judge.py data.json out.txt &> out.log
```

### How to submit your code
Please submit your code by email to richarddddd1996@gmail.com

### Acknowledgement
We sincerely thank [@Yangzihao](https://github.com/Yangzihao) for providing the initial code.