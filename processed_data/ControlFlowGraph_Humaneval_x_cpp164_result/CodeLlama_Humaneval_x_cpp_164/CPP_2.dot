<|im_start|>system
You are an expert in high-performance computation.<|im_end|>
<|im_start|>user

        You are an control flow graph analyzer in Intermediate code. I will give you a IR code program and you give me the control flow graph. 
        
        Here is the IR code input:
        ```
        b'; ModuleID = \'../../Human_xBenchmarks_164/CPP_2/CPP_2.cpp\'\nsource_filename = "../../Human_xBenchmarks_164/CPP_2/CPP_2.cpp"\ntarget datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"\ntarget triple = "x86_64-unknown-linux-gnu"\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn\ndefine dso_local float @_Z15truncate_numberf(float %0) local_unnamed_addr #0 {\n  %2 = fptosi float %0 to i32\n  %3 = sitofp i32 %2 to float\n  %4 = fsub float %0, %3\n  ret float %4\n}\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !"wchar_size", i32 4}\n!1 = !{i32 7, !"uwtable", i32 1}\n!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}\n'
        ```
       Your task is to The output format is dot file including nodes and edges. Don't need to list the content of each basic blocks. Just show the title of each nodes.
       <|im_end|>
"""


# =================
# =       Labels  =
# =================



# This is the default for the labeling scheme
# The Nodes can be any of:
#  - 'node'
#  - 'instruction'
#  - 'variable'
#  - 'basic_block'
#  - 'loop'
#  - 'function'
#  - 'program'
#
# The Edges can be any of:
#  - 'edge'
#  - 'control_flow'
#  - 'data_dependence'
#  - 'function_call'
#  - 'return'
#  - 'memory_dependence'
#  - 'call_argument'
#  - 'call_return'
# 
# The Data can be any of:
#  - 'value'
#  - 'type'
#  - 'constant'
#


# Default is:
#  - Nodes: basic_block
#  - Edges: edge
#  - Data: value


# =================
# =       Misc    =
# =================



# This is the default for the labeling scheme
# The Nodes can be any of:
#  - 'node'
#  - 'instruction'
#  - 'variable'
#  - 'basic_block'
#  - 'loop'
#  - 'function'
#  - 'program'
#
# The Edges can be any of:
#  - 'edge'
#  - 'control_flow'
#  - 'data_dependence'
#  - 'function_call'
#  - 'return'
#  - 'memory_dependence'
#  - 'call_argument'
#  - 'call_return'
# 
# The Data can be any of:
#  - 'value'
#  - 'type'
#  - 'constant'
#


# Default is:
#  - Nodes: basic_block
#  - Edges: edge
#  - Data: value


#==================
#=       Info     =
#==================

# You are a compiler engineer in the field of high-performance computing.
# Input: Program
# Output: A control flow graph


#==================
#=       Info     =
#==================

# You are an expert in security and program analysis.
# Input: Program
# Output: A control flow graph


#==================
#=       Info     =
#==================

# You are an expert in security and program analysis.
# Input: Program
# Output: A data flow graph


#==================
#=       Info     =
#==================

# You are an expert in high-performance computation.
# Input: Program
# Output: A control flow graph


#==================
#=       Info     =
#==================

# You are an expert in high-performance computation.
# Input: Program
# Output: A control flow graph