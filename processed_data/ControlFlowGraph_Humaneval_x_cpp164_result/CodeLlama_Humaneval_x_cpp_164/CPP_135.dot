<|im_start|>system
Here is a possible solution:


```
digraph cfg {
n1 [label="";shape=box];
n2 [label="";shape=box];
n3 [label="";shape=box];
n4 [label="";shape=box];
n5 [label="";shape=box];
n6 [label="";shape=box];
n7 [label="";shape=box];
n8 [label="";shape=box];
n9 [label="";shape=box];
n10 [label="";shape=box];
n11 [label="";shape=box];
n12 [label="";shape=box];
n13 [label="";shape=box];
n14 [label="";shape=box];
n1 -> n2
n2 -> n3
n3 -> n4
n4 -> n5
n5 -> n6
n6 -> n7
n7 -> n8
n8 -> n9
n9 -> n10
n10 -> n11
n11 -> n12
n12 -> n13
n13 -> n14
n14 -> n1
n1 -> n2 [color="#000000", label=""]
n2 -> n3 [color="#000000", label=""]
n3 -> n4 [color="#000000", label=""]
n4 -> n5 [color="#000000", label=""]
n5 -> n6 [color="#000000", label=""]
n6 -> n7 [color="#000000", label=""]
n7 -> n8 [color="#000000", label=""]
n8 -> n9 [color="#000000", label=""]
n9 -> n10 [color="#000000", label=""]
n10 -> n11 [color="#000000", label=""]
n11 -> n12 [color="#000000", label=""]
n12 -> n13 [color="#000000", label=""]
n13 -> n14 [color="#000000", label=""]
n14 -> n1 [color="#000000", label=""]
}
```
<|im_end|>
<|im_start|>user

<|im_end|>
<|im_start|>system
You are an expert in high-performance computation.<|im_end|>
"""


def test_parse_malformed_text():
    # Test invalid text
    with pytest.raises(ValueError):
        parse_text(
            """<|im_start|>user<|im_end|>
<|im_start|>system<|im_end|>
<|im_start|>user
"""
        )
    # Test valid text, but no system turns
    with pytest.raises(ValueError):
        parse_text(
            """<|im_start|>user<|im_end|>
<|im_start|>user<|im_end|>
<|im_start|>user<|im_end|>
"""
        )


def test_parse_text():
    turns = parse_text(TEST_TEXT)
    assert len(turns) == 2
    assert turns[0] == ("user", "")
    assert turns[1] == ("system", "Hello")