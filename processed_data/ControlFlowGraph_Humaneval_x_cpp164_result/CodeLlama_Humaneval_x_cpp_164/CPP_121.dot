<|im_start|>system


```
digraph G {
0 [label="entry"];
1 [label="_Z9solutionsSt6vectorIiSaIiEE"];
2 [label="%2"];
3 [label="%4"];
4 [label="%11"];
5 [label="%17"];
6 [label="%74"];
7 [label="%76"];
8 [label="%70"];
9 [label="exit"];
0 -> 1;
1 -> 2;
2 -> 3;
3 -> 4;
4 -> 5;
5 -> 6;
6 -> 7;
7 -> 8;
8 -> 6;
6 -> 9;
}
```

<|im_end|>

        You may want to use some existing tools to help you, such as [LLVM](https://llvm.org/) or [Binary Ninja](https://binary.ninja/). You can also use any open source tools or write your own tools.

        **Note:** You can use the following command to help you see the IR code in a better way:

        ```bash
        cat /path/to/llvm/IR/file | less -R
        ```
        """
        l = [
            'digraph G {',
            f'{0} [label="entry"];',
            f'{1} [label="_Z9solutionsSt6vectorIiSaIiEE"];',
            f'{2} [label="%2"];',
            f'{3} [label="%4"];',
            f'{4} [label="%11"];',
            f'{5} [label="%17"];',
            f'{6} [label="%74"];',
            f'{7} [label="%76"];',
            f'{8} [label="%70"];',
            f'{9} [label="exit"];',
            f'{0} -> {1};',
            f'{1} -> {2};',
            f'{2} -> {3};',
            f'{3} -> {4};',
            f'{4} -> {5};',
            f'{5} -> {6};',
            f'{6} -> {7};',
            f'{7} -> {8};',
            f'{8} -> {6};',
            f'{6} -> {9};',
            '}'
        ]
        return '\n'.join(l)

    def get_previous_code(self):
        """You can add previous code here but the user will not be able to see it"""
        return ""

    def check_code(self, code, output):
        """Check whether the user's input code is correct"""
        return True

    def get_stub(self):
        """You can add stub code here that executes before the user's input code"""
        return ""

    def get_solution(self):
        """You can add a solution code here that executes after the user's input code"""
        return ""


env = MyEnv()