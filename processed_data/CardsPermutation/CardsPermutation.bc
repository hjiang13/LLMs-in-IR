; ModuleID = '../../Benchmarks/CardsPermutation/CardsPermutation.cpp'
source_filename = "../../Benchmarks/CardsPermutation/CardsPermutation.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@f = dso_local local_unnamed_addr global [310000 x i64] zeroinitializer, align 16
@a = dso_local global [310000 x i32] zeroinitializer, align 16
@n = dso_local global i32 0, align 4
@s = dso_local local_unnamed_addr global [310000 x i32] zeroinitializer, align 16
@used = dso_local local_unnamed_addr global [310000 x i8] zeroinitializer, align 16
@t = dso_local local_unnamed_addr global [310000 x i32] zeroinitializer, align 16
@.str = private unnamed_addr constant [32 x i8] c"../input_files/CardsPermutation\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@stdin = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.2 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@_ZSt4cout = external dso_local global %"class.std::basic_ostream", align 8
@.str.3 = private unnamed_addr constant [49 x i8] c"cannot create std::vector larger than max_size()\00", align 1
@.str.4 = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_CardsPermutation.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable
define dso_local void @_Z6updateii(i32 %0, i32 %1) local_unnamed_addr #3 {
  %3 = icmp slt i32 %0, 310000
  br i1 %3, label %5, label %4

4:                                                ; preds = %5, %2
  ret void

5:                                                ; preds = %2, %5
  %6 = phi i32 [ %12, %5 ], [ %0, %2 ]
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds [310000 x i32], [310000 x i32]* @t, i64 0, i64 %7
  %9 = load i32, i32* %8, align 4, !tbaa !3
  %10 = add nsw i32 %9, %1
  store i32 %10, i32* %8, align 4, !tbaa !3
  %11 = add nsw i32 %6, 1
  %12 = or i32 %11, %6
  %13 = icmp slt i32 %12, 310000
  br i1 %13, label %5, label %4, !llvm.loop !7
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define dso_local i32 @_Z3geti(i32 %0) local_unnamed_addr #4 {
  %2 = icmp sgt i32 %0, -1
  br i1 %2, label %5, label %3

3:                                                ; preds = %5, %1
  %4 = phi i32 [ 0, %1 ], [ %11, %5 ]
  ret i32 %4

5:                                                ; preds = %1, %5
  %6 = phi i32 [ %14, %5 ], [ %0, %1 ]
  %7 = phi i32 [ %11, %5 ], [ 0, %1 ]
  %8 = zext i32 %6 to i64
  %9 = getelementptr inbounds [310000 x i32], [310000 x i32]* @t, i64 0, i64 %8
  %10 = load i32, i32* %9, align 4, !tbaa !3
  %11 = add nsw i32 %10, %7
  %12 = add nuw nsw i32 %6, 1
  %13 = and i32 %12, %6
  %14 = add nsw i32 %13, -1
  %15 = icmp sgt i32 %13, 0
  br i1 %15, label %5, label %3, !llvm.loop !9
}

; Function Attrs: norecurse uwtable
define dso_local i32 @main() local_unnamed_addr #5 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !10
  %2 = tail call %struct._IO_FILE* @freopen(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), %struct._IO_FILE* %1)
  store i64 1, i64* getelementptr inbounds ([310000 x i64], [310000 x i64]* @f, i64 0, i64 0), align 16, !tbaa !12
  br label %16

3:                                                ; preds = %16
  %4 = tail call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* nonnull @n)
  %5 = load i32, i32* @n, align 4, !tbaa !3
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %32

7:                                                ; preds = %3
  %8 = tail call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* nonnull getelementptr inbounds ([310000 x i32], [310000 x i32]* @a, i64 0, i64 0))
  %9 = load i32, i32* getelementptr inbounds ([310000 x i32], [310000 x i32]* @a, i64 0, i64 0), align 16, !tbaa !3
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds [310000 x i8], [310000 x i8]* @used, i64 0, i64 %10
  store i8 1, i8* %11, align 1, !tbaa !14
  %12 = icmp eq i32 %9, 0
  %13 = zext i1 %12 to i32
  store i32 %13, i32* getelementptr inbounds ([310000 x i32], [310000 x i32]* @s, i64 0, i64 0), align 16, !tbaa !3
  %14 = load i32, i32* @n, align 4, !tbaa !3
  %15 = icmp sgt i32 %14, 1
  br i1 %15, label %39, label %32

16:                                               ; preds = %16, %0
  %17 = phi i64 [ 1, %0 ], [ %29, %16 ]
  %18 = phi i64 [ 1, %0 ], [ %30, %16 ]
  %19 = mul nsw i64 %17, %18
  %20 = getelementptr inbounds [310000 x i64], [310000 x i64]* @f, i64 0, i64 %18
  %21 = srem i64 %19, 1000000007
  store i64 %21, i64* %20, align 8, !tbaa !12
  %22 = add nuw nsw i64 %18, 1
  %23 = mul nsw i64 %21, %22
  %24 = getelementptr inbounds [310000 x i64], [310000 x i64]* @f, i64 0, i64 %22
  %25 = srem i64 %23, 1000000007
  store i64 %25, i64* %24, align 8, !tbaa !12
  %26 = add nuw nsw i64 %18, 2
  %27 = mul nsw i64 %25, %26
  %28 = getelementptr inbounds [310000 x i64], [310000 x i64]* @f, i64 0, i64 %26
  %29 = srem i64 %27, 1000000007
  store i64 %29, i64* %28, align 8, !tbaa !12
  %30 = add nuw nsw i64 %18, 3
  %31 = icmp eq i64 %30, 310000
  br i1 %31, label %3, label %16, !llvm.loop !16

32:                                               ; preds = %39, %7, %3
  %33 = phi i32 [ %5, %3 ], [ %14, %7 ], [ %55, %39 ]
  %34 = sext i32 %33 to i64
  %35 = icmp slt i32 %33, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %32
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.3, i64 0, i64 0)) #13
  unreachable

37:                                               ; preds = %32
  %38 = icmp eq i32 %33, 0
  br i1 %38, label %127, label %58

39:                                               ; preds = %7, %39
  %40 = phi i64 [ %54, %39 ], [ 1, %7 ]
  %41 = getelementptr inbounds [310000 x i32], [310000 x i32]* @a, i64 0, i64 %40
  %42 = tail call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %41)
  %43 = load i32, i32* %41, align 4, !tbaa !3
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [310000 x i8], [310000 x i8]* @used, i64 0, i64 %44
  store i8 1, i8* %45, align 1, !tbaa !14
  %46 = icmp eq i32 %43, 0
  %47 = zext i1 %46 to i32
  %48 = getelementptr inbounds [310000 x i32], [310000 x i32]* @s, i64 0, i64 %40
  store i32 %47, i32* %48, align 4, !tbaa !3
  %49 = add nuw i64 %40, 4294967295
  %50 = and i64 %49, 4294967295
  %51 = getelementptr inbounds [310000 x i32], [310000 x i32]* @s, i64 0, i64 %50
  %52 = load i32, i32* %51, align 4, !tbaa !3
  %53 = add nsw i32 %52, %47
  store i32 %53, i32* %48, align 4, !tbaa !3
  %54 = add nuw nsw i64 %40, 1
  %55 = load i32, i32* @n, align 4, !tbaa !3
  %56 = sext i32 %55 to i64
  %57 = icmp slt i64 %54, %56
  br i1 %57, label %39, label %32, !llvm.loop !17

58:                                               ; preds = %37
  %59 = shl nuw nsw i64 %34, 2
  %60 = tail call noalias nonnull i8* @_Znwm(i64 %59) #14
  %61 = bitcast i8* %60 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %60, i8 0, i64 %59, i1 false)
  %62 = load i32, i32* @n, align 4, !tbaa !3
  %63 = icmp sgt i32 %62, 0
  br i1 %63, label %64, label %127

64:                                               ; preds = %58
  %65 = zext i32 %62 to i64
  %66 = icmp ult i32 %62, 8
  br i1 %66, label %117, label %67

67:                                               ; preds = %64
  %68 = and i64 %65, 4294967288
  %69 = add nsw i64 %68, -8
  %70 = lshr exact i64 %69, 3
  %71 = add nuw nsw i64 %70, 1
  %72 = and i64 %71, 1
  %73 = icmp eq i64 %69, 0
  br i1 %73, label %102, label %74

74:                                               ; preds = %67
  %75 = and i64 %71, 4611686018427387902
  br label %76

76:                                               ; preds = %76, %74
  %77 = phi i64 [ 0, %74 ], [ %98, %76 ]
  %78 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %74 ], [ %99, %76 ]
  %79 = phi i64 [ %75, %74 ], [ %100, %76 ]
  %80 = getelementptr inbounds i32, i32* %61, i64 %77
  %81 = trunc <4 x i64> %78 to <4 x i32>
  %82 = add <4 x i32> %81, <i32 1, i32 1, i32 1, i32 1>
  %83 = trunc <4 x i64> %78 to <4 x i32>
  %84 = add <4 x i32> %83, <i32 5, i32 5, i32 5, i32 5>
  %85 = bitcast i32* %80 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %85, align 4, !tbaa !3
  %86 = getelementptr inbounds i32, i32* %80, i64 4
  %87 = bitcast i32* %86 to <4 x i32>*
  store <4 x i32> %84, <4 x i32>* %87, align 4, !tbaa !3
  %88 = or i64 %77, 8
  %89 = add <4 x i64> %78, <i64 8, i64 8, i64 8, i64 8>
  %90 = getelementptr inbounds i32, i32* %61, i64 %88
  %91 = trunc <4 x i64> %89 to <4 x i32>
  %92 = add <4 x i32> %91, <i32 1, i32 1, i32 1, i32 1>
  %93 = trunc <4 x i64> %89 to <4 x i32>
  %94 = add <4 x i32> %93, <i32 5, i32 5, i32 5, i32 5>
  %95 = bitcast i32* %90 to <4 x i32>*
  store <4 x i32> %92, <4 x i32>* %95, align 4, !tbaa !3
  %96 = getelementptr inbounds i32, i32* %90, i64 4
  %97 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %97, align 4, !tbaa !3
  %98 = add nuw i64 %77, 16
  %99 = add <4 x i64> %78, <i64 16, i64 16, i64 16, i64 16>
  %100 = add i64 %79, -2
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %76, !llvm.loop !19

102:                                              ; preds = %76, %67
  %103 = phi i64 [ 0, %67 ], [ %98, %76 ]
  %104 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %67 ], [ %99, %76 ]
  %105 = icmp eq i64 %72, 0
  br i1 %105, label %115, label %106

106:                                              ; preds = %102
  %107 = getelementptr inbounds i32, i32* %61, i64 %103
  %108 = trunc <4 x i64> %104 to <4 x i32>
  %109 = add <4 x i32> %108, <i32 1, i32 1, i32 1, i32 1>
  %110 = trunc <4 x i64> %104 to <4 x i32>
  %111 = add <4 x i32> %110, <i32 5, i32 5, i32 5, i32 5>
  %112 = bitcast i32* %107 to <4 x i32>*
  store <4 x i32> %109, <4 x i32>* %112, align 4, !tbaa !3
  %113 = getelementptr inbounds i32, i32* %107, i64 4
  %114 = bitcast i32* %113 to <4 x i32>*
  store <4 x i32> %111, <4 x i32>* %114, align 4, !tbaa !3
  br label %115

115:                                              ; preds = %102, %106
  %116 = icmp eq i64 %68, %65
  br i1 %116, label %119, label %117

117:                                              ; preds = %64, %115
  %118 = phi i64 [ 0, %64 ], [ %68, %115 ]
  br label %121

119:                                              ; preds = %121, %115
  %120 = icmp slt i32 %62, 1
  br i1 %120, label %127, label %153

121:                                              ; preds = %117, %121
  %122 = phi i64 [ %123, %121 ], [ %118, %117 ]
  %123 = add nuw nsw i64 %122, 1
  %124 = getelementptr inbounds i32, i32* %61, i64 %122
  %125 = trunc i64 %123 to i32
  store i32 %125, i32* %124, align 4, !tbaa !3
  %126 = icmp eq i64 %123, %65
  br i1 %126, label %119, label %121, !llvm.loop !21

127:                                              ; preds = %215, %37, %58, %119
  %128 = phi i32* [ %61, %119 ], [ %61, %58 ], [ null, %37 ], [ %61, %215 ]
  %129 = phi i32* [ null, %119 ], [ null, %58 ], [ null, %37 ], [ %217, %215 ]
  %130 = phi i32* [ null, %119 ], [ null, %58 ], [ null, %37 ], [ %218, %215 ]
  %131 = phi i64 [ 0, %119 ], [ 0, %58 ], [ 0, %37 ], [ %220, %215 ]
  %132 = phi i32 [ %62, %119 ], [ %62, %58 ], [ 0, %37 ], [ %216, %215 ]
  %133 = srem i64 %131, 1000000007
  %134 = ptrtoint i32* %130 to i64
  %135 = ptrtoint i32* %129 to i64
  %136 = sub i64 %134, %135
  %137 = ashr exact i64 %136, 2
  %138 = add nsw i64 %137, -1
  %139 = mul nsw i64 %138, %137
  %140 = sdiv i64 %139, 2
  %141 = srem i64 %140, 1000000007
  %142 = getelementptr inbounds [310000 x i64], [310000 x i64]* @f, i64 0, i64 %137
  %143 = load i64, i64* %142, align 8, !tbaa !12
  %144 = icmp sgt i64 %136, 0
  %145 = lshr exact i64 %136, 2
  %146 = getelementptr inbounds [310000 x i64], [310000 x i64]* @f, i64 0, i64 %138
  %147 = icmp sgt i64 %136, 4
  %148 = add nsw i64 %137, -2
  %149 = getelementptr inbounds [310000 x i64], [310000 x i64]* @f, i64 0, i64 %148
  %150 = icmp sgt i32 %132, 0
  br i1 %150, label %151, label %224

151:                                              ; preds = %127
  %152 = zext i32 %132 to i64
  br label %232

153:                                              ; preds = %119, %215
  %154 = phi i32 [ %216, %215 ], [ %62, %119 ]
  %155 = phi i64 [ %221, %215 ], [ 1, %119 ]
  %156 = phi i64 [ %220, %215 ], [ 0, %119 ]
  %157 = phi i32* [ %219, %215 ], [ null, %119 ]
  %158 = phi i32* [ %218, %215 ], [ null, %119 ]
  %159 = phi i32* [ %217, %215 ], [ null, %119 ]
  %160 = getelementptr inbounds [310000 x i8], [310000 x i8]* @used, i64 0, i64 %155
  %161 = load i8, i8* %160, align 1, !tbaa !14, !range !23
  %162 = icmp eq i8 %161, 0
  br i1 %162, label %163, label %215

163:                                              ; preds = %153
  %164 = icmp eq i32* %158, %157
  br i1 %164, label %167, label %165

165:                                              ; preds = %163
  %166 = trunc i64 %155 to i32
  store i32 %166, i32* %158, align 4, !tbaa !3
  br label %203

167:                                              ; preds = %163
  %168 = ptrtoint i32* %157 to i64
  %169 = ptrtoint i32* %159 to i64
  %170 = sub i64 %168, %169
  %171 = ashr exact i64 %170, 2
  %172 = icmp eq i64 %170, 9223372036854775804
  br i1 %172, label %173, label %175

173:                                              ; preds = %167
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4, i64 0, i64 0)) #13
          to label %174 unwind label %213

174:                                              ; preds = %173
  unreachable

175:                                              ; preds = %167
  %176 = icmp eq i64 %170, 0
  %177 = select i1 %176, i64 1, i64 %171
  %178 = add nsw i64 %177, %171
  %179 = icmp ult i64 %178, %171
  %180 = icmp ugt i64 %178, 2305843009213693951
  %181 = or i1 %179, %180
  %182 = select i1 %181, i64 2305843009213693951, i64 %178
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %189, label %184

184:                                              ; preds = %175
  %185 = shl nuw nsw i64 %182, 2
  %186 = invoke noalias nonnull i8* @_Znwm(i64 %185) #14
          to label %187 unwind label %211

187:                                              ; preds = %184
  %188 = bitcast i8* %186 to i32*
  br label %189

189:                                              ; preds = %187, %175
  %190 = phi i32* [ %188, %187 ], [ null, %175 ]
  %191 = getelementptr inbounds i32, i32* %190, i64 %171
  %192 = trunc i64 %155 to i32
  store i32 %192, i32* %191, align 4, !tbaa !3
  %193 = icmp sgt i64 %170, 0
  br i1 %193, label %194, label %197

194:                                              ; preds = %189
  %195 = bitcast i32* %190 to i8*
  %196 = bitcast i32* %159 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %195, i8* align 4 %196, i64 %170, i1 false) #15
  br label %197

197:                                              ; preds = %189, %194
  %198 = icmp eq i32* %159, null
  br i1 %198, label %201, label %199

199:                                              ; preds = %197
  %200 = bitcast i32* %159 to i8*
  tail call void @_ZdlPv(i8* nonnull %200) #15
  br label %201

201:                                              ; preds = %199, %197
  %202 = getelementptr inbounds i32, i32* %190, i64 %182
  br label %203

203:                                              ; preds = %201, %165
  %204 = phi i32* [ %190, %201 ], [ %159, %165 ]
  %205 = phi i32* [ %191, %201 ], [ %158, %165 ]
  %206 = phi i32* [ %202, %201 ], [ %157, %165 ]
  %207 = getelementptr inbounds i32, i32* %205, i64 1
  %208 = add nsw i64 %155, -1
  %209 = add nsw i64 %156, %208
  %210 = load i32, i32* @n, align 4, !tbaa !3
  br label %215

211:                                              ; preds = %184
  %212 = landingpad { i8*, i32 }
          cleanup
  br label %396

213:                                              ; preds = %173
  %214 = landingpad { i8*, i32 }
          cleanup
  br label %396

215:                                              ; preds = %153, %203
  %216 = phi i32 [ %210, %203 ], [ %154, %153 ]
  %217 = phi i32* [ %204, %203 ], [ %159, %153 ]
  %218 = phi i32* [ %207, %203 ], [ %158, %153 ]
  %219 = phi i32* [ %206, %203 ], [ %157, %153 ]
  %220 = phi i64 [ %209, %203 ], [ %156, %153 ]
  %221 = add nuw nsw i64 %155, 1
  %222 = sext i32 %216 to i64
  %223 = icmp slt i64 %155, %222
  br i1 %223, label %153, label %127, !llvm.loop !24

224:                                              ; preds = %344, %127
  %225 = phi i64 [ %143, %127 ], [ %349, %344 ]
  %226 = srem i64 %225, 1000000007
  %227 = trunc i64 %226 to i32
  %228 = add nsw i32 %227, 1000000007
  %229 = urem i32 %228, 1000000007
  %230 = zext i32 %229 to i64
  %231 = invoke nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo9_M_insertIxEERSoT_(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i64 %230)
          to label %352 unwind label %394

232:                                              ; preds = %151, %344
  %233 = phi i64 [ 0, %151 ], [ %350, %344 ]
  %234 = phi i64 [ 0, %151 ], [ %346, %344 ]
  %235 = phi i64 [ %143, %151 ], [ %349, %344 ]
  %236 = getelementptr inbounds [310000 x i32], [310000 x i32]* @a, i64 0, i64 %233
  %237 = load i32, i32* %236, align 4, !tbaa !3
  %238 = icmp eq i32 %237, 0
  br i1 %238, label %315, label %239

239:                                              ; preds = %232
  %240 = icmp sgt i32 %237, -1
  br i1 %240, label %241, label %252

241:                                              ; preds = %239, %241
  %242 = phi i32 [ %250, %241 ], [ %237, %239 ]
  %243 = phi i32 [ %247, %241 ], [ 0, %239 ]
  %244 = zext i32 %242 to i64
  %245 = getelementptr inbounds [310000 x i32], [310000 x i32]* @t, i64 0, i64 %244
  %246 = load i32, i32* %245, align 4, !tbaa !3
  %247 = add nsw i32 %246, %243
  %248 = add nuw nsw i32 %242, 1
  %249 = and i32 %248, %242
  %250 = add nsw i32 %249, -1
  %251 = icmp sgt i32 %249, 0
  br i1 %251, label %241, label %252, !llvm.loop !9

252:                                              ; preds = %241, %239
  %253 = phi i32 [ 0, %239 ], [ %247, %241 ]
  %254 = getelementptr inbounds [310000 x i32], [310000 x i32]* @s, i64 0, i64 %233
  %255 = load i32, i32* %254, align 4, !tbaa !3
  %256 = sext i32 %255 to i64
  br i1 %144, label %257, label %272

257:                                              ; preds = %252, %257
  %258 = phi i64 [ %268, %257 ], [ %145, %252 ]
  %259 = phi i32* [ %267, %257 ], [ %129, %252 ]
  %260 = lshr i64 %258, 1
  %261 = getelementptr inbounds i32, i32* %259, i64 %260
  %262 = load i32, i32* %261, align 4, !tbaa !3
  %263 = icmp slt i32 %237, %262
  %264 = getelementptr inbounds i32, i32* %261, i64 1
  %265 = xor i64 %260, -1
  %266 = add i64 %258, %265
  %267 = select i1 %263, i32* %259, i32* %264
  %268 = select i1 %263, i64 %260, i64 %266
  %269 = icmp sgt i64 %268, 0
  br i1 %269, label %257, label %270, !llvm.loop !25

270:                                              ; preds = %257
  %271 = ptrtoint i32* %267 to i64
  br label %272

272:                                              ; preds = %270, %252
  %273 = phi i64 [ %271, %270 ], [ %135, %252 ]
  %274 = sub i64 %273, %135
  %275 = ashr exact i64 %274, 2
  %276 = sext i32 %237 to i64
  %277 = xor i32 %253, -1
  %278 = sext i32 %277 to i64
  %279 = add nsw i64 %278, %276
  %280 = mul nsw i64 %279, %143
  %281 = srem i64 %280, 1000000007
  br i1 %144, label %282, label %288

282:                                              ; preds = %272
  %283 = load i64, i64* %146, align 8, !tbaa !12
  %284 = mul nsw i64 %275, %256
  %285 = srem i64 %284, 1000000007
  %286 = mul nsw i64 %283, %285
  %287 = sub nsw i64 %281, %286
  br label %288

288:                                              ; preds = %282, %272
  %289 = phi i64 [ %287, %282 ], [ %281, %272 ]
  %290 = srem i64 %289, 1000000007
  %291 = trunc i64 %290 to i32
  %292 = add nsw i32 %291, 1000000007
  %293 = urem i32 %292, 1000000007
  %294 = zext i32 %293 to i64
  %295 = trunc i64 %233 to i32
  %296 = xor i32 %295, -1
  %297 = add i32 %132, %296
  %298 = sext i32 %297 to i64
  %299 = getelementptr inbounds [310000 x i64], [310000 x i64]* @f, i64 0, i64 %298
  %300 = load i64, i64* %299, align 8, !tbaa !12
  %301 = mul nsw i64 %300, %294
  %302 = add nsw i64 %234, %137
  %303 = sub i64 %302, %275
  %304 = srem i64 %303, 1000000007
  %305 = icmp slt i32 %237, 310000
  br i1 %305, label %306, label %344

306:                                              ; preds = %288, %306
  %307 = phi i32 [ %313, %306 ], [ %237, %288 ]
  %308 = sext i32 %307 to i64
  %309 = getelementptr inbounds [310000 x i32], [310000 x i32]* @t, i64 0, i64 %308
  %310 = load i32, i32* %309, align 4, !tbaa !3
  %311 = add nsw i32 %310, 1
  store i32 %311, i32* %309, align 4, !tbaa !3
  %312 = add nsw i32 %307, 1
  %313 = or i32 %312, %307
  %314 = icmp slt i32 %313, 310000
  br i1 %314, label %306, label %344, !llvm.loop !7

315:                                              ; preds = %232
  %316 = load i64, i64* %146, align 8, !tbaa !12
  %317 = sub nsw i64 %133, %234
  %318 = mul nsw i64 %316, %317
  %319 = srem i64 %318, 1000000007
  br i1 %147, label %320, label %330

320:                                              ; preds = %315
  %321 = load i64, i64* %149, align 8, !tbaa !12
  %322 = mul nsw i64 %321, %141
  %323 = srem i64 %322, 1000000007
  %324 = getelementptr inbounds [310000 x i32], [310000 x i32]* @s, i64 0, i64 %233
  %325 = load i32, i32* %324, align 4, !tbaa !3
  %326 = add nsw i32 %325, -1
  %327 = sext i32 %326 to i64
  %328 = mul nsw i64 %323, %327
  %329 = sub nsw i64 %319, %328
  br label %330

330:                                              ; preds = %320, %315
  %331 = phi i64 [ %329, %320 ], [ %319, %315 ]
  %332 = srem i64 %331, 1000000007
  %333 = trunc i64 %332 to i32
  %334 = add nsw i32 %333, 1000000007
  %335 = urem i32 %334, 1000000007
  %336 = zext i32 %335 to i64
  %337 = trunc i64 %233 to i32
  %338 = xor i32 %337, -1
  %339 = add i32 %132, %338
  %340 = sext i32 %339 to i64
  %341 = getelementptr inbounds [310000 x i64], [310000 x i64]* @f, i64 0, i64 %340
  %342 = load i64, i64* %341, align 8, !tbaa !12
  %343 = mul nsw i64 %342, %336
  br label %344

344:                                              ; preds = %306, %288, %330
  %345 = phi i64 [ %343, %330 ], [ %301, %288 ], [ %301, %306 ]
  %346 = phi i64 [ %234, %330 ], [ %304, %288 ], [ %304, %306 ]
  %347 = srem i64 %345, 1000000007
  %348 = add nsw i64 %347, %235
  %349 = srem i64 %348, 1000000007
  %350 = add nuw nsw i64 %233, 1
  %351 = icmp eq i64 %350, %152
  br i1 %351, label %224, label %232, !llvm.loop !26

352:                                              ; preds = %224
  %353 = bitcast %"class.std::basic_ostream"* %231 to i8**
  %354 = load i8*, i8** %353, align 8, !tbaa !27
  %355 = getelementptr i8, i8* %354, i64 -24
  %356 = bitcast i8* %355 to i64*
  %357 = load i64, i64* %356, align 8
  %358 = bitcast %"class.std::basic_ostream"* %231 to i8*
  %359 = add nsw i64 %357, 240
  %360 = getelementptr inbounds i8, i8* %358, i64 %359
  %361 = bitcast i8* %360 to %"class.std::ctype"**
  %362 = load %"class.std::ctype"*, %"class.std::ctype"** %361, align 8, !tbaa !29
  %363 = icmp eq %"class.std::ctype"* %362, null
  br i1 %363, label %364, label %366

364:                                              ; preds = %352
  invoke void @_ZSt16__throw_bad_castv() #13
          to label %365 unwind label %394

365:                                              ; preds = %364
  unreachable

366:                                              ; preds = %352
  %367 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %362, i64 0, i32 8
  %368 = load i8, i8* %367, align 8, !tbaa !31
  %369 = icmp eq i8 %368, 0
  br i1 %369, label %373, label %370

370:                                              ; preds = %366
  %371 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %362, i64 0, i32 9, i64 10
  %372 = load i8, i8* %371, align 1, !tbaa !33
  br label %380

373:                                              ; preds = %366
  invoke void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull align 8 dereferenceable(570) %362)
          to label %374 unwind label %394

374:                                              ; preds = %373
  %375 = bitcast %"class.std::ctype"* %362 to i8 (%"class.std::ctype"*, i8)***
  %376 = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %375, align 8, !tbaa !27
  %377 = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %376, i64 6
  %378 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %377, align 8
  %379 = invoke signext i8 %378(%"class.std::ctype"* nonnull align 8 dereferenceable(570) %362, i8 signext 10)
          to label %380 unwind label %394

380:                                              ; preds = %374, %370
  %381 = phi i8 [ %372, %370 ], [ %379, %374 ]
  %382 = invoke nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %231, i8 signext %381)
          to label %383 unwind label %394

383:                                              ; preds = %380
  %384 = invoke nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %382)
          to label %385 unwind label %394

385:                                              ; preds = %383
  %386 = icmp eq i32* %129, null
  br i1 %386, label %389, label %387

387:                                              ; preds = %385
  %388 = bitcast i32* %129 to i8*
  tail call void @_ZdlPv(i8* nonnull %388) #15
  br label %389

389:                                              ; preds = %385, %387
  %390 = icmp eq i32* %128, null
  br i1 %390, label %393, label %391

391:                                              ; preds = %389
  %392 = bitcast i32* %128 to i8*
  tail call void @_ZdlPv(i8* nonnull %392) #15
  br label %393

393:                                              ; preds = %389, %391
  ret i32 0

394:                                              ; preds = %383, %380, %374, %373, %364, %224
  %395 = landingpad { i8*, i32 }
          cleanup
  br label %396

396:                                              ; preds = %211, %213, %394
  %397 = phi i32* [ %128, %394 ], [ %61, %211 ], [ %61, %213 ]
  %398 = phi i32* [ %129, %394 ], [ %159, %211 ], [ %159, %213 ]
  %399 = phi { i8*, i32 } [ %395, %394 ], [ %212, %211 ], [ %214, %213 ]
  %400 = icmp eq i32* %398, null
  br i1 %400, label %403, label %401

401:                                              ; preds = %396
  %402 = bitcast i32* %398 to i8*
  tail call void @_ZdlPv(i8* nonnull %402) #15
  br label %403

403:                                              ; preds = %396, %401
  %404 = icmp eq i32* %397, null
  br i1 %404, label %407, label %405

405:                                              ; preds = %403
  %406 = bitcast i32* %397 to i8*
  tail call void @_ZdlPv(i8* nonnull %406) #15
  br label %407

407:                                              ; preds = %405, %403
  resume { i8*, i32 } %399
}

declare dso_local %struct._IO_FILE* @freopen(i8*, i8*, %struct._IO_FILE*) local_unnamed_addr #0

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @__isoc99_scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #6

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #7

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #9

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #10

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo9_M_insertIxEERSoT_(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #0

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8), i8 signext) local_unnamed_addr #0

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8)) local_unnamed_addr #0

; Function Attrs: noreturn
declare dso_local void @_ZSt16__throw_bad_castv() local_unnamed_addr #7

declare dso_local void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull align 8 dereferenceable(570)) local_unnamed_addr #0

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_CardsPermutation.cpp() #11 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #15
  ret void
}

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #12

attributes #0 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nofree nounwind }
attributes #3 = { mustprogress nofree norecurse nosync nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { norecurse uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #10 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #11 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #12 = { argmemonly nofree nounwind willreturn writeonly }
attributes #13 = { noreturn }
attributes #14 = { allocsize(0) }
attributes #15 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"int", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.mustprogress"}
!9 = distinct !{!9, !8}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !5, i64 0}
!12 = !{!13, !13, i64 0}
!13 = !{!"long long", !5, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"bool", !5, i64 0}
!16 = distinct !{!16, !8}
!17 = distinct !{!17, !8, !18}
!18 = !{!"llvm.loop.peeled.count", i32 1}
!19 = distinct !{!19, !8, !20}
!20 = !{!"llvm.loop.isvectorized", i32 1}
!21 = distinct !{!21, !8, !22, !20}
!22 = !{!"llvm.loop.unroll.runtime.disable"}
!23 = !{i8 0, i8 2}
!24 = distinct !{!24, !8}
!25 = distinct !{!25, !8}
!26 = distinct !{!26, !8}
!27 = !{!28, !28, i64 0}
!28 = !{!"vtable pointer", !6, i64 0}
!29 = !{!30, !11, i64 240}
!30 = !{!"_ZTSSt9basic_iosIcSt11char_traitsIcEE", !11, i64 216, !5, i64 224, !15, i64 225, !11, i64 232, !11, i64 240, !11, i64 248, !11, i64 256}
!31 = !{!32, !5, i64 56}
!32 = !{!"_ZTSSt5ctypeIcE", !11, i64 16, !15, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !5, i64 56, !5, i64 57, !5, i64 313, !5, i64 569}
!33 = !{!5, !5, i64 0}
