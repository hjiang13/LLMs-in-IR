; ModuleID = '../../Benchmarks/DivisorExploration3/DivisorExploration3.cpp'
source_filename = "../../Benchmarks/DivisorExploration3/DivisorExploration3.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque

$_ZNSt6vectorIiSaIiEED2Ev = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@p = dso_local global %"class.std::vector" zeroinitializer, align 8
@isp = dso_local local_unnamed_addr global [100005 x i8] zeroinitializer, align 16
@C = dso_local local_unnamed_addr global [3015 x [1005 x i32]] zeroinitializer, align 16
@.str = private unnamed_addr constant [35 x i8] c"../input_files/DivisorExploration3\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@stdin = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.3 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"%d%d%d\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.6 = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_DivisorExploration3.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0) unnamed_addr #3 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i32*, i32** %2, align 8, !tbaa !3
  %4 = icmp eq i32* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = bitcast i32* %3 to i8*
  tail call void @_ZdlPv(i8* nonnull %6) #14
  br label %7

7:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: norecurse uwtable
define dso_local i32 @main() local_unnamed_addr #4 personality i32 (...)* @__gxx_personality_v0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !8
  %6 = tail call %struct._IO_FILE* @freopen(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), %struct._IO_FILE* %5)
  br label %7

7:                                                ; preds = %0, %63
  %8 = phi i64 [ 2, %0 ], [ %64, %63 ]
  %9 = phi i64 [ 4, %0 ], [ %65, %63 ]
  %10 = getelementptr inbounds [100005 x i8], [100005 x i8]* @isp, i64 0, i64 %8
  %11 = load i8, i8* %10, align 1, !tbaa !9, !range !11
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %63

13:                                               ; preds = %7
  %14 = load i32*, i32** getelementptr inbounds (%"class.std::vector", %"class.std::vector"* @p, i64 0, i32 0, i32 0, i32 0, i32 1), align 8, !tbaa !12
  %15 = load i32*, i32** getelementptr inbounds (%"class.std::vector", %"class.std::vector"* @p, i64 0, i32 0, i32 0, i32 0, i32 2), align 8, !tbaa !13
  %16 = icmp eq i32* %14, %15
  br i1 %16, label %20, label %17

17:                                               ; preds = %13
  %18 = trunc i64 %8 to i32
  store i32 %18, i32* %14, align 4, !tbaa !14
  %19 = getelementptr inbounds i32, i32* %14, i64 1
  store i32* %19, i32** getelementptr inbounds (%"class.std::vector", %"class.std::vector"* @p, i64 0, i32 0, i32 0, i32 0, i32 1), align 8, !tbaa !12
  br label %56

20:                                               ; preds = %13
  %21 = load i32*, i32** getelementptr inbounds (%"class.std::vector", %"class.std::vector"* @p, i64 0, i32 0, i32 0, i32 0, i32 0), align 8, !tbaa !3
  %22 = ptrtoint i32* %14 to i64
  %23 = ptrtoint i32* %21 to i64
  %24 = sub i64 %22, %23
  %25 = ashr exact i64 %24, 2
  %26 = icmp eq i64 %24, 9223372036854775804
  br i1 %26, label %27, label %28

27:                                               ; preds = %20
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.6, i64 0, i64 0)) #15
  unreachable

28:                                               ; preds = %20
  %29 = icmp eq i64 %24, 0
  %30 = select i1 %29, i64 1, i64 %25
  %31 = add nsw i64 %30, %25
  %32 = icmp ult i64 %31, %25
  %33 = icmp ugt i64 %31, 2305843009213693951
  %34 = or i1 %32, %33
  %35 = select i1 %34, i64 2305843009213693951, i64 %31
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %41, label %37

37:                                               ; preds = %28
  %38 = shl nuw nsw i64 %35, 2
  %39 = tail call noalias nonnull i8* @_Znwm(i64 %38) #16
  %40 = bitcast i8* %39 to i32*
  br label %41

41:                                               ; preds = %37, %28
  %42 = phi i32* [ %40, %37 ], [ null, %28 ]
  %43 = getelementptr inbounds i32, i32* %42, i64 %25
  %44 = trunc i64 %8 to i32
  store i32 %44, i32* %43, align 4, !tbaa !14
  %45 = icmp sgt i64 %24, 0
  br i1 %45, label %46, label %49

46:                                               ; preds = %41
  %47 = bitcast i32* %42 to i8*
  %48 = bitcast i32* %21 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %47, i8* align 4 %48, i64 %24, i1 false) #14
  br label %49

49:                                               ; preds = %41, %46
  %50 = getelementptr inbounds i32, i32* %43, i64 1
  %51 = icmp eq i32* %21, null
  br i1 %51, label %54, label %52

52:                                               ; preds = %49
  %53 = bitcast i32* %21 to i8*
  tail call void @_ZdlPv(i8* nonnull %53) #14
  br label %54

54:                                               ; preds = %49, %52
  store i32* %42, i32** getelementptr inbounds (%"class.std::vector", %"class.std::vector"* @p, i64 0, i32 0, i32 0, i32 0, i32 0), align 8, !tbaa !3
  store i32* %50, i32** getelementptr inbounds (%"class.std::vector", %"class.std::vector"* @p, i64 0, i32 0, i32 0, i32 0, i32 1), align 8, !tbaa !12
  %55 = getelementptr inbounds i32, i32* %42, i64 %35
  store i32* %55, i32** getelementptr inbounds (%"class.std::vector", %"class.std::vector"* @p, i64 0, i32 0, i32 0, i32 0, i32 2), align 8, !tbaa !13
  br label %56

56:                                               ; preds = %17, %54
  %57 = icmp ult i64 %8, 50003
  br i1 %57, label %58, label %63

58:                                               ; preds = %56, %58
  %59 = phi i64 [ %61, %58 ], [ %9, %56 ]
  %60 = getelementptr inbounds [100005 x i8], [100005 x i8]* @isp, i64 0, i64 %59
  store i8 1, i8* %60, align 1, !tbaa !9
  %61 = add nuw nsw i64 %59, %8
  %62 = icmp ult i64 %61, 100005
  br i1 %62, label %58, label %63, !llvm.loop !16

63:                                               ; preds = %58, %56, %7
  %64 = add nuw nsw i64 %8, 1
  %65 = add nuw nsw i64 %9, 2
  %66 = icmp eq i64 %64, 100005
  br i1 %66, label %76, label %7, !llvm.loop !18

67:                                               ; preds = %157
  %68 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %68) #14
  %69 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i32* nonnull %1)
  %70 = bitcast i32* %2 to i8*
  %71 = bitcast i32* %3 to i8*
  %72 = bitcast i32* %4 to i8*
  %73 = load i32, i32* %1, align 4, !tbaa !14
  %74 = add nsw i32 %73, -1
  store i32 %74, i32* %1, align 4, !tbaa !14
  %75 = icmp eq i32 %73, 0
  br i1 %75, label %234, label %170

76:                                               ; preds = %63, %157
  %77 = phi i64 [ %158, %157 ], [ 0, %63 ]
  %78 = trunc i64 %77 to i32
  %79 = call i32 @llvm.umin.i32(i32 %78, i32 1004)
  %80 = and i32 %79, 1020
  %81 = zext i32 %80 to i64
  %82 = add nsw i64 %81, -4
  %83 = lshr exact i64 %82, 2
  %84 = add nuw nsw i64 %83, 1
  %85 = trunc i64 %77 to i32
  %86 = call i32 @llvm.umin.i32(i32 %85, i32 1004)
  %87 = zext i32 %86 to i64
  %88 = getelementptr inbounds [3015 x [1005 x i32]], [3015 x [1005 x i32]]* @C, i64 0, i64 %77, i64 0
  store i32 1, i32* %88, align 4, !tbaa !14
  %89 = icmp ult i64 %77, 1004
  %90 = select i1 %89, i64 %77, i64 1004
  %91 = trunc i64 %90 to i32
  %92 = add nsw i64 %77, -1
  %93 = icmp slt i32 %91, 1
  br i1 %93, label %157, label %94

94:                                               ; preds = %76
  %95 = trunc i64 %77 to i32
  %96 = call i32 @llvm.umin.i32(i32 %95, i32 1004)
  %97 = add nuw nsw i32 %96, 1
  %98 = zext i32 %97 to i64
  %99 = getelementptr inbounds [3015 x [1005 x i32]], [3015 x [1005 x i32]]* @C, i64 0, i64 %92, i64 0
  %100 = load i32, i32* %99, align 4, !tbaa !14
  %101 = icmp ult i32 %86, 4
  br i1 %101, label %154, label %102

102:                                              ; preds = %94
  %103 = and i64 %87, 1020
  %104 = or i64 %103, 1
  %105 = insertelement <4 x i32> poison, i32 %100, i32 3
  %106 = and i64 %84, 1
  %107 = icmp eq i64 %82, 0
  br i1 %107, label %135, label %108

108:                                              ; preds = %102
  %109 = and i64 %84, 9223372036854775806
  br label %110

110:                                              ; preds = %110, %108
  %111 = phi i64 [ 0, %108 ], [ %132, %110 ]
  %112 = phi <4 x i32> [ %105, %108 ], [ %126, %110 ]
  %113 = phi i64 [ %109, %108 ], [ %133, %110 ]
  %114 = or i64 %111, 1
  %115 = getelementptr inbounds [3015 x [1005 x i32]], [3015 x [1005 x i32]]* @C, i64 0, i64 %92, i64 %114
  %116 = bitcast i32* %115 to <4 x i32>*
  %117 = load <4 x i32>, <4 x i32>* %116, align 4, !tbaa !14
  %118 = shufflevector <4 x i32> %112, <4 x i32> %117, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %119 = add nsw <4 x i32> %117, %118
  %120 = srem <4 x i32> %119, <i32 1000000007, i32 1000000007, i32 1000000007, i32 1000000007>
  %121 = getelementptr inbounds [3015 x [1005 x i32]], [3015 x [1005 x i32]]* @C, i64 0, i64 %77, i64 %114
  %122 = bitcast i32* %121 to <4 x i32>*
  store <4 x i32> %120, <4 x i32>* %122, align 4, !tbaa !14
  %123 = or i64 %111, 5
  %124 = getelementptr inbounds [3015 x [1005 x i32]], [3015 x [1005 x i32]]* @C, i64 0, i64 %92, i64 %123
  %125 = bitcast i32* %124 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 4, !tbaa !14
  %127 = shufflevector <4 x i32> %117, <4 x i32> %126, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %128 = add nsw <4 x i32> %126, %127
  %129 = srem <4 x i32> %128, <i32 1000000007, i32 1000000007, i32 1000000007, i32 1000000007>
  %130 = getelementptr inbounds [3015 x [1005 x i32]], [3015 x [1005 x i32]]* @C, i64 0, i64 %77, i64 %123
  %131 = bitcast i32* %130 to <4 x i32>*
  store <4 x i32> %129, <4 x i32>* %131, align 4, !tbaa !14
  %132 = add nuw i64 %111, 8
  %133 = add i64 %113, -2
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %135, label %110, !llvm.loop !19

135:                                              ; preds = %110, %102
  %136 = phi <4 x i32> [ undef, %102 ], [ %126, %110 ]
  %137 = phi i64 [ 0, %102 ], [ %132, %110 ]
  %138 = phi <4 x i32> [ %105, %102 ], [ %126, %110 ]
  %139 = icmp eq i64 %106, 0
  br i1 %139, label %150, label %140

140:                                              ; preds = %135
  %141 = or i64 %137, 1
  %142 = getelementptr inbounds [3015 x [1005 x i32]], [3015 x [1005 x i32]]* @C, i64 0, i64 %92, i64 %141
  %143 = bitcast i32* %142 to <4 x i32>*
  %144 = load <4 x i32>, <4 x i32>* %143, align 4, !tbaa !14
  %145 = shufflevector <4 x i32> %138, <4 x i32> %144, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %146 = add nsw <4 x i32> %144, %145
  %147 = srem <4 x i32> %146, <i32 1000000007, i32 1000000007, i32 1000000007, i32 1000000007>
  %148 = getelementptr inbounds [3015 x [1005 x i32]], [3015 x [1005 x i32]]* @C, i64 0, i64 %77, i64 %141
  %149 = bitcast i32* %148 to <4 x i32>*
  store <4 x i32> %147, <4 x i32>* %149, align 4, !tbaa !14
  br label %150

150:                                              ; preds = %135, %140
  %151 = phi <4 x i32> [ %136, %135 ], [ %144, %140 ]
  %152 = icmp eq i64 %103, %87
  %153 = extractelement <4 x i32> %151, i32 3
  br i1 %152, label %157, label %154

154:                                              ; preds = %94, %150
  %155 = phi i32 [ %153, %150 ], [ %100, %94 ]
  %156 = phi i64 [ %104, %150 ], [ 1, %94 ]
  br label %160

157:                                              ; preds = %160, %150, %76
  %158 = add nuw nsw i64 %77, 1
  %159 = icmp eq i64 %158, 3015
  br i1 %159, label %67, label %76, !llvm.loop !21

160:                                              ; preds = %154, %160
  %161 = phi i32 [ %164, %160 ], [ %155, %154 ]
  %162 = phi i64 [ %168, %160 ], [ %156, %154 ]
  %163 = getelementptr inbounds [3015 x [1005 x i32]], [3015 x [1005 x i32]]* @C, i64 0, i64 %92, i64 %162
  %164 = load i32, i32* %163, align 4, !tbaa !14
  %165 = add nsw i32 %164, %161
  %166 = srem i32 %165, 1000000007
  %167 = getelementptr inbounds [3015 x [1005 x i32]], [3015 x [1005 x i32]]* @C, i64 0, i64 %77, i64 %162
  store i32 %166, i32* %167, align 4, !tbaa !14
  %168 = add nuw nsw i64 %162, 1
  %169 = icmp eq i64 %168, %98
  br i1 %169, label %157, label %160, !llvm.loop !22

170:                                              ; preds = %67, %184
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %70) #14
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %71) #14
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %72) #14
  %171 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i32* nonnull %2, i32* nonnull %3, i32* nonnull %4)
  %172 = load i32, i32* %2, align 4, !tbaa !14
  %173 = load i32*, i32** getelementptr inbounds (%"class.std::vector", %"class.std::vector"* @p, i64 0, i32 0, i32 0, i32 0, i32 0), align 8
  %174 = load i32, i32* %3, align 4
  %175 = load i32, i32* %4, align 4
  %176 = add nsw i32 %175, -1
  %177 = sext i32 %176 to i64
  %178 = icmp sgt i32 %172, 0
  br i1 %178, label %179, label %184

179:                                              ; preds = %170
  %180 = add i32 %174, 2
  %181 = zext i32 %172 to i64
  br label %190

182:                                              ; preds = %202
  %183 = trunc i64 %206 to i32
  br label %184

184:                                              ; preds = %182, %170
  %185 = phi i32 [ %183, %182 ], [ 1, %170 ]
  %186 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), i32 %185)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %72) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %71) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %70) #14
  %187 = load i32, i32* %1, align 4, !tbaa !14
  %188 = add nsw i32 %187, -1
  store i32 %188, i32* %1, align 4, !tbaa !14
  %189 = icmp eq i32 %187, 0
  br i1 %189, label %234, label %170, !llvm.loop !24

190:                                              ; preds = %179, %202
  %191 = phi i64 [ 0, %179 ], [ %196, %202 ]
  %192 = phi i32 [ %180, %179 ], [ %207, %202 ]
  %193 = phi i64 [ 1, %179 ], [ %206, %202 ]
  %194 = getelementptr inbounds i32, i32* %173, i64 %191
  %195 = load i32, i32* %194, align 4, !tbaa !14
  %196 = add nuw nsw i64 %191, 1
  %197 = trunc i64 %196 to i32
  %198 = add i32 %174, %197
  %199 = icmp slt i32 %198, 0
  br i1 %199, label %202, label %200

200:                                              ; preds = %190
  %201 = zext i32 %192 to i64
  br label %209

202:                                              ; preds = %209, %190
  %203 = phi i32 [ 0, %190 ], [ %225, %209 ]
  %204 = sext i32 %203 to i64
  %205 = mul nsw i64 %193, %204
  %206 = srem i64 %205, 1000000007
  %207 = add i32 %192, 1
  %208 = icmp eq i64 %196, %181
  br i1 %208, label %182, label %190, !llvm.loop !25

209:                                              ; preds = %200, %209
  %210 = phi i64 [ 0, %200 ], [ %232, %209 ]
  %211 = phi i32 [ 0, %200 ], [ %225, %209 ]
  %212 = phi i64 [ 1, %200 ], [ %231, %209 ]
  %213 = trunc i64 %210 to i32
  %214 = xor i32 %213, -1
  %215 = add i32 %175, %214
  %216 = add i32 %215, %198
  %217 = sext i32 %216 to i64
  %218 = getelementptr inbounds [3015 x [1005 x i32]], [3015 x [1005 x i32]]* @C, i64 0, i64 %217, i64 %177
  %219 = load i32, i32* %218, align 4, !tbaa !14
  %220 = sext i32 %219 to i64
  %221 = mul nsw i64 %212, %220
  %222 = srem i64 %221, 1000000007
  %223 = trunc i64 %222 to i32
  %224 = add i32 %211, %223
  %225 = srem i32 %224, 1000000007
  %226 = icmp eq i64 %210, 0
  %227 = sext i1 %226 to i32
  %228 = add nsw i32 %195, %227
  %229 = sext i32 %228 to i64
  %230 = mul nsw i64 %212, %229
  %231 = srem i64 %230, 1000000007
  %232 = add nuw nsw i64 %210, 1
  %233 = icmp eq i64 %232, %201
  br i1 %233, label %202, label %209, !llvm.loop !26

234:                                              ; preds = %184, %67
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %68) #14
  ret i32 0
}

declare dso_local %struct._IO_FILE* @freopen(i8*, i8*, %struct._IO_FILE*) local_unnamed_addr #0

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @__isoc99_scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #6

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #8

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #9

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #10

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_DivisorExploration3.cpp() #11 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #14
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) bitcast (%"class.std::vector"* @p to i8*), i8 0, i64 24, i1 false) #14
  %2 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::vector"*)* @_ZNSt6vectorIiSaIiEED2Ev to void (i8*)*), i8* bitcast (%"class.std::vector"* @p to i8*), i8* nonnull @__dso_handle) #14
  ret void
}

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #12

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.umin.i32(i32, i32) #13

attributes #0 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nofree nounwind }
attributes #3 = { nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { norecurse uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #6 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #10 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #11 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #12 = { argmemonly nofree nounwind willreturn writeonly }
attributes #13 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #14 = { nounwind }
attributes #15 = { noreturn }
attributes #16 = { allocsize(0) }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 0}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!5, !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"bool", !6, i64 0}
!11 = !{i8 0, i8 2}
!12 = !{!4, !5, i64 8}
!13 = !{!4, !5, i64 16}
!14 = !{!15, !15, i64 0}
!15 = !{!"int", !6, i64 0}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.mustprogress"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !17, !20}
!20 = !{!"llvm.loop.isvectorized", i32 1}
!21 = distinct !{!21, !17}
!22 = distinct !{!22, !17, !23, !20}
!23 = !{!"llvm.loop.unroll.runtime.disable"}
!24 = distinct !{!24, !17}
!25 = distinct !{!25, !17}
!26 = distinct !{!26, !17}
