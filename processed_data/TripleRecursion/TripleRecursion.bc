; ModuleID = '../../Benchmarks/TripleRecursion/TripleRecursion.cpp'
source_filename = "../../Benchmarks/TripleRecursion/TripleRecursion.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl" }
%"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl" = type { %"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data" }
%"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data" = type { %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"* }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char>::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char>::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@m = dso_local local_unnamed_addr global i32 0, align 4
@.str.1 = private unnamed_addr constant [31 x i8] c"../input_files/TripleRecursion\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@stdin = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@_ZSt3cin = external dso_local global %"class.std::basic_istream", align 8
@_ZSt4cout = external dso_local global %"class.std::basic_ostream", align 8
@.str.3 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_TripleRecursion.cpp, i8* null }]

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1)) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: mustprogress nofree nounwind readonly uwtable willreturn
define dso_local zeroext i1 @_Z4cmp2St6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EES7_(%"class.std::vector"* nocapture readonly %0, %"class.std::vector"* nocapture readonly %1) local_unnamed_addr #3 personality i32 (...)* @__gxx_personality_v0 {
  %3 = load i32, i32* @m, align 4, !tbaa !3
  %4 = add nsw i32 %3, -1
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %6, align 8, !tbaa !7
  %8 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %9 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %8, align 8, !tbaa !7
  %10 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %7, i64 %5, i32 1
  %11 = load i64, i64* %10, align 8, !tbaa !10
  %12 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %9, i64 %5, i32 1
  %13 = load i64, i64* %12, align 8, !tbaa !10
  %14 = icmp ugt i64 %11, %13
  %15 = select i1 %14, i64 %13, i64 %11
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %24, label %17

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %9, i64 %5, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8, !tbaa !14
  %20 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %7, i64 %5, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8, !tbaa !14
  %22 = tail call i32 @memcmp(i8* %21, i8* %19, i64 %15) #12
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %31

24:                                               ; preds = %17, %2
  %25 = sub i64 %11, %13
  %26 = icmp sgt i64 %25, -2147483648
  %27 = select i1 %26, i64 %25, i64 -2147483648
  %28 = icmp slt i64 %27, 2147483647
  %29 = select i1 %28, i64 %27, i64 2147483647
  %30 = trunc i64 %29 to i32
  br label %31

31:                                               ; preds = %17, %24
  %32 = phi i32 [ %22, %17 ], [ %30, %24 ]
  %33 = icmp slt i32 %32, 0
  ret i1 %33
}

; Function Attrs: uwtable
define dso_local void @_Z7remove0NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%"class.std::__cxx11::basic_string"* noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, %"class.std::__cxx11::basic_string"* nocapture readonly %1) local_unnamed_addr #4 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 1
  %4 = load i64, i64* %3, align 8, !tbaa !10
  %5 = trunc i64 %4 to i32
  %6 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %7 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %6, %union.anon** %7, align 8, !tbaa !15
  %8 = bitcast %union.anon* %6 to i8*
  %9 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 0, i64* %10, align 8, !tbaa !10
  store i8 0, i8* %8, align 8, !tbaa !16
  %11 = icmp sgt i32 %5, 0
  br i1 %11, label %12, label %26

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8, !tbaa !14
  %15 = and i64 %4, 4294967295
  br label %16

16:                                               ; preds = %12, %21
  %17 = phi i64 [ 0, %12 ], [ %22, %21 ]
  %18 = getelementptr inbounds i8, i8* %14, i64 %17
  %19 = load i8, i8* %18, align 1, !tbaa !16
  %20 = icmp eq i8 %19, 48
  br i1 %20, label %21, label %24

21:                                               ; preds = %16
  %22 = add nuw nsw i64 %17, 1
  %23 = icmp eq i64 %22, %15
  br i1 %23, label %26, label %16, !llvm.loop !17

24:                                               ; preds = %16
  %25 = trunc i64 %17 to i32
  br label %26

26:                                               ; preds = %21, %24, %2
  %27 = phi i32 [ 0, %2 ], [ %25, %24 ], [ 0, %21 ]
  %28 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %29 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2, i32 0
  %30 = icmp slt i32 %27, %5
  br i1 %30, label %31, label %64

31:                                               ; preds = %26
  %32 = zext i32 %27 to i64
  %33 = and i64 %4, 4294967295
  br label %34

34:                                               ; preds = %56, %31
  %35 = phi i8* [ %8, %31 ], [ %58, %56 ]
  %36 = phi i64 [ 0, %31 ], [ %57, %56 ]
  %37 = phi i64 [ %32, %31 ], [ %54, %56 ]
  %38 = load i8*, i8** %28, align 8, !tbaa !14
  %39 = getelementptr inbounds i8, i8* %38, i64 %37
  %40 = load i8, i8* %39, align 1, !tbaa !16
  %41 = add i64 %36, 1
  %42 = icmp eq i8* %35, %8
  %43 = load i64, i64* %29, align 8
  %44 = select i1 %42, i64 15, i64 %43
  %45 = icmp ugt i64 %41, %44
  br i1 %45, label %46, label %49

46:                                               ; preds = %34
  invoke void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %0, i64 %36, i64 0, i8* null, i64 1)
          to label %47 unwind label %59

47:                                               ; preds = %46
  %48 = load i8*, i8** %9, align 8, !tbaa !14
  br label %49

49:                                               ; preds = %47, %34
  %50 = phi i8* [ %48, %47 ], [ %35, %34 ]
  %51 = getelementptr inbounds i8, i8* %50, i64 %36
  store i8 %40, i8* %51, align 1, !tbaa !16
  store i64 %41, i64* %10, align 8, !tbaa !10
  %52 = load i8*, i8** %9, align 8, !tbaa !14
  %53 = getelementptr inbounds i8, i8* %52, i64 %41
  store i8 0, i8* %53, align 1, !tbaa !16
  %54 = add nuw nsw i64 %37, 1
  %55 = icmp eq i64 %54, %33
  br i1 %55, label %64, label %56, !llvm.loop !19

56:                                               ; preds = %49
  %57 = load i64, i64* %10, align 8, !tbaa !10
  %58 = load i8*, i8** %9, align 8, !tbaa !14
  br label %34

59:                                               ; preds = %46
  %60 = landingpad { i8*, i32 }
          cleanup
  %61 = load i8*, i8** %9, align 8, !tbaa !14
  %62 = icmp eq i8* %61, %8
  br i1 %62, label %65, label %63

63:                                               ; preds = %59
  tail call void @_ZdlPv(i8* %61) #12
  br label %65

64:                                               ; preds = %49, %26
  ret void

65:                                               ; preds = %63, %59
  resume { i8*, i32 } %60
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: uwtable
define dso_local zeroext i1 @_Z4cmp1St6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EES7_(%"class.std::vector"* nocapture readonly %0, %"class.std::vector"* nocapture readonly %1) local_unnamed_addr #4 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %"class.std::__cxx11::basic_string", align 8
  %6 = alloca %"class.std::__cxx11::basic_string", align 8
  %7 = alloca %"class.std::__cxx11::basic_string", align 8
  %8 = alloca %"class.std::__cxx11::basic_string", align 8
  %9 = bitcast %"class.std::__cxx11::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #12
  %10 = load i32, i32* @m, align 4, !tbaa !3
  %11 = add nsw i32 %10, -1
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %14 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %13, align 8, !tbaa !7
  %15 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %6, i64 0, i32 2
  %16 = bitcast %"class.std::__cxx11::basic_string"* %6 to %union.anon**
  store %union.anon* %15, %union.anon** %16, align 8, !tbaa !15
  %17 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %14, i64 %12, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8, !tbaa !14
  %19 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %14, i64 %12, i32 1
  %20 = load i64, i64* %19, align 8, !tbaa !10
  %21 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #12
  store i64 %20, i64* %4, align 8, !tbaa !20
  %22 = icmp ugt i64 %20, 15
  br i1 %22, label %25, label %23

23:                                               ; preds = %2
  %24 = bitcast %union.anon* %15 to i8*
  br label %30

25:                                               ; preds = %2
  %26 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %6, i64* nonnull align 8 dereferenceable(8) %4, i64 0)
  %27 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %6, i64 0, i32 0, i32 0
  store i8* %26, i8** %27, align 8, !tbaa !14
  %28 = load i64, i64* %4, align 8, !tbaa !20
  %29 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %6, i64 0, i32 2, i32 0
  store i64 %28, i64* %29, align 8, !tbaa !16
  br label %30

30:                                               ; preds = %25, %23
  %31 = phi i8* [ %24, %23 ], [ %26, %25 ]
  switch i64 %20, label %34 [
    i64 1, label %32
    i64 0, label %35
  ]

32:                                               ; preds = %30
  %33 = load i8, i8* %18, align 1, !tbaa !16
  store i8 %33, i8* %31, align 1, !tbaa !16
  br label %35

34:                                               ; preds = %30
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %31, i8* align 1 %18, i64 %20, i1 false) #12
  br label %35

35:                                               ; preds = %30, %32, %34
  %36 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %6, i64 0, i32 0, i32 0
  %37 = load i64, i64* %4, align 8, !tbaa !20
  %38 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %6, i64 0, i32 1
  store i64 %37, i64* %38, align 8, !tbaa !10
  %39 = load i8*, i8** %36, align 8, !tbaa !14
  %40 = getelementptr inbounds i8, i8* %39, i64 %37
  store i8 0, i8* %40, align 1, !tbaa !16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #12
  call void @llvm.experimental.noalias.scope.decl(metadata !21)
  %41 = load i64, i64* %38, align 8, !tbaa !10, !noalias !21
  %42 = trunc i64 %41 to i32
  %43 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %5, i64 0, i32 2
  %44 = bitcast %"class.std::__cxx11::basic_string"* %5 to %union.anon**
  store %union.anon* %43, %union.anon** %44, align 8, !tbaa !15, !alias.scope !21
  %45 = bitcast %union.anon* %43 to i8*
  %46 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %5, i64 0, i32 0, i32 0
  %47 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %5, i64 0, i32 1
  store i64 0, i64* %47, align 8, !tbaa !10, !alias.scope !21
  store i8 0, i8* %45, align 8, !tbaa !16, !alias.scope !21
  %48 = icmp sgt i32 %42, 0
  br i1 %48, label %49, label %62

49:                                               ; preds = %35
  %50 = load i8*, i8** %36, align 8, !tbaa !14, !noalias !21
  %51 = and i64 %41, 4294967295
  br label %52

52:                                               ; preds = %57, %49
  %53 = phi i64 [ 0, %49 ], [ %58, %57 ]
  %54 = getelementptr inbounds i8, i8* %50, i64 %53
  %55 = load i8, i8* %54, align 1, !tbaa !16
  %56 = icmp eq i8 %55, 48
  br i1 %56, label %57, label %60

57:                                               ; preds = %52
  %58 = add nuw nsw i64 %53, 1
  %59 = icmp eq i64 %58, %51
  br i1 %59, label %62, label %52, !llvm.loop !17

60:                                               ; preds = %52
  %61 = trunc i64 %53 to i32
  br label %62

62:                                               ; preds = %57, %60, %35
  %63 = phi i32 [ 0, %35 ], [ %61, %60 ], [ 0, %57 ]
  %64 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %5, i64 0, i32 2, i32 0
  %65 = icmp slt i32 %63, %42
  br i1 %65, label %66, label %99

66:                                               ; preds = %62
  %67 = zext i32 %63 to i64
  %68 = and i64 %41, 4294967295
  br label %69

69:                                               ; preds = %91, %66
  %70 = phi i8* [ %45, %66 ], [ %93, %91 ]
  %71 = phi i64 [ 0, %66 ], [ %92, %91 ]
  %72 = phi i64 [ %67, %66 ], [ %89, %91 ]
  %73 = load i8*, i8** %36, align 8, !tbaa !14, !noalias !21
  %74 = getelementptr inbounds i8, i8* %73, i64 %72
  %75 = load i8, i8* %74, align 1, !tbaa !16
  %76 = add i64 %71, 1
  %77 = icmp eq i8* %70, %45
  %78 = load i64, i64* %64, align 8, !alias.scope !21
  %79 = select i1 %77, i64 15, i64 %78
  %80 = icmp ugt i64 %76, %79
  br i1 %80, label %81, label %84

81:                                               ; preds = %69
  invoke void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %5, i64 %71, i64 0, i8* null, i64 1)
          to label %82 unwind label %94

82:                                               ; preds = %81
  %83 = load i8*, i8** %46, align 8, !tbaa !14, !alias.scope !21
  br label %84

84:                                               ; preds = %82, %69
  %85 = phi i8* [ %83, %82 ], [ %70, %69 ]
  %86 = getelementptr inbounds i8, i8* %85, i64 %71
  store i8 %75, i8* %86, align 1, !tbaa !16
  store i64 %76, i64* %47, align 8, !tbaa !10, !alias.scope !21
  %87 = load i8*, i8** %46, align 8, !tbaa !14, !alias.scope !21
  %88 = getelementptr inbounds i8, i8* %87, i64 %76
  store i8 0, i8* %88, align 1, !tbaa !16
  %89 = add nuw nsw i64 %72, 1
  %90 = icmp eq i64 %89, %68
  br i1 %90, label %99, label %91, !llvm.loop !19

91:                                               ; preds = %84
  %92 = load i64, i64* %47, align 8, !tbaa !10, !alias.scope !21
  %93 = load i8*, i8** %46, align 8, !tbaa !14, !alias.scope !21
  br label %69

94:                                               ; preds = %81
  %95 = landingpad { i8*, i32 }
          cleanup
  %96 = load i8*, i8** %46, align 8, !tbaa !14, !alias.scope !21
  %97 = icmp eq i8* %96, %45
  br i1 %97, label %217, label %98

98:                                               ; preds = %94
  call void @_ZdlPv(i8* %96) #12
  br label %217

99:                                               ; preds = %84, %62
  %100 = load i8*, i8** %36, align 8, !tbaa !14
  %101 = bitcast %union.anon* %15 to i8*
  %102 = icmp eq i8* %100, %101
  br i1 %102, label %104, label %103

103:                                              ; preds = %99
  call void @_ZdlPv(i8* %100) #12
  br label %104

104:                                              ; preds = %99, %103
  %105 = bitcast %"class.std::__cxx11::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %105) #12
  %106 = load i32, i32* @m, align 4, !tbaa !3
  %107 = add nsw i32 %106, -1
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %110 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %109, align 8, !tbaa !7
  %111 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %8, i64 0, i32 2
  %112 = bitcast %"class.std::__cxx11::basic_string"* %8 to %union.anon**
  store %union.anon* %111, %union.anon** %112, align 8, !tbaa !15
  %113 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %110, i64 %108, i32 0, i32 0
  %114 = load i8*, i8** %113, align 8, !tbaa !14
  %115 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %110, i64 %108, i32 1
  %116 = load i64, i64* %115, align 8, !tbaa !10
  %117 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %117) #12
  store i64 %116, i64* %3, align 8, !tbaa !20
  %118 = icmp ugt i64 %116, 15
  br i1 %118, label %121, label %119

119:                                              ; preds = %104
  %120 = bitcast %union.anon* %111 to i8*
  br label %127

121:                                              ; preds = %104
  %122 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %8, i64* nonnull align 8 dereferenceable(8) %3, i64 0)
          to label %123 unwind label %221

123:                                              ; preds = %121
  %124 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %8, i64 0, i32 0, i32 0
  store i8* %122, i8** %124, align 8, !tbaa !14
  %125 = load i64, i64* %3, align 8, !tbaa !20
  %126 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %8, i64 0, i32 2, i32 0
  store i64 %125, i64* %126, align 8, !tbaa !16
  br label %127

127:                                              ; preds = %123, %119
  %128 = phi i8* [ %120, %119 ], [ %122, %123 ]
  switch i64 %116, label %131 [
    i64 1, label %129
    i64 0, label %132
  ]

129:                                              ; preds = %127
  %130 = load i8, i8* %114, align 1, !tbaa !16
  store i8 %130, i8* %128, align 1, !tbaa !16
  br label %132

131:                                              ; preds = %127
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %128, i8* align 1 %114, i64 %116, i1 false) #12
  br label %132

132:                                              ; preds = %131, %129, %127
  %133 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %8, i64 0, i32 0, i32 0
  %134 = load i64, i64* %3, align 8, !tbaa !20
  %135 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %8, i64 0, i32 1
  store i64 %134, i64* %135, align 8, !tbaa !10
  %136 = load i8*, i8** %133, align 8, !tbaa !14
  %137 = getelementptr inbounds i8, i8* %136, i64 %134
  store i8 0, i8* %137, align 1, !tbaa !16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %117) #12
  call void @llvm.experimental.noalias.scope.decl(metadata !24)
  %138 = load i64, i64* %135, align 8, !tbaa !10, !noalias !24
  %139 = trunc i64 %138 to i32
  %140 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %7, i64 0, i32 2
  %141 = bitcast %"class.std::__cxx11::basic_string"* %7 to %union.anon**
  store %union.anon* %140, %union.anon** %141, align 8, !tbaa !15, !alias.scope !24
  %142 = bitcast %union.anon* %140 to i8*
  %143 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %7, i64 0, i32 0, i32 0
  %144 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %7, i64 0, i32 1
  store i64 0, i64* %144, align 8, !tbaa !10, !alias.scope !24
  store i8 0, i8* %142, align 8, !tbaa !16, !alias.scope !24
  %145 = icmp sgt i32 %139, 0
  br i1 %145, label %146, label %159

146:                                              ; preds = %132
  %147 = load i8*, i8** %133, align 8, !tbaa !14, !noalias !24
  %148 = and i64 %138, 4294967295
  br label %149

149:                                              ; preds = %154, %146
  %150 = phi i64 [ 0, %146 ], [ %155, %154 ]
  %151 = getelementptr inbounds i8, i8* %147, i64 %150
  %152 = load i8, i8* %151, align 1, !tbaa !16
  %153 = icmp eq i8 %152, 48
  br i1 %153, label %154, label %157

154:                                              ; preds = %149
  %155 = add nuw nsw i64 %150, 1
  %156 = icmp eq i64 %155, %148
  br i1 %156, label %159, label %149, !llvm.loop !17

157:                                              ; preds = %149
  %158 = trunc i64 %150 to i32
  br label %159

159:                                              ; preds = %154, %157, %132
  %160 = phi i32 [ 0, %132 ], [ %158, %157 ], [ 0, %154 ]
  %161 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %7, i64 0, i32 2, i32 0
  %162 = icmp slt i32 %160, %139
  br i1 %162, label %163, label %196

163:                                              ; preds = %159
  %164 = zext i32 %160 to i64
  %165 = and i64 %138, 4294967295
  br label %166

166:                                              ; preds = %188, %163
  %167 = phi i8* [ %142, %163 ], [ %190, %188 ]
  %168 = phi i64 [ 0, %163 ], [ %189, %188 ]
  %169 = phi i64 [ %164, %163 ], [ %186, %188 ]
  %170 = load i8*, i8** %133, align 8, !tbaa !14, !noalias !24
  %171 = getelementptr inbounds i8, i8* %170, i64 %169
  %172 = load i8, i8* %171, align 1, !tbaa !16
  %173 = add i64 %168, 1
  %174 = icmp eq i8* %167, %142
  %175 = load i64, i64* %161, align 8, !alias.scope !24
  %176 = select i1 %174, i64 15, i64 %175
  %177 = icmp ugt i64 %173, %176
  br i1 %177, label %178, label %181

178:                                              ; preds = %166
  invoke void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %7, i64 %168, i64 0, i8* null, i64 1)
          to label %179 unwind label %191

179:                                              ; preds = %178
  %180 = load i8*, i8** %143, align 8, !tbaa !14, !alias.scope !24
  br label %181

181:                                              ; preds = %179, %166
  %182 = phi i8* [ %180, %179 ], [ %167, %166 ]
  %183 = getelementptr inbounds i8, i8* %182, i64 %168
  store i8 %172, i8* %183, align 1, !tbaa !16
  store i64 %173, i64* %144, align 8, !tbaa !10, !alias.scope !24
  %184 = load i8*, i8** %143, align 8, !tbaa !14, !alias.scope !24
  %185 = getelementptr inbounds i8, i8* %184, i64 %173
  store i8 0, i8* %185, align 1, !tbaa !16
  %186 = add nuw nsw i64 %169, 1
  %187 = icmp eq i64 %186, %165
  br i1 %187, label %196, label %188, !llvm.loop !19

188:                                              ; preds = %181
  %189 = load i64, i64* %144, align 8, !tbaa !10, !alias.scope !24
  %190 = load i8*, i8** %143, align 8, !tbaa !14, !alias.scope !24
  br label %166

191:                                              ; preds = %178
  %192 = landingpad { i8*, i32 }
          cleanup
  %193 = load i8*, i8** %143, align 8, !tbaa !14, !alias.scope !24
  %194 = icmp eq i8* %193, %142
  br i1 %194, label %223, label %195

195:                                              ; preds = %191
  call void @_ZdlPv(i8* %193) #12
  br label %223

196:                                              ; preds = %181, %159
  %197 = load i8*, i8** %133, align 8, !tbaa !14
  %198 = bitcast %union.anon* %111 to i8*
  %199 = icmp eq i8* %197, %198
  br i1 %199, label %201, label %200

200:                                              ; preds = %196
  call void @_ZdlPv(i8* %197) #12
  br label %201

201:                                              ; preds = %196, %200
  %202 = load i64, i64* %47, align 8, !tbaa !10
  %203 = trunc i64 %202 to i32
  %204 = load i64, i64* %144, align 8, !tbaa !10
  %205 = trunc i64 %204 to i32
  %206 = icmp eq i32 %203, %205
  br i1 %206, label %207, label %214

207:                                              ; preds = %201
  %208 = load i8*, i8** %46, align 8
  %209 = load i8*, i8** %143, align 8
  %210 = icmp sgt i32 %203, 0
  br i1 %210, label %211, label %242

211:                                              ; preds = %207
  %212 = shl i64 %202, 32
  %213 = ashr exact i64 %212, 32
  br label %228

214:                                              ; preds = %201
  %215 = icmp slt i32 %203, %205
  %216 = load i8*, i8** %143, align 8, !tbaa !14
  br label %242

217:                                              ; preds = %94, %98
  %218 = load i8*, i8** %36, align 8, !tbaa !14
  %219 = bitcast %union.anon* %15 to i8*
  %220 = icmp eq i8* %218, %219
  br i1 %220, label %259, label %256

221:                                              ; preds = %121
  %222 = landingpad { i8*, i32 }
          cleanup
  br label %252

223:                                              ; preds = %191, %195
  %224 = load i8*, i8** %133, align 8, !tbaa !14
  %225 = bitcast %union.anon* %111 to i8*
  %226 = icmp eq i8* %224, %225
  br i1 %226, label %252, label %227

227:                                              ; preds = %223
  call void @_ZdlPv(i8* %224) #12
  br label %252

228:                                              ; preds = %235, %211
  %229 = phi i64 [ %237, %235 ], [ 0, %211 ]
  %230 = getelementptr inbounds i8, i8* %208, i64 %229
  %231 = load i8, i8* %230, align 1, !tbaa !16
  %232 = getelementptr inbounds i8, i8* %209, i64 %229
  %233 = load i8, i8* %232, align 1, !tbaa !16
  %234 = icmp sgt i8 %231, %233
  br i1 %234, label %240, label %235

235:                                              ; preds = %228
  %236 = icmp sge i8 %231, %233
  %237 = add nuw nsw i64 %229, 1
  %238 = icmp slt i64 %237, %213
  %239 = select i1 %236, i1 %238, i1 false
  br i1 %239, label %228, label %240, !llvm.loop !27

240:                                              ; preds = %228, %235
  %241 = xor i1 %234, true
  br label %242

242:                                              ; preds = %240, %207, %214
  %243 = phi i8* [ %216, %214 ], [ %209, %207 ], [ %209, %240 ]
  %244 = phi i1 [ %215, %214 ], [ true, %207 ], [ %241, %240 ]
  %245 = icmp eq i8* %243, %142
  br i1 %245, label %247, label %246

246:                                              ; preds = %242
  call void @_ZdlPv(i8* %243) #12
  br label %247

247:                                              ; preds = %242, %246
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %105) #12
  %248 = load i8*, i8** %46, align 8, !tbaa !14
  %249 = icmp eq i8* %248, %45
  br i1 %249, label %251, label %250

250:                                              ; preds = %247
  call void @_ZdlPv(i8* %248) #12
  br label %251

251:                                              ; preds = %247, %250
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #12
  ret i1 %244

252:                                              ; preds = %227, %223, %221
  %253 = phi { i8*, i32 } [ %222, %221 ], [ %192, %223 ], [ %192, %227 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %105) #12
  %254 = load i8*, i8** %46, align 8, !tbaa !14
  %255 = icmp eq i8* %254, %45
  br i1 %255, label %259, label %256

256:                                              ; preds = %252, %217
  %257 = phi i8* [ %218, %217 ], [ %254, %252 ]
  %258 = phi { i8*, i32 } [ %95, %217 ], [ %253, %252 ]
  call void @_ZdlPv(i8* %257) #12
  br label %259

259:                                              ; preds = %256, %252, %217
  %260 = phi { i8*, i32 } [ %95, %217 ], [ %253, %252 ], [ %258, %256 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #12
  resume { i8*, i32 } %260
}

; Function Attrs: mustprogress norecurse uwtable
define dso_local i32 @main() local_unnamed_addr #6 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !28
  %5 = tail call %struct._IO_FILE* @freopen(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), %struct._IO_FILE* %4)
  %6 = bitcast i32* %1 to i8*
  %7 = bitcast i32* %2 to i8*
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #12
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #12
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #12
  %9 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) @_ZSt3cin, i32* nonnull align 4 dereferenceable(4) %1)
  %10 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %9, i32* nonnull align 4 dereferenceable(4) %2)
  %11 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %10, i32* nonnull align 4 dereferenceable(4) %3)
  %12 = load i32, i32* %1, align 4, !tbaa !3
  %13 = zext i32 %12 to i64
  %14 = call i8* @llvm.stacksave()
  %15 = mul nuw i64 %13, %13
  %16 = alloca i32, i64 %15, align 16
  %17 = load i32, i32* %2, align 4, !tbaa !3
  store i32 %17, i32* %16, align 16, !tbaa !3
  %18 = load i32, i32* %1, align 4, !tbaa !3
  %19 = load i32, i32* %3, align 4
  %20 = icmp sgt i32 %18, 1
  br i1 %20, label %21, label %41

21:                                               ; preds = %0
  %22 = zext i32 %18 to i64
  %23 = add nsw i64 %22, -1
  %24 = and i64 %23, 1
  %25 = icmp eq i32 %18, 2
  br i1 %25, label %28, label %26

26:                                               ; preds = %21
  %27 = and i64 %23, -2
  br label %47

28:                                               ; preds = %47, %21
  %29 = phi i64 [ 1, %21 ], [ %68, %47 ]
  %30 = icmp eq i64 %24, 0
  br i1 %30, label %41, label %31

31:                                               ; preds = %28
  %32 = add nsw i64 %29, -1
  %33 = mul nuw nsw i64 %32, %13
  %34 = add nuw nsw i64 %33, %32
  %35 = getelementptr inbounds i32, i32* %16, i64 %34
  %36 = load i32, i32* %35, align 4, !tbaa !3
  %37 = add nsw i32 %19, %36
  %38 = mul nuw nsw i64 %29, %13
  %39 = add nuw nsw i64 %38, %29
  %40 = getelementptr inbounds i32, i32* %16, i64 %39
  store i32 %37, i32* %40, align 4, !tbaa !3
  br label %41

41:                                               ; preds = %31, %28, %0
  %42 = icmp sgt i32 %18, 0
  br i1 %42, label %43, label %288

43:                                               ; preds = %41
  %44 = zext i32 %18 to i64
  %45 = zext i32 %18 to i64
  %46 = icmp eq i32 %12, 1
  br label %75

47:                                               ; preds = %47, %26
  %48 = phi i64 [ 1, %26 ], [ %68, %47 ]
  %49 = phi i64 [ %27, %26 ], [ %69, %47 ]
  %50 = add nsw i64 %48, -1
  %51 = mul nuw nsw i64 %50, %13
  %52 = add nuw nsw i64 %51, %50
  %53 = getelementptr inbounds i32, i32* %16, i64 %52
  %54 = load i32, i32* %53, align 4, !tbaa !3
  %55 = add nsw i32 %19, %54
  %56 = mul nuw nsw i64 %48, %13
  %57 = add nuw nsw i64 %56, %48
  %58 = getelementptr inbounds i32, i32* %16, i64 %57
  store i32 %55, i32* %58, align 4, !tbaa !3
  %59 = add nuw nsw i64 %48, 1
  %60 = mul nuw nsw i64 %48, %13
  %61 = add nuw nsw i64 %60, %48
  %62 = getelementptr inbounds i32, i32* %16, i64 %61
  %63 = load i32, i32* %62, align 4, !tbaa !3
  %64 = add nsw i32 %19, %63
  %65 = mul nuw nsw i64 %59, %13
  %66 = add nuw nsw i64 %65, %59
  %67 = getelementptr inbounds i32, i32* %16, i64 %66
  store i32 %64, i32* %67, align 4, !tbaa !3
  %68 = add nuw nsw i64 %48, 2
  %69 = add i64 %49, -2
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %28, label %47, !llvm.loop !29

71:                                               ; preds = %231, %242, %210, %75, %152
  %72 = add nuw nsw i64 %77, 1
  %73 = icmp eq i64 %96, %45
  br i1 %73, label %74, label %75, !llvm.loop !30

74:                                               ; preds = %71
  br i1 %42, label %266, label %288

75:                                               ; preds = %43, %71
  %76 = phi i64 [ 0, %43 ], [ %96, %71 ]
  %77 = phi i64 [ 1, %43 ], [ %72, %71 ]
  %78 = xor i64 %76, -1
  %79 = add nsw i64 %78, %45
  %80 = add i64 %79, -8
  %81 = lshr i64 %80, 3
  %82 = add nuw nsw i64 %81, 1
  %83 = xor i64 %76, -1
  %84 = add nsw i64 %83, %45
  %85 = add i64 %84, -8
  %86 = lshr i64 %85, 3
  %87 = add nuw nsw i64 %86, 1
  %88 = xor i64 %76, -1
  %89 = add nsw i64 %88, %45
  %90 = xor i64 %76, -1
  %91 = add nsw i64 %90, %45
  %92 = mul nuw nsw i64 %76, %13
  %93 = getelementptr inbounds i32, i32* %16, i64 %92
  %94 = getelementptr inbounds i32, i32* %93, i64 %76
  %95 = load i32, i32* %94, align 4, !tbaa !3
  %96 = add nuw nsw i64 %76, 1
  %97 = icmp ult i64 %96, %44
  br i1 %97, label %98, label %71

98:                                               ; preds = %75
  %99 = icmp ult i64 %89, 8
  br i1 %99, label %149, label %100

100:                                              ; preds = %98
  %101 = and i64 %89, -8
  %102 = add i64 %77, %101
  %103 = trunc i64 %101 to i32
  %104 = sub i32 %95, %103
  %105 = insertelement <4 x i32> poison, i32 %95, i32 0
  %106 = shufflevector <4 x i32> %105, <4 x i32> poison, <4 x i32> zeroinitializer
  %107 = add <4 x i32> %106, <i32 0, i32 -1, i32 -2, i32 -3>
  %108 = and i64 %87, 1
  %109 = icmp ult i64 %85, 8
  br i1 %109, label %135, label %110

110:                                              ; preds = %100
  %111 = and i64 %87, 4611686018427387902
  br label %112

112:                                              ; preds = %112, %110
  %113 = phi i64 [ 0, %110 ], [ %131, %112 ]
  %114 = phi <4 x i32> [ %107, %110 ], [ %132, %112 ]
  %115 = phi i64 [ %111, %110 ], [ %133, %112 ]
  %116 = add i64 %77, %113
  %117 = add nsw <4 x i32> %114, <i32 -1, i32 -1, i32 -1, i32 -1>
  %118 = add <4 x i32> %114, <i32 -5, i32 -5, i32 -5, i32 -5>
  %119 = getelementptr inbounds i32, i32* %93, i64 %116
  %120 = bitcast i32* %119 to <4 x i32>*
  store <4 x i32> %117, <4 x i32>* %120, align 4, !tbaa !3
  %121 = getelementptr inbounds i32, i32* %119, i64 4
  %122 = bitcast i32* %121 to <4 x i32>*
  store <4 x i32> %118, <4 x i32>* %122, align 4, !tbaa !3
  %123 = or i64 %113, 8
  %124 = add i64 %77, %123
  %125 = add <4 x i32> %114, <i32 -9, i32 -9, i32 -9, i32 -9>
  %126 = add <4 x i32> %114, <i32 -13, i32 -13, i32 -13, i32 -13>
  %127 = getelementptr inbounds i32, i32* %93, i64 %124
  %128 = bitcast i32* %127 to <4 x i32>*
  store <4 x i32> %125, <4 x i32>* %128, align 4, !tbaa !3
  %129 = getelementptr inbounds i32, i32* %127, i64 4
  %130 = bitcast i32* %129 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %130, align 4, !tbaa !3
  %131 = add nuw i64 %113, 16
  %132 = add <4 x i32> %114, <i32 -16, i32 -16, i32 -16, i32 -16>
  %133 = add i64 %115, -2
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %135, label %112, !llvm.loop !31

135:                                              ; preds = %112, %100
  %136 = phi i64 [ 0, %100 ], [ %131, %112 ]
  %137 = phi <4 x i32> [ %107, %100 ], [ %132, %112 ]
  %138 = icmp eq i64 %108, 0
  br i1 %138, label %147, label %139

139:                                              ; preds = %135
  %140 = add i64 %77, %136
  %141 = add nsw <4 x i32> %137, <i32 -1, i32 -1, i32 -1, i32 -1>
  %142 = add <4 x i32> %137, <i32 -5, i32 -5, i32 -5, i32 -5>
  %143 = getelementptr inbounds i32, i32* %93, i64 %140
  %144 = bitcast i32* %143 to <4 x i32>*
  store <4 x i32> %141, <4 x i32>* %144, align 4, !tbaa !3
  %145 = getelementptr inbounds i32, i32* %143, i64 4
  %146 = bitcast i32* %145 to <4 x i32>*
  store <4 x i32> %142, <4 x i32>* %146, align 4, !tbaa !3
  br label %147

147:                                              ; preds = %135, %139
  %148 = icmp eq i64 %89, %101
  br i1 %148, label %152, label %149

149:                                              ; preds = %98, %147
  %150 = phi i64 [ %77, %98 ], [ %102, %147 ]
  %151 = phi i32 [ %95, %98 ], [ %104, %147 ]
  br label %235

152:                                              ; preds = %235, %147
  %153 = load i32, i32* %94, align 4, !tbaa !3
  br i1 %97, label %154, label %71

154:                                              ; preds = %152
  %155 = icmp ugt i64 %91, 7
  %156 = select i1 %155, i1 %46, i1 false
  br i1 %156, label %157, label %212

157:                                              ; preds = %154
  %158 = and i64 %91, -8
  %159 = add i64 %77, %158
  %160 = trunc i64 %158 to i32
  %161 = sub i32 %153, %160
  %162 = insertelement <4 x i32> poison, i32 %153, i32 0
  %163 = shufflevector <4 x i32> %162, <4 x i32> poison, <4 x i32> zeroinitializer
  %164 = add <4 x i32> %163, <i32 0, i32 -1, i32 -2, i32 -3>
  %165 = and i64 %82, 1
  %166 = icmp ult i64 %80, 8
  br i1 %166, label %196, label %167

167:                                              ; preds = %157
  %168 = and i64 %82, 4611686018427387902
  br label %169

169:                                              ; preds = %169, %167
  %170 = phi i64 [ 0, %167 ], [ %192, %169 ]
  %171 = phi <4 x i32> [ %164, %167 ], [ %193, %169 ]
  %172 = phi i64 [ %168, %167 ], [ %194, %169 ]
  %173 = add i64 %77, %170
  %174 = add nsw <4 x i32> %171, <i32 -1, i32 -1, i32 -1, i32 -1>
  %175 = add <4 x i32> %171, <i32 -5, i32 -5, i32 -5, i32 -5>
  %176 = mul nuw nsw i64 %173, %13
  %177 = add nuw nsw i64 %176, %76
  %178 = getelementptr inbounds i32, i32* %16, i64 %177
  %179 = bitcast i32* %178 to <4 x i32>*
  store <4 x i32> %174, <4 x i32>* %179, align 4, !tbaa !3
  %180 = getelementptr inbounds i32, i32* %178, i64 4
  %181 = bitcast i32* %180 to <4 x i32>*
  store <4 x i32> %175, <4 x i32>* %181, align 4, !tbaa !3
  %182 = or i64 %170, 8
  %183 = add i64 %77, %182
  %184 = add <4 x i32> %171, <i32 -9, i32 -9, i32 -9, i32 -9>
  %185 = add <4 x i32> %171, <i32 -13, i32 -13, i32 -13, i32 -13>
  %186 = mul nuw nsw i64 %183, %13
  %187 = add nuw nsw i64 %186, %76
  %188 = getelementptr inbounds i32, i32* %16, i64 %187
  %189 = bitcast i32* %188 to <4 x i32>*
  store <4 x i32> %184, <4 x i32>* %189, align 4, !tbaa !3
  %190 = getelementptr inbounds i32, i32* %188, i64 4
  %191 = bitcast i32* %190 to <4 x i32>*
  store <4 x i32> %185, <4 x i32>* %191, align 4, !tbaa !3
  %192 = add nuw i64 %170, 16
  %193 = add <4 x i32> %171, <i32 -16, i32 -16, i32 -16, i32 -16>
  %194 = add i64 %172, -2
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %196, label %169, !llvm.loop !33

196:                                              ; preds = %169, %157
  %197 = phi i64 [ 0, %157 ], [ %192, %169 ]
  %198 = phi <4 x i32> [ %164, %157 ], [ %193, %169 ]
  %199 = icmp eq i64 %165, 0
  br i1 %199, label %210, label %200

200:                                              ; preds = %196
  %201 = add i64 %77, %197
  %202 = add nsw <4 x i32> %198, <i32 -1, i32 -1, i32 -1, i32 -1>
  %203 = add <4 x i32> %198, <i32 -5, i32 -5, i32 -5, i32 -5>
  %204 = mul nuw nsw i64 %201, %13
  %205 = add nuw nsw i64 %204, %76
  %206 = getelementptr inbounds i32, i32* %16, i64 %205
  %207 = bitcast i32* %206 to <4 x i32>*
  store <4 x i32> %202, <4 x i32>* %207, align 4, !tbaa !3
  %208 = getelementptr inbounds i32, i32* %206, i64 4
  %209 = bitcast i32* %208 to <4 x i32>*
  store <4 x i32> %203, <4 x i32>* %209, align 4, !tbaa !3
  br label %210

210:                                              ; preds = %196, %200
  %211 = icmp eq i64 %91, %158
  br i1 %211, label %71, label %212

212:                                              ; preds = %154, %210
  %213 = phi i64 [ %77, %154 ], [ %159, %210 ]
  %214 = phi i32 [ %153, %154 ], [ %161, %210 ]
  %215 = sub i64 %45, %213
  %216 = xor i64 %213, -1
  %217 = add i64 %216, %45
  %218 = and i64 %215, 3
  %219 = icmp eq i64 %218, 0
  br i1 %219, label %231, label %220

220:                                              ; preds = %212, %220
  %221 = phi i64 [ %228, %220 ], [ %213, %212 ]
  %222 = phi i32 [ %224, %220 ], [ %214, %212 ]
  %223 = phi i64 [ %229, %220 ], [ %218, %212 ]
  %224 = add nsw i32 %222, -1
  %225 = mul nuw nsw i64 %221, %13
  %226 = add nuw nsw i64 %225, %76
  %227 = getelementptr inbounds i32, i32* %16, i64 %226
  store i32 %224, i32* %227, align 4, !tbaa !3
  %228 = add nuw nsw i64 %221, 1
  %229 = add i64 %223, -1
  %230 = icmp eq i64 %229, 0
  br i1 %230, label %231, label %220, !llvm.loop !34

231:                                              ; preds = %220, %212
  %232 = phi i64 [ %213, %212 ], [ %228, %220 ]
  %233 = phi i32 [ %214, %212 ], [ %224, %220 ]
  %234 = icmp ult i64 %217, 3
  br i1 %234, label %71, label %242

235:                                              ; preds = %149, %235
  %236 = phi i64 [ %240, %235 ], [ %150, %149 ]
  %237 = phi i32 [ %238, %235 ], [ %151, %149 ]
  %238 = add nsw i32 %237, -1
  %239 = getelementptr inbounds i32, i32* %93, i64 %236
  store i32 %238, i32* %239, align 4, !tbaa !3
  %240 = add nuw nsw i64 %236, 1
  %241 = icmp eq i64 %240, %45
  br i1 %241, label %152, label %235, !llvm.loop !36

242:                                              ; preds = %231, %242
  %243 = phi i64 [ %264, %242 ], [ %232, %231 ]
  %244 = phi i32 [ %260, %242 ], [ %233, %231 ]
  %245 = add nsw i32 %244, -1
  %246 = mul nuw nsw i64 %243, %13
  %247 = add nuw nsw i64 %246, %76
  %248 = getelementptr inbounds i32, i32* %16, i64 %247
  store i32 %245, i32* %248, align 4, !tbaa !3
  %249 = add nuw nsw i64 %243, 1
  %250 = add nsw i32 %244, -2
  %251 = mul nuw nsw i64 %249, %13
  %252 = add nuw nsw i64 %251, %76
  %253 = getelementptr inbounds i32, i32* %16, i64 %252
  store i32 %250, i32* %253, align 4, !tbaa !3
  %254 = add nuw nsw i64 %243, 2
  %255 = add nsw i32 %244, -3
  %256 = mul nuw nsw i64 %254, %13
  %257 = add nuw nsw i64 %256, %76
  %258 = getelementptr inbounds i32, i32* %16, i64 %257
  store i32 %255, i32* %258, align 4, !tbaa !3
  %259 = add nuw nsw i64 %243, 3
  %260 = add nsw i32 %244, -4
  %261 = mul nuw nsw i64 %259, %13
  %262 = add nuw nsw i64 %261, %76
  %263 = getelementptr inbounds i32, i32* %16, i64 %262
  store i32 %260, i32* %263, align 4, !tbaa !3
  %264 = add nuw nsw i64 %243, 4
  %265 = icmp eq i64 %264, %45
  br i1 %265, label %71, label %242, !llvm.loop !38

266:                                              ; preds = %74, %271
  %267 = phi i32 [ %274, %271 ], [ %18, %74 ]
  %268 = phi i64 [ %273, %271 ], [ 0, %74 ]
  %269 = mul nuw nsw i64 %268, %13
  %270 = icmp sgt i32 %267, 0
  br i1 %270, label %277, label %271

271:                                              ; preds = %277, %266
  %272 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0), i64 1)
  %273 = add nuw nsw i64 %268, 1
  %274 = load i32, i32* %1, align 4, !tbaa !3
  %275 = sext i32 %274 to i64
  %276 = icmp slt i64 %273, %275
  br i1 %276, label %266, label %288, !llvm.loop !39

277:                                              ; preds = %266, %277
  %278 = phi i64 [ %284, %277 ], [ 0, %266 ]
  %279 = add nuw nsw i64 %269, %278
  %280 = getelementptr inbounds i32, i32* %16, i64 %279
  %281 = load i32, i32* %280, align 4, !tbaa !3
  %282 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 %281)
  %283 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %282, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0), i64 1)
  %284 = add nuw nsw i64 %278, 1
  %285 = load i32, i32* %1, align 4, !tbaa !3
  %286 = sext i32 %285 to i64
  %287 = icmp slt i64 %284, %286
  br i1 %287, label %277, label %271, !llvm.loop !40

288:                                              ; preds = %271, %41, %74
  call void @llvm.stackrestore(i8* %14)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #12
  ret i32 0
}

declare dso_local %struct._IO_FILE* @freopen(i8*, i8*, %struct._IO_FILE*) local_unnamed_addr #0

declare dso_local nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16), i32* nonnull align 4 dereferenceable(4)) local_unnamed_addr #0

; Function Attrs: mustprogress nofree nosync nounwind willreturn
declare i8* @llvm.stacksave() #7

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8), i32) local_unnamed_addr #0

; Function Attrs: mustprogress nofree nosync nounwind willreturn
declare void @llvm.stackrestore(i8*) #7

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #8

declare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #0

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #9

; Function Attrs: argmemonly mustprogress nofree nounwind readonly willreturn
declare dso_local i32 @memcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #10

declare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32), i64, i64, i8*, i64) local_unnamed_addr #0

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8), i8*, i64) local_unnamed_addr #0

; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_TripleRecursion.cpp() #4 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #12
  ret void
}

; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn
declare void @llvm.experimental.noalias.scope.decl(metadata) #11

attributes #0 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nofree nounwind }
attributes #3 = { mustprogress nofree nounwind readonly uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #6 = { mustprogress norecurse uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { mustprogress nofree nosync nounwind willreturn }
attributes #8 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #10 = { argmemonly mustprogress nofree nounwind readonly willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #11 = { inaccessiblememonly nofree nosync nounwind willreturn }
attributes #12 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"int", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !9, i64 0}
!8 = !{!"_ZTSNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataE", !9, i64 0, !9, i64 8, !9, i64 16}
!9 = !{!"any pointer", !5, i64 0}
!10 = !{!11, !13, i64 8}
!11 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !12, i64 0, !13, i64 8, !5, i64 16}
!12 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !9, i64 0}
!13 = !{!"long", !5, i64 0}
!14 = !{!11, !9, i64 0}
!15 = !{!12, !9, i64 0}
!16 = !{!5, !5, i64 0}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.mustprogress"}
!19 = distinct !{!19, !18}
!20 = !{!13, !13, i64 0}
!21 = !{!22}
!22 = distinct !{!22, !23, !"_Z7remove0NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE: argument 0"}
!23 = distinct !{!23, !"_Z7remove0NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"}
!24 = !{!25}
!25 = distinct !{!25, !26, !"_Z7remove0NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE: argument 0"}
!26 = distinct !{!26, !"_Z7remove0NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"}
!27 = distinct !{!27, !18}
!28 = !{!9, !9, i64 0}
!29 = distinct !{!29, !18}
!30 = distinct !{!30, !18}
!31 = distinct !{!31, !18, !32}
!32 = !{!"llvm.loop.isvectorized", i32 1}
!33 = distinct !{!33, !18, !32}
!34 = distinct !{!34, !35}
!35 = !{!"llvm.loop.unroll.disable"}
!36 = distinct !{!36, !18, !37, !32}
!37 = !{!"llvm.loop.unroll.runtime.disable"}
!38 = distinct !{!38, !18, !32}
!39 = distinct !{!39, !18}
!40 = distinct !{!40, !18}
